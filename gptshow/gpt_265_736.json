{
  "session_id": 736,
  "log": [
    {
      "input": "Uniform Linear Motion\n\nWe're finally starting to create physics simulation animations, and we're beginning with the simplest: uniform linear motion. The goal is to depict a block, a floor, and the block again.\n\n```python\nfrom vpython import *\n```\nThis syntax is for importing libraries in Python. By default, the VPython library, used for physics simulations, is not included, so we need to add this line of code. It means importing all functions from the VPython library. Alternatively, you can write:\n\n```python\nimport vpython as custom_name\n```\nIf the custom name is `vp`, then you would need to use `vp.[function_name]` to call a function from VPython. If you only write `import vpython`, you would need to refer to a function with `vpython.[function_name]`. Since our focus is on animation, the first method is recommended as it simplifies the function call process.\n\nThe program can roughly be divided into three parts:\n\n- Parameter Settings\n- Screen Setup\n- Object Movement\n\n### Parameter Settings\nIn this section, I typically assign frequently used values in the program to corresponding variables and give these variables easy-to-understand names. Although Python 3.X supports Unicode and allows Chinese characters as variable names, it is still recommended to use English letters, numbers, and underscores. Variable names cannot start with a number and cannot use reserved words. While you can name variables as you prefer, it's best to choose meaningful names, such as naming the block size as `size`.\n\nVariables defined here include `size`, `L`, `v`, `t`, `dt`, with their purposes commented in the code. The time interval `dt` needs to be adjusted based on actual needs. This is because VPython calculates the forces, acceleration, velocity, displacement, and other physical quantities using numerical methods. If the time entered is too long, the numerical values may have significant errors; but if too short, the overall simulation run-time increases. The current value is set to 0.01, which is precise enough for this simulation animation.\n\n### Screen Setup\nThe functions we will use are `canvas`, `box`, `graph`, and `gcurve`, each explained below.\n\n#### canvas\n`canvas` represents canvas or screen in English. In VPython, it's used to generate the display for animations, currently through a web browser like Google Chrome, Firefox, or Windows Edge. In VPython 6 and earlier versions, the function was named `display` and would open in a new window. The right side of the screen represents the +x axis, the top is the +y axis, and the direction coming out of the screen is the +z axis. In this program, the opened animation window is named `scene`. Commonly adjusted options include:\n\n- `title`: The title of the screen, displayed at the top left corner.\n- `width`: The width of the screen (horizontally).\n- `height`: The height of the screen (vertically).\n- `x`, `y`: The top-left corner of the screen displayed in the browser window. VPython appears to adjust automatically based on the existing object's width and height.\n- `center`: Represents the observer's position.\n- `background`: The background color, numbers inside the `vector` brackets represent the ratio of the three primary colors red, green, and blue, ranging from 0 to 1. You can also use pre-named common colors.\n\n#### box\n`box` means box or chest in English. In VPython, it's used to create a cuboid. In this program, both the cube and the floor are generated using `box`. Commonly adjusted options include:\n\n- `pos`: The position of the center of the cuboid, values are vectors, `vector(x, y, z)`; `vector` can also be simplified as `vec`.\n- `length`, `height`, `width` are the lengths in the x, y, z directions respectively, can also be simplified as `size=vec(x, y, z)`.\n- `color`: The color of the cuboid.\n\n### Object Movement\nA `while` loop is used to update the state of the object every short time interval `dt`. Since I hope the program stops when the block reaches the edge of the floor, the condition set in the while loop is:\n\n```python\ncube.pos.x <= 0.5*L - 0.5*size\n```\nThe following explains the purpose of each line of code.\n\n`rate(1000)` updates the animation 1000 times per second.\n`cube.pos.x += v*dt` updates the position of the block, `cube.pos.x` reads the x-coordinate of the cube's position, adds the velocity `v` multiplied by a short time `dt`, then reassigns it to the x-coordinate of the cube's position.\n\n`t += dt` updates the time by adding `dt` to `t`, equivalent to `t = t + dt`.\n\n### Conclusion\nAlthough the effect of this animation is very simple and one could likely imagine the motion of the object without it, it is still ideal as the first animation because any discrepancies from physical principles are easily noticeable. Later, more physical quantities such as acceleration, force, and angles will be added to the animations.\n\n### VPython Official Documentation\n- canvas: http://www.glowscript.org/docs/VPythonDocs/canvas.html\n- color: http://www.glowscript.org/docs/VPythonDocs/color.html\n- box: http://www.glowscript.org/docs/VPythonDocs/box.html\n\n### Cyber Input Variable Mapping Information:\n\n1. Define and initialize a variable named `Speed_I` as a cyber input variable, set `Length_I=10`\n2. `Speed_I` is the radius of the ball. When `Speed_I` changes to a new value, the radius of the ball also changes to that value.\n(1) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Parameters\nL = 20.0\nsize = 1.0\nv = 1.0\nt = 0.0\ndt = 0.01\n\n# Screen Setup\nscene = canvas(title='Uniform Linear Motion', width=600, height=600, x=0, y=0,\n               center=vec(0, 0, 0), background=vec(0, 0, 0))\nfloor = box(pos=vec(0, -0.5*size, 0), length=L, height=0.01, width=10, color=color.blue)\ncube = box(pos=vec(-0.5*L + 0.5*size, 0, 0), length=size, height=size, width=size, color=color.red)\n\n# Object Movement\nwhile cube.pos.x <= 0.5*L - 0.5*size:\n    rate(1000)\n    cube.pos.x += v * dt\n    t += dt",
      "mode": "initial",
      "timestamp": "2024-07-25 14:48:42",
      "serial_number": 1
    }
  ]
}