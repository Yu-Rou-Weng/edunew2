{
  "session_id": 737,
  "log": [
    {
      "input": "# Free Fall\n\nIn this example, we add the effect of gravity to an object. The goal is to illustrate a ball accelerating downwards from a certain height until it hits and stops on the ground.\n\n## Parameter Settings\n\nVariables defined here include `size`, `h`, `g`, `t`, `dt`, with their purposes already commented in the respective lines.\n\n## Display Settings\n\n### sphere\n\nCompared to the previous example, a new function added here is `sphere`, which is used to draw a sphere. `sphere` means sphere or ball in English, and in VPython, it is used to generate a sphere. In this program, it is used to create an object `ball`.\n\nCommonly adjusted options when creating an object are:\n\n- `pos`: The position of the center of the sphere, the value is a vector, `vector(x, y, z)`, `vector` can also be abbreviated as `vec`.\n- `radius`: The radius, a scalar value.\n- `color`: The color.\n\nYou can also adjust the properties of an object after its creation using `[object name].[option] =`, such as mass `m`, position `pos`, velocity `v`, acceleration `a`, momentum `p`, etc. Therefore, the following two lines of code set the velocity of the object named `ball` to `(0, 0, 0)` and its acceleration to `(0, -g, 0)`.\n\n```python\nball.v = vec(0, 0, 0)\nball.a = vec(0, -g, 0)\n```\n## Object Motion\nA while loop is used to update the state of the object at every small time interval dt. The program stops when the ball touches the ground, hence the condition set inside the while loop is:\n\n```python\nball.pos.y - floor.pos.y > size + 0.5*floor.height\n```\nThe loop continues as long as this condition is true. The following lines explain the purpose of each code line.\n\n```python\nrate(1000)  # Update the animation 1000 times per second\nball.v += ball.a * dt  # Update the ball's velocity\nball.pos += ball.v * dt  # Update the ball's position\nt += dt  # Update the time\nprint(\"t = \", t)  # Print the total time elapsed during the motion\n```\nrate(1000) updates the animation 1000 times per second.\nball.v += ball.a*dt updates the ball's velocity by reading the current velocity, adding the acceleration multiplied by a small time interval, and then reassigning it to the ball\u2019s velocity. Since the time interval dt is very short, it can be considered as a small segment of uniformly accelerated motion, thus this formula is v = v0 + at.\nball.pos += ball.v*dt updates the ball's position by reading the current position, adding the velocity multiplied by a small time interval, and then reassigning it to the ball\u2019s position. Since the time interval dt is very short, it can be considered as a small segment of uniform motion, thus this formula is s = v \u00d7 dt.\n\nt += dt updates the time.\nprint(\"t = \", t) prints the total time elapsed during the motion.\n\n\nVPython Official Documentation\ncanvas: http://www.glowscript.org/docs/VPythonDocs/canvas.html\nbox: http://www.glowscript.org/docs/VPythonDocs/box.html\nsphere: http://www.glowscript.org/docs/VPythonDocs/sphere.html\n\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Parameter Settings\nRadius_I = 1  # radius of the ball\nh = 15.0  # initial height\ng = 9.8  # acceleration due to gravity\nt = 0  # time\ndt = 0.001  # time step\n\n# Display Settings\nfloor = box(length=30, height=0.01, width=10, color=color.blue)  # floor \nball = sphere(pos=vec(0, h, 0), radius=Radius_I, color=color.red)  # ball\n\n# Initialize motion parameters\nball.v = vec(0, 0, 0)\nball.a = vec(0, -g, 0)\n\n# Object Motion\nwhile ball.pos.y - floor.pos.y > Radius_I + 0.5*floor.height:\n    rate(1000)\n    ball.v += ball.a * dt\n    ball.pos += ball.v * dt\n    t += dt\nprint(\"t = \", t)",
      "mode": "initial",
      "timestamp": "2024-07-25 14:51:50",
      "serial_number": 1
    }
  ]
}