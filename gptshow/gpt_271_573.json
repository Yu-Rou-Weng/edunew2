{
  "session_id": 573,
  "log": [
    {
      "input": "### Horizontal Projectile Motion, Considering Gravity and Air Resistance f = -bv\n\nA small ball is thrown horizontally from a height \\( h \\) with an initial velocity \\( v_0 \\), accelerating downwards due to gravity and also considering air resistance \\( f = -bv \\). The program should be written as: Horizontal projectile motion, considering gravity and air resistance \\( f = -bv \\).\n\n1. Horizontal Projectile Motion Program:\n\nParameter Settings\nVariables defined here include size, \\( v_0 \\), \\( h \\), \\( L \\), \\( g \\), \\( i \\), \\( t \\), \\( dt \\), with their purposes already described in the comments of each line.\n\nDisplay Settings\nIn this example, no colors (color) are set for the sphere and box objects, instead textures are specified, with the syntax being:\ntexture = textures.[texture_name]\n\nCurrently, VPython 7 supports the following 12 textures:\n\nnames = [\"flower\", \"granite\", \"gravel\", \"metal\", \"rock\", \"rough\",\n         \"rug\", \"stones\", \"stucco\", \"wood\", \"wood_old\", \"earth\"]\ntex = [textures.flower, textures.granite, textures.gravel, textures.metal, textures.rock, textures.rough,\n       textures.rug, textures.stones, textures.stucco, textures.wood, textures.wood_old, textures.earth]\n\nSupported colors in VPython 7:\n\nnames = [\"red\", \"green\", \"blue\", \"purple\", \"yellow\", \"orange\", \"cyan\",\n         \"magenta\", \"black\", \"white\", \"gray\", \"custom\"]\ncolors = [color.red, color.green, color.blue, color.purple, color.yellow,\n          color.orange, color.cyan, color.magenta, color.black, color.white, color.gray(0.5), vec(0, 0.6, 0.6)]\n\nYou can also use an online image to customize the texture, simply by adding the image URL to the texture and enclosing it with quotes, as shown with the Jupiter image:\n\njupiter = sphere(pos=vec(0, 0, 0), radius=1, \n                 texture=\"https://upload.wikimedia.org/wikipedia/commons/c/c1/Jupiter_New_Horizons.jpg\")\n\nUsing an Online Image to Customize Texture:\n```python\nscene = canvas(title=\"Jupiter\", width=600, height=600, color=color.black, range=1.5)\njupiter = sphere(pos=vec(0, 0, 0), radius=1, texture=\"https://upload.wikimedia.org/wikipedia/commons/c/c1/Jupiter_New_Horizons.jpg\")\nwhile True: \n    rate(1000)\n    jupiter.rotate(angle=2*pi/(24*60*60), axis=vec(0, 1, 0))\n```\n\nBuilt-In Earth Texture:\n```python\nscene = canvas(title=\"Earth\", width=600, height=600, color=color.black, range=1.5)\nearth = sphere(pos=vec(0, 0, 0), radius=1, texture=textures.earth)\nwhile True: \n    rate(1000)\n    earth.rotate(angle=2*pi/(24*60*60), axis=vec(0, 1, 0))\n```\nYou can set the initial velocity and acceleration when creating the sphere `ball`, or set them later as follows:\n\nball.v = vec(v0, 0, 0)\nball.a = vec(0, -g, 0)\n\nObject Motion\nThe condition set in the while loop is:\n\nball.pos.x < L/2\nThe animation will continue until the ball reaches the right edge of the floor.\n\nWhen the ball hits the floor, increment the collision count \\( i \\), print the collision count \\( i \\), elapsed time \\( t \\), and horizontal range ball.pos.x + L/2, and reverse the y-direction velocity of the ball by adding the following code:\n\nif ball.pos.y - floor.pos.y <= size + 0.5*floor.height and ball.v.y < 0:\n    i += 1\n    print(i, t, ball.pos.x + L/2)\n    ball.v.y = -ball.v.y\n\n2. Horizontal Projectile Motion Program with Coefficient of Restitution \\( e \\):\n\nThe program for horizontal projectile motion with coefficient of restitution \\( e \\) is almost identical to the basic horizontal projectile motion program, except that it adds the coefficient of restitution \\( e \\) and modifies the ball's behavior when it hits the floor:\n\nif ball.pos.y - floor.pos.y <= size + 0.5*floor.height and ball.v.y < 0:\n    i += 1\n    print(i, t, ball.pos.x + L/2)\n    ball.v.y = -ball.v.y * e\n\n3. Horizontal Projectile Motion, Considering Gravity and Air Resistance \\( f = -bv \\):\n\nThe program for horizontal projectile motion, considering gravity and air resistance \\( f = -bv \\), is almost identical to the one with the coefficient of restitution \\( e \\), with the difference being:\n\nIncreased coefficient \\( b \\) for air resistance.\n\nDuring the while loop, add:\n\n    f = -b*ball.v\n    ball.a = vec(0, -g, 0) + f/m\nCalculate the current air resistance and the ball's acceleration.\n\nTo prevent the ball from experiencing excessive resistance preventing it from reaching the right edge of the floor, the while loop condition includes \\( i < 20 \\); the animation stops when the ball hits the floor 20 times.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Speed_I as a cyber input variable, set Speed_I=5.\n(2) Speed_I is the horizontal initial velocity of the ball. When Speed_I changes to a new value, the horizontal initial velocity of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math and time.",
      "output": "from vpython import *\n\n# parameter settings\nsize = 0.25 # ball radius\nh = 15.0 # ball height\nL = 30.0 # box length\ng = 9.8 # gravity\nb = 0.5 # air resistance\nm = 0.2 # mass\nv0 = 5.0 # initial velocity\ni = 0 # collision count\nt = 0 # time\ndt = 0.001 # time step\n\n# scene settings\nscene = canvas(width=800, height=800, background=vec(0.5,0.5,0), center = vec(0, h/2, 0), range=L/2)\nfloor = box(pos=vec(0, -0.5*L, 0), length=L, height=0.01, width=3)\nball = sphere(pos = vec(-L/2 + size, h, 0), radius = size, color = color.blue)\nball.v = vec(v0, 0, 0)\nball.a = vec(0, -g, 0)\n\n# motion\nwhile ball.pos.x < L/2 and i < 20: \n    rate(1000)\n    # air resistance\n    f = -b*ball.v\n    ball.a = vec(0, -g, 0) + f/m\n    ball.v += ball.a*dt\n    ball.pos += ball.v*dt\n    # check collision\n    if ball.pos.y - floor.pos.y <= size + 0.5*floor.height and ball.v.y < 0:\n        i += 1\n        print(i, t, ball.pos.x + L/2)\n        ball.v.y = -ball.v.y\n    t += dt",
      "mode": "initial",
      "timestamp": "2024-07-23 22:09:25",
      "serial_number": 1
    }
  ]
}