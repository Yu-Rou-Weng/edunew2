{
  "session_id": 596,
  "log": [
    {
      "input": "# Vertical Circular Motion\n\n## Theoretical Analysis\n\nTo simplify the calculation process, I set the center of the circle at the origin, and the ball starts from $(0, R, 0)$ with an initial velocity of $(-v_0, 0, 0)$. The acceleration is divided into the normal acceleration $a_n$, which is the centripetal acceleration $a_c$, and the tangential acceleration $a_t$. The calculation of $a_n$ is the same as in Program 7-1 and will not be detailed here. The source of $a_t$ is the tangential component of gravitational acceleration. Assuming the angle between the ball and the vertical line is $\\theta$, then $$a_t = g \\sin{\\theta}$$\n\nThe y-component of $a_t$ is downward, with a magnitude of $$a_{t,y} = a_t \\sin{\\theta} = g \\sin^2{\\theta}$$\n\nThe x-component of $a_t$ depends on the position; it is to the right in the 1st and 3rd quadrants, and to the left in the 2nd and 4th quadrants, with a magnitude of\n$$\na_{t,x} = a_t \\cos{\\theta} = g \\sin{\\theta} \\cos{\\theta}\n$$\n\nIf one only wants to find the period, it can be calculated by conserving mechanical energy. Assuming the speed of the ball at the highest point is\n$$\nv_0 = \\sqrt{ngR}\n$$\n\nFrom the conservation of mechanical energy, the relationship between any point and the highest point is [9]\n$$\n\\frac{1}{2} m v^2 + m g R \\cos{\\theta} = \\frac{1}{2} m n^2 g R + m g R\n$$\n$$\nv = R \\frac{d\\theta}{dt} = \\sqrt{(n^2 + 2 - 2 \\cos{\\theta}) g R}\n$$\n$$\nT = \\int_0^T dt = 2 \\frac{R}{g} \\int_0^\\pi \\frac{d\\theta}{\\sqrt{n^2 + 2 - 2 \\cos{\\theta}}}\n$$\n\n## Parameter Settings\n\nVariables defined here include size, R, g, v0, ratio, i, t, dt, with their purposes already noted in the respective comments. To reduce the time length errors in substitution, dt is adjusted to 0.0001.\n\n## Visual Settings\n\nThe ball moves in the xy-plane, starting from a point directly above at distance R, with initial velocity direction along the -x axis, and magnitude v0. There is no need to adjust the observer's position and direction.\nThe rotation axis direction is changed to point towards the +z axis.\narrow_v and arrow_a are used to represent the velocity and acceleration of the ball.\n\n## Custom Functions\n\nThe custom function `findan` takes v and pos as input parameters, both in vector format, to calculate the ball's normal acceleration an.\nThe custom function `findat` takes pos as input, in vector format, to calculate the ball's tangential acceleration $a_t$. The angle between the rope and the vertical line is $\\theta$, first calculate $\\sin{\\theta}$ and $\\cos{\\theta}$, since $\\theta$ only takes acute angles, both are positive. Then calculate $a_{t,y}$ and $a_{t,x}$, and determine the sign of $a_{t,x}$ from pos.\n\n## Object Motion\n\nWhether the ball has returned to the starting point is determined by its position. Since the ball starts at the highest point and rotates counter-clockwise, the condition for returning to the starting point is: the ball's original position xp is in the +x area, and its current position xc is in the -x area. If it returns to the starting point, print the elapsed time t, add 1 to the count i, and stop the animation after the ball returns 5 times.\nDue to the small dt, the number of calculations per second is changed to 5000 to speed up the animation.\nUse custom functions findan and findat to calculate the ball's normal and tangential accelerations.\nUpdate the ball's velocity, position, update the starting point, direction, and length of the arrows, and update the time.\n\nData Processing Section\n\nIf the speed of the ball at the highest point is\n$$\nv_0 = n \\sqrt{gR}\n$$\n, substitute n from 1 to 7, and find the period through both simulation and theoretical calculation, the data is as follows:\n\nn v0 T_theoretical T_simulation\n1 7 2.8841511713977500 2.8838000000016613\n2 14 1.8728982530658000 1.8728999999998102\n3 21 1.3617223964215400 1.3617999999999999\n4 28 1.0602946238731300 1.0602999999998997\n5 35 0.8646052540953560 0.8645999999999211\n6 42 0.7284267507699600 0.7283999999999361\n7 49 0.6286255969937600 0.6285999999999471\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=0.5\n\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# parameters\ng = 9.8\nsize = 0.25\ntheta = 0.0\nomega = 0.0\ndt = 0.0001\nt = 0.0\nn = 1\nR = 0.5\ni = 0\n\n# objects\nball = sphere(pos=vector(0, -R, 0), radius=size, color=color.red)\nceiling = sphere(pos=vector(0, 0, 0), radius=0.1*size)\nball.v = vector(n*sqrt(g*R), 0, 0)\nstring = cylinder(pos=ball.pos, axis=ceiling.pos-ball.pos, radius=0.01)\narrow_v = arrow(pos=ball.pos, axis=ball.v, shaftwidth=0.01, color=color.green)\narrow_a = arrow(pos=ball.pos, shaftwidth=0.01, color=color.blue)\n\n# calculation functions\ndef findan(v, pos):\n    an = mag(v)**2/mag(pos)\n    return an\n\ndef findat(pos):\n    a = g*pos.x/mag(pos)\n    ax = -a*pos.x/mag(pos)\n    ay = -a*pos.y/mag(pos)\n    at = vector(ax, ay, 0)\n    return at\n\n# motion\nwhile i < 5:\n    rate(5000)\n    ball.a = vector(0, -g, 0) - findan(ball.v, ball.pos)*norm(ball.pos) - findat(ball.pos)\n    ball.v += ball.a*dt\n    ball.pos += ball.v*dt\n    string.pos = ball.pos\n    string.axis = ceiling.pos - ball.pos\n    arrow_v.pos = ball.pos\n    arrow_v.axis = ball.v\n    arrow_a.pos = ball.pos\n    arrow_a.axis = ball.a\n    t += dt\n    if ball.pos.x < 0 and ball.v.x > 0:\n        print(t)\n        i += 1",
      "mode": "initial",
      "timestamp": "2024-07-24 02:46:26",
      "serial_number": 1
    }
  ]
}