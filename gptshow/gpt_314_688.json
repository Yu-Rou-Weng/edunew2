{
  "session_id": 688,
  "log": [
    {
      "input": "Magnetic Field Generated by a Current-Carrying Solenoid\n\nChapter 8 of the elective physics course, \"Magnetic Effects of Electric Current,\" introduces the Biot-Savart law, which is used to calculate the magnetic field generated at a point in space by a small segment of a current-carrying conductor. The equation is given by:\n$$\nd\\vec{B} = \\frac{\\mu_0}{4\\pi} \\frac{I d\\vec{L} \\times \\hat{r}}{r^2} \\Rightarrow dB = \\frac{\\mu_0}{4\\pi} \\frac{I dL \\sin{\\theta}}{r^2}\n$$\n\nUsing the Biot-Savart law, we can calculate the magnetic field magnitude at a perpendicular distance $r$ from a long straight current-carrying conductor as:\n$$\nB = \\frac{\\mu_0 I}{2\\pi r}\n$$\n\nThe magnetic field magnitude at the center of a current-carrying loop with radius $r$ is:\n$$\nB = \\frac{\\mu_0 I}{2r}\n$$\n\nThe magnetic field magnitude at the center of a solenoid with $n$ turns per unit length carrying a current $I$ is:\n$$\nB = \\mu_0 n I\n$$\n\nMagnetic fields are distributed throughout space, but the illustrations in the textbook are all in two dimensions. Therefore, I intend to use VPython to visualize the strength and direction of the magnetic field in three-dimensional space.\n\nProgramming Part\n\nThe program for generating the magnetic field of a current-carrying solenoid is based on the program for the magnetic field produced by a current-carrying loop, with the following modifications:\n\nNew variables include the radius of the spheres (point_size), the radius of the conductor segments (seg_size), the radius of the solenoid (r), and the number of turns of the solenoid (num).\n\nA for-loop is used to arrange 500 spheres in a helical line, and the data is stored in the list points.\n\nAnother for-loop reads two adjacent spheres from the list points at a time, calculates the length and direction of the line connecting the spheres, and draws the conductor segment starting at the midpoint of the two spheres. The data is stored in the list segs.\n\nIllustration to be drawn:\n![image](https://hackmd.io/_uploads/r1QWA3TuC.png)\n(1) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Constants\nmu0 = 4*pi*1E-7\nI = 1.0\nnum = 50\nr = 1.0\nseg_size = 0.03*r\npoint_size = 0.1*seg_size\ndtheta = 2*pi/num\ntheta = 0.0\nsegs = []\npoints = []\n\n# Scene\nscene = canvas(width=800, height=800, background=vec(0.5,0.5,0))\n\n# Creating the solenoid\nfor i in range(num*500):\n    sphere(pos=vec(r*cos(theta), r*sin(theta), 5.0*i/num), radius=point_size, color=color.yellow)\n    points.append(sphere(pos=vec(r*cos(theta), r*sin(theta), 5.0*i/num), radius=point_size, color=color.yellow))\n    theta += dtheta\n\nfor i in range(len(points)-1):\n    ds = points[i+1].pos-points[i].pos\n    segs.append(cylinder(pos=points[i].pos+ds/2, axis=ds, radius=seg_size, color=color.cyan))\n\n# Magnetic field detection points\nobservation_locations = [vec(3*r*cos(phi), 3*r*sin(phi), z) for phi in arange(0, 2*pi, pi/6) for z in arange(-2, 2, 0.5)]\n\n# Magnetic field calculation and arrow visualization\nfor loc in observation_locations:\n    B = vec(0, 0, 0)\n    for s in segs:\n        r = loc - s.pos\n        dB = (mu0*I/(4*pi*mag(r)**2))*(cross(s.axis, r)/mag(r))\n        B += dB\n    arrow(pos=loc, axis=1E-5*B, color=color.red)",
      "mode": "initial",
      "timestamp": "2024-07-24 10:23:05",
      "serial_number": 1
    }
  ]
}