{
  "session_id": 715,
  "log": [
    {
      "input": "Magnetic Fields Generated by Two Current-Carrying Coils\n\nIn the elective physics course, Chapter 8 on the magnetic effects of currents introduces Biot-Savart Law, which is used to calculate the magnetic field produced at a point in space by a small segment of current-carrying wire. The equation is:\n$$\nd\\vec{B} = \\frac{\\mu_0}{4\\pi} \\frac{I d\\vec{L} \\times \\hat{r}}{r^2} \\Rightarrow dB = \\frac{\\mu_0}{4\\pi} \\frac{I dL \\sin{\\theta}}{r^2}\n$$\n\nUsing Biot-Savart Law, the magnitude of the magnetic field at a perpendicular distance \\(r\\) from a long straight current-carrying wire can be calculated as:\n$$\nB = \\frac{\\mu_0 I}{2\\pi r}\n$$\n\nThe magnitude of the magnetic field at the center of a current-carrying coil with radius \\(r\\) is:\n$$\nB = \\frac{\\mu_0 I}{2r}\n$$\n\nThe magnetic field strength at the center of a solenoid with \\(n\\) turns per unit length carrying current \\(I\\) is:\n$$\nB = \\mu_0 n I\n$$\n\nMagnetic fields are distributed in space, but diagrams in textbooks are often in 2D. Therefore, I want to use VPython to visualize the strength and direction of the magnetic field in space.\n\nProgramming Part\n\nThe program \"Magnetic Fields Generated by Two Current-Carrying Coils\" primarily aims to plot the magnetic field of a Helmholtz coil, based on the program \"Magnetic Field of a Current-Carrying Coil\" with the addition of another coil. The differences are outlined below.\n\nAn additional coil necessitates the definition of a new variable, delta, to adjust the distance between the coils. The two coils are positioned at (0, delta, 0) and (0, -delta, 0) respectively.\n\nThe arrangement of small spheres after dividing the ring remains unchanged, but the data for the spheres from the two coils are stored in two separate lists.\n\nWhen calculating the magnetic field, the data from segs1 and segs2 must be entered into the custom function to determine the total magnetic field.\n\nIllustration to be generated:\n\n![image](https://hackmd.io/_uploads/SJfAahpdR.png)\n(1) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Constants\nmu0 = 4*pi*1E-7\nI = 1\nN = 100\nR = 1\n\n# Creating 2 coils\ndelta = R/2\nring1 = ring(pos=vector(0,delta,0), axis=vector(0,1,0), radius=R, thickness=0.01)\nring2 = ring(pos=vector(0,-delta,0), axis=vector(0,1,0), radius=R, thickness=0.01)\n\n# Dividing the rings into small segments\nangle = 2*pi/N\nsegs1 = [ring1.pos + vector(R*cos(i*angle), 0, R*sin(i*angle)) for i in range(N)]\nsegs2 = [ring2.pos + vector(R*cos(i*angle), 0, R*sin(i*angle)) for i in range(N)]\n\n# Defining function to calculate magnetic field\ndef B_field(P, segs):\n    B = vec(0,0,0)\n    for seg in segs:\n        r = P - seg\n        dL = R*angle*cross(vector(0,1,0), norm(r))\n        dB = (mu0*I/(4*pi*mag(r)**2))*cross(dL, norm(r))\n        B += dB\n    return B\n\n# Creating arrows to represent magnetic field\nscale = 1E4\nfor x in arange(-1.5, 1.6, 0.2):\n    for y in arange(-1.5, 1.6, 0.2):\n        for z in arange(-1.5, 1.6, 0.2):\n            P = vector(x, y, z)\n            B = B_field(P, segs1) + B_field(P, segs2)\n            if mag(B) > 0:\n                arrow(pos=P, axis=B*scale, color=color.red)",
      "mode": "initial",
      "timestamp": "2024-07-24 13:29:33",
      "serial_number": 1
    }
  ]
}