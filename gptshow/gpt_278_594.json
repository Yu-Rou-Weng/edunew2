{
  "session_id": 594,
  "log": [
    {
      "input": "Simple Harmonic Motion with Damping\n\nOn a smooth horizontal table, there is a block of mass $m$ connected to the left wall by a spring with a spring constant $k$. If the block is pulled to the right by a distance $R$ and then released from rest, the relationship between the net force on the block and its acceleration is given by:\n$$\nF = -kx = ma \\Rightarrow -kx = m \\frac{d^2 x}{d t^2}\n$$\n\nAt this point, the motion of the block is referred to as simple harmonic motion (S.H.M.), and from the equation above, we can derive:\n$$\nx(t) = R \\cos(\\omega t + \\phi)\n$$\n$$\nv(t) = -\\omega R \\sin(\\omega t + \\phi)\n$$\n$$\na(t) = -\\omega^2 R \\cos(\\omega t + \\phi)\n$$\n\nIn the equations above, $\\omega$ is the angular frequency:\n$$\n\\omega = \\sqrt{\\frac{k}{m}}\n$$\n\nThe period is:\n$$\nT = 2\\pi \\sqrt{\\frac{m}{k}}\n$$\n\nTheoretically, by setting up the relationship between the restoring force of the spring and the displacement of the block from the equilibrium position in VPython, we should be able to simulate the process and period of simple harmonic motion. The goal is to write a program for simple harmonic motion considering damping.\n\n### Theoretical Calculation [6]\n\nAssuming the damping force experienced by the block is\n$f = -bv$,\nfrom Newton's second law, we can derive:\n$$\nma + bv + kx = 0\n$$\n$$\nm \\frac{d^2 x}{d t^2} + b \\frac{d x}{d t} + kx = 0\n$$\n\nThere are three cases:\n\n1. $b^2 > 4mk$ Overdamped\n2. $b^2 = 4mk$ Critically damped\n3. $b^2 < 4mk$ Underdamped\n\n## Programming Part\n\nThe program for simple harmonic motion with damping is very similar to that of simple harmonic motion, with two differences.\n\nWhen calculating the net force on the block, it should be changed to:\n\nF = -k * (spring.axis - vec(L0, 0, 0)) - b * block.v\nSince the block does not return to the starting point, when determining if the block has completed a period, we use velocity to decide. If the block's velocity was initially to the right and then to the left, it indicates that the block has completed a period.\n\nvc = block.v.x\nif vp > 0 and vc < 0:\n    i += 1\n    print(i, t)\nvp = vc\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Amplification_I as a cyber input variable, set Amplification_I=5\n(2) Amplification_I is the amplification of the block. When Amplification_I changes to a new value, the amplification of the block also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Define and initialize variables\nm = 1\nk = 20\nb = 1\nL0 = 1\nR = 0.5\nomega = sqrt(k / m)\nT = 2 * pi * sqrt(m / k)\nAmplification_I = 5\ni = 0\nt = 0\ndt = 0.001\nvp = 0\n\n# Create objects\ntable = box(size=vec(2, 0.02, 1), color=color.white)\nblock = box(pos=vec(0, table.size.y / 2 + 0.1, 0), v=vec(0, 0, 0), size=vec(0.2, 0.2, 0.2), m=m, color=color.red)\nspring = helix(pos=vec(-table.size.x / 2, table.size.y / 2, 0), axis=block.pos, radius=0.1, coils=20, color=color.yellow)\n\n# Animation loop\nwhile True:\n    rate(1/dt)\n    \n    # Calculate the net force on the block\n    F = -k * (spring.axis - vec(L0, 0, 0)) - b * block.v\n    \n    # Update the velocity and position of the block\n    block.v += F / block.m * dt\n    block.pos += block.v * dt\n    \n    # Update the spring axis\n    spring.axis = block.pos\n    \n    # Determine if the block has completed a period\n    vc = block.v.x\n    if vp > 0 and vc < 0:\n        i += 1\n        print(i, t)\n    vp = vc\n    \n    # Update time\n    t += dt\n    \n    # Update the amplification of the block\n    block.size = Amplification_I * block.size",
      "mode": "initial",
      "timestamp": "2024-07-24 02:43:34",
      "serial_number": 1
    }
  ]
}