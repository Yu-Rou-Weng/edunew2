{
  "session_id": 847,
  "log": [
    {
      "input": "Please write a VPython code for \"Three-Dimensional Elastic Collision, m1 = m2\"\n\nThree-Dimensional Elastic Collision Formula:\n\nThis program mainly refers to the lecture notes \"VCollision in Physics Year 1 Course\" by Professor Ming-Feng Shih from the Department of Physics at National Taiwan University but has rewritten the code into Python 3.X format. After completing this code, it can be used to simulate the collisions among ideal gas molecules, producing a graph of molecular quantity versus velocity distribution. However, since this program is complex, please refer to the VPython example program \"A hard-sphere gas.\"\n\nProgram to be written: Three-dimensional elastic collision, m1 = m2, both spheres have equal mass\n\n### Theoretical Derivation\n\nAssuming there are two elastic spheres of equal size in space, with masses $m_1$ and $m_2$, and initial velocities $v_1$ and $v_2$, derive the formula for their velocities after collision. The special case when the masses are equal is given by\n\n$$\nv_1' = v_1 + \\frac{(v_2 - v_1) \\cdot (r_1 - r_2)}{|r_1 - r_2|^2} (r_1 - r_2)\n$$\n\n$$\nv_2' = v_2 + \\frac{(v_1 - v_2) \\cdot (r_2 - r_1)}{|r_2 - r_1|^2} (r_2 - r_1)\n$$\n\nProof:\nAssuming the change in momentum during the collision is $\\Delta p$, then\n\n$$\n\\Delta p_1 = \\Delta p \\frac{r_1 - r_2}{|r_1 - r_2|}\n$$\n\n$$\n\\Delta p_2 = - \\Delta p_1 = \\Delta p \\frac{r_2 - r_1}{|r_2 - r_1|}\n$$\n\nThe momenta of the spheres after collision are\n\n$$\np_1' = p_1 + \\Delta p_1 \\Rightarrow m_1 v_1' = m_1 v_1 + \\Delta p \\frac{r_1 - r_2}{|r_1 - r_2|}\n$$\n\n$$\np_2' = p_2 + \\Delta p_2 \\Rightarrow m_2 v_2' = m_2 v_2 + \\Delta p \\frac{r_2 - r_1}{|r_2 - r_1|}\n$$\n\nSince the collision is elastic, there is no loss of kinetic energy before and after collision\n\n$$\n\\frac{1}{2} m_1 v_1^2 + \\frac{1}{2} m_2 v_2^2 = \\frac{1}{2} m_1 v_1'^2 + \\frac{1}{2} m_2 v_2'^2\n$$\n\nSubstituting $v_1'$ and $v_2'$ into the above equation and multiplying by 2\n\n$$\nm_1 v_1^2 + m_2 v_2^2 = m_1 \\left[ v_1 + \\Delta p \\frac{(r_1 - r_2)}{m_1 |r_1 - r_2|} \\right]^2 + m_2 \\left[ v_2 + \\Delta p \\frac{(r_2 - r_1)}{m_2 |r_2 - r_1|} \\right]^2\n$$\n\nSince $(r_1 - r_2)^2 = |r_1 - r_2|^2$, the equation simplifies to\n\n$$\n2 \\Delta p \\frac{(v_1 - v_2) \\cdot (r_1 - r_2)}{|r_1 - r_2|} + (\\Delta p)^2 \\left( \\frac{1}{m_1} + \\frac{1}{m_2} \\right) = 0\n$$\n\n$$\n2 \\frac{(v_1 - v_2) \\cdot (r_1 - r_2)}{|r_1 - r_2|} + \\Delta p \\frac{m_1 + m_2}{m_1 m_2} = 0\n$$\n\n$$\n\\Delta p = \\frac{2 m_1 m_2}{m_1 + m_2} \\frac{(v_2 - v_1) \\cdot (r_1 - r_2)}{|r_1 - r_2|}\n$$\n\nSubstituting $\\Delta p$ back into the top two equations yields the velocities after the collision\n\n$$\nv_1' = v_1 + \\frac{2 m_2}{m_1 + m_2} \\frac{(v_2 - v_1) \\cdot (r_1 - r_2)}{|r_1 - r_2|^2} (r_1 - r_2)\n$$\n\n$$\nv_2' = v_2 + \\frac{2 m_1}{m_1 + m_2} \\frac{(v_1 - v_2) \\cdot (r_2 - r_1)}{|r_2 - r_1|^2} (r_2 - r_1)\n$$\n\n\nParameter Settings\nHere, variables are set for the radius, mass, color, initial velocity of the spheres, screen dimensions, time, and time interval. Please refer to the code for the corresponding variable names.\n\n\nCustom Functions\nThe custom function af_col_v calculates the velocities after collision:\n\nv1_prime = v1 + dot((v2 - v1), (x1 - x2)) / mag2(x1 - x2) * (x1 - x2)\nv2_prime = v2 + dot((v1 - v2), (x2 - x1)) / mag2(x2 - x1) * (x2 - x1)\nThis applies the theoretical formulas in code, using two vector calculations:\n\ndot(a, b): computes the dot product of vectors a and b\nmag2(a) = a.mag2: computes the square of the magnitude of vector a\n\nMotion of Objects\nThe position of the spheres is updated. If mag(b1.pos - b2.pos) <= r1 + r2 and dot((b1.pos - b2.pos), (b1.v - b2.v)) <= 0, meaning b1 and b2 collide, b1.v, b2.v, b1.pos, and b2.pos are input into the custom function af_col_v to calculate the post-collision velocities, which are then reassigned to b1.v and b2.v.\n\n\nThere is a stationary red sphere with a radius of 0.5 and a mass of 1 at (0,0,0). A blue sphere with a radius of 0.5 and a mass of 1 is at (-5,0.5,0) moving at an initial velocity of (8, 0, 0). After colliding with the red sphere, the blue sphere undergoes the aforementioned three-dimensional elastic collision. The trajectories of the blue and red spheres should be plotted.\n\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\nRadius_I = 1\nr1 = Radius_I\nr2 = Radius_I\nm1 = 1\nm2 = 1\n\n# initial velocities\nv1 = vector(0, 0, 0)\nv2 = vector(8, 0, 0)\n\n# initial positions\nx1 = vector(0, 0, 0)\nx2 = vector(-5, 0.5, 0)\n\n# create spheres\nb1 = sphere(pos=x1, radius=r1, color=color.red)\nb2 = sphere(pos=x2, radius=r2, color=color.blue)\n\n# set initial sphere velocities\nb1.v = v1\nb2.v = v2\n\n# initial time and time interval\nt = 0\ndt = 0.001\n\ndef af_col_v(v1, v2, x1, x2):\n    v1_prime = v1 + dot((v2 - v1), (x1 - x2)) / mag2(x1 - x2) * (x1 - x2)\n    v2_prime = v2 + dot((v1 - v2), (x2 - x1)) / mag2(x2 - x1) * (x2 - x1)\n    return v1_prime, v2_prime\n\nwhile True:\n    rate(1000)\n    # update positions\n    b1.pos = b1.pos + b1.v * dt\n    b2.pos = b2.pos + b2.v * dt\n\n    if mag(b1.pos - b2.pos) <= r1 + r2 and dot((b1.pos - b2.pos), (b1.v - b2.v)) <= 0:\n        # calculate post-collision velocities\n        b1.v, b2.v = af_col_v(b1.v, b2.v, b1.pos, b2.pos)\n\n    t = t + dt",
      "mode": "initial",
      "timestamp": "2024-07-26 11:49:34",
      "serial_number": 1
    }
  ]
}