{
  "session_id": 629,
  "log": [
    {
      "input": "Collision of Two Balls in Free Fall\n\nIf two highly elastic balls are stacked vertically, with the heavier ball on the bottom, and both are released from a certain height, the balls will start accelerating downward due to gravity. What happens when the lower ball hits the ground and bounces back? There are many experimental videos on this phenomenon on YouTube, such as \"Stacked Ball Drop\". We can use previously written simulation programs for \"Free Fall\" and \"One-Dimensional Elastic Collision\" to address this problem.\n\nThe program for the collision of two balls in free fall includes two balls.\n\nParameter Settings\n\nVariables are set for the radius, mass, and color of the balls, the height from which the balls are dropped, the length of the floor, gravitational acceleration, time, and time interval. Please refer to the program code for the corresponding variable names.\n\nScreen Settings\nThe code for creating the animation window, floor, balls, and drawing window has appeared many times in previous animations and will not be repeated here. One special feature in the animation window is the addition of an option range=L, which is used to limit the display range of the animation window so that the screen does not automatically shrink when the upper ball bounces too high.\n\nObject Motion\nUpdate the velocity and position of the balls.\nIf b1.pos.y <= 0, it means b1 has hit the floor, and its velocity is reversed to make b1 bounce.\nIf b2.pos.y - b1.pos.y <= r1 + r2, it means b1 and b2 have collided. Insert m1, b1.v.y, m2, b2.v.y into a custom function af_col_v to calculate the post-collision velocities, and then reassign these velocities to b1.v.y and b2.v.y.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Variables\nr1 = r2 = Radius_I = 1\nm1 = m2 = 1\nc1 = c2 = color.red\nh1 = h2 = 5\nL = 10\ng = 9.8\nt = 0\ndt = 0.001\n\n# Screen\nscene = canvas(width=600, height=600, range=L)\n\n# Balls\nb1 = sphere(pos=vector(0, -h1, 0), radius=r1, color=c1, v=vector(0, 0, 0), a=vector(0, -g, 0))\nb2 = sphere(pos=vector(0, -h2, 0), radius=r2, color=c2, v=vector(0, 0, 0), a=vector(0, -g, 0))\n\n# Floor\nfloor = box(pos=vector(0, -L/2, 0), size=vector(L, 0.01, L), color=color.green)\n\n# Function\ndef af_col_v(m1, v1, m2, v2):\n    v1f = ((m1-m2)*v1 + 2*m2*v2) / (m1+m2)\n    v2f = ((m2-m1)*v2 + 2*m1*v1) / (m1+m2)\n    return v1f, v2f\n\nwhile True:\n    rate(1000)\n    \n    b1.v += b1.a*dt\n    b2.v += b2.a*dt\n    \n    b1.pos += b1.v*dt\n    b2.pos += b2.v*dt\n    \n    if b1.pos.y <= 0:\n        b1.v.y = -b1.v.y\n    \n    if b2.pos.y - b1.pos.y <= r1 + r2:\n        b1.v.y, b2.v.y = af_col_v(m1, b1.v.y, m2, b2.v.y)",
      "mode": "initial",
      "timestamp": "2024-07-24 06:00:09",
      "serial_number": 1
    }
  ]
}