{
  "session_id": 1055,
  "log": [
    {
      "input": "1. Screen Settings:</br>Set the canvas width to 700 and height to 400. Do not change the canvas size.</br>2. Object Motion & Parameter Settings:</br>Create a VPython animation to illustrate the following physics experiment:<br><span style=\"color:red;\"># **Horizontal Projectile Motion**\n\nA small ball is launched horizontally from a height \\( h \\) with an initial velocity \\( v_0 \\). The ball accelerates downward under the influence of gravity and bounces upon hitting the ground.\nOnly the effect of gravity is considered, and the collision between the ball and the ground is elastic.</span></br></br>3. Cyber Input Variable Mapping Information:\n    (1) initial_height is mapped to the variable named Height_I with an initial value set to a 1-dimensional value 5\n    (2) When the value of Height_I changes, let the animation rerun to the starting point and start with the updated initial_height.",
      "output": "```python\nfrom vpython import *\n\n# Screen Settings\nscene = canvas(width=700, height=400)\n\n# Cyber Input Variable Mapping\nHeight_I = 5\n\ndef reset_position():\n    ball.pos = vec(0, Height_I, 0)\n    ball.velocity = vec(5, 0, 0)  # Initial velocity\n\ndef on_change():\n    global Height_I\n    reset_position()\n\n# Object Motion & Parameter Settings\nground = box(pos=vec(0, 0, 0), size=vec(20, 0.1, 5), color=color.blue)\nball = sphere(pos=vec(0, Height_I, 0), radius=0.5, color=color.red)\nball.velocity = vec(5, 0, 0)  # Initial velocity\ndt = 0.01  # Time step\ng = 9.81  # Acceleration due to gravity\n\nwhile True:\n    rate(100)\n    ball.pos.x += ball.velocity.x * dt\n    ball.pos.y += ball.velocity.y * dt\n    ball.velocity.y -= g * dt\n\n    if ball.pos.y < ball.radius:\n        ball.velocity.y *= -1  # Elastic collision\n        ball.pos.y = ball.radius\n\n    if ball.pos.y == ball.radius and ball.velocity.y < 0:  # Ball hits the ground\n        ball.velocity.y = 0\n        on_change()\n```",
      "mode": "initial",
      "timestamp": "2024-09-24 10:14:48",
      "serial_number": 1
    },
    {
      "input": "Please update the following program based on this instruction:\n1. Screen Settings:</br>Set the canvas width to 700 and height to 400. Do not change the canvas size.</br>2. Object Motion & Parameter Settings:</br>Create a VPython animation to illustrate the following physics experiment:<br><span style=\"color:red;\">1. Screen Settings:\nSet the canvas width to 700 and height to 400. Do not change the canvas size.\n2. Object Motion & Parameter Settings:\nCreate a VPython animation to illustrate the following physics experiment:\n## Small Ball Pendulum\n\nA small ball is suspended from the ceiling using an ideal string. If the angle between the string and the vertical line (the pendulum angle) is \ud835\udf03\u2080, and the ball is released from rest, then when the pendulum angle is \ud835\udf03, the ball is subjected to gravitational force and the tension in the string. The torque relative to the suspension point is given by:\n\n$$\n\\vec{\\tau} = \\vec{r} \\times \\vec{F} \\quad \\Rightarrow \\quad \\tau = r F \\sin \\theta\n$$\n\nIf the moment of inertia (\ud835\udc3c) is defined as:\n\n$$\nI = m r^2\n$$\n\nSince the torque (\ud835\udf0f) is in the opposite direction of the angular acceleration (\ud835\udefc), the relationship between them is:\n\n$$\n\\tau = -I \\alpha \\quad \\Rightarrow \\quad r F \\sin \\theta = -m r^2 \\frac{d^2 \\theta}{dt^2} \\quad \\Rightarrow \\quad \\frac{F}{m r} \\sin \\theta = - \\frac{d^2 \\theta}{dt^2}\n$$\n\nIf $r = L$ and $F = mg$, and when $\\theta < 5^\\circ$, we can approximate $\\sin \\theta \\approx \\theta$. The above equation can be rewritten as:\n\n$$\n\\frac{g}{L} \\theta = - \\frac{d^2 \\theta}{dt^2}\n$$\n\nThe solution is:\n\n$$\n\\theta(t) = \\theta_0 \\cos \\left( \\sqrt{\\frac{g}{L}} t \\right) = \\theta_0 \\cos(\\omega t)\n$$\n\nIn the above equation, $\\omega$ is the angular frequency of the pendulum\u2019s oscillation, and the period is:\n\n$$\nT = \\frac{2\\pi}{\\omega} = 2\\pi \\sqrt{\\frac{L}{g}}\n$$\n\n\n3. Cyber Input Variable Mapping Information:\n\n(1) canvas_width is mapped to the variable named Elasticity_I with an initial value set to a 1-dimensional value 5\n(2) When the value of Elasticity_I changes, let the animation rerun to the starting point and start with the updated canvas_width.\n</span>\n\nCurrent program:\n# No program available for this session",
      "output": "from vpython import *\n\n# Constants\ng = 9.81  # acceleration due to gravity in m/s^2\nL = 1.0  # length of the pendulum in meters\n\n# Initial Parameters\ntheta0 = 0.2  # initial angle in radians\nomega = sqrt(g/L)  # angular frequency\n\n# VPython Objects\nceiling = box(pos=vector(0, 0, 0), size=vector(0.2, 0.005, 0.2), color=color.white)\nball = sphere(pos=vector(L*sin(theta0), -L*cos(theta0), 0), radius=0.05, color=color.red)\nstring = cylinder(pos=ceiling.pos, axis=ball.pos - ceiling.pos, radius=0.005)\n\n# Animation Loop\nwhile True:\n    rate(100)\n    ball.pos = vector(L*sin(theta0*cos(omega*scene.time())), -L*cos(theta0*cos(omega*scene.time())), 0)\n    string.axis = ball.pos - ceiling.pos",
      "mode": "modification",
      "timestamp": "2024-10-25 19:40:45",
      "serial_number": 2
    },
    {
      "input": "1. Screen Settings:</br>Set the canvas width to 700 and height to 400. Do not change the canvas size.</br>2. Object Motion & Parameter Settings:</br>Create a VPython animation to illustrate the following physics experiment:<br><span style=\"color:red;\">1. Screen Settings:\nSet the canvas width to 700 and height to 400. Do not change the canvas size.\n2. Object Motion & Parameter Settings:\nCreate a VPython animation to illustrate the following physics experiment:\n# **Horizontal Projectile Motion**\n\nA small ball is launched horizontally from a height \\( h \\) with an initial velocity \\( v_0 \\). The ball accelerates downward under the influence of gravity and bounces upon hitting the ground.\nOnly the effect of gravity is considered, and the collision between the ball and the ground is elastic.\n\n\n3. Cyber Input Variable Mapping Information:\n\n(1) canvas_width is mapped to the variable named Angle_I with an initial value set to a 1-dimensional value 5\n(2) When the value of Angle_I changes, let the animation rerun to the starting point and start with the updated canvas_width.\n</span>",
      "output": "canvas(width=700, height=400)\n\nground = box(pos=vec(0, -1, 0), size=vec(50, 0.2, 5), color=color.green)\nball = sphere(pos=vec(-20, 10, 0), radius=1, color=color.blue)\nvelocity = vector(2, 0, 0)\nacceleration = vector(0, -9.8, 0)\ndt = 0.01\n\nwhile ball.pos.y > 0:\n    rate(100)\n    ball.pos = ball.pos + velocity * dt\n    velocity = velocity + acceleration * dt\n    if ball.pos.y <= 0:\n        velocity.y = -velocity.y * 0.9  # Bounce with some energy loss",
      "mode": "initial",
      "timestamp": "2024-10-26 14:47:24",
      "serial_number": 1
    },
    {
      "input": "1. Screen Settings:</br>Set the canvas width to 700 and height to 400. Do not change the canvas size.</br>2. Object Motion & Parameter Settings:</br>Create a VPython animation to illustrate the following physics experiment:<br><span style=\"color:red;\">1. Screen Settings:\nSet the canvas width to 700 and height to 400. Do not change the canvas size.\n2. Object Motion & Parameter Settings:\nCreate a VPython animation to illustrate the following physics experiment:\n## Small Ball Pendulum\n\nA small ball is suspended from the ceiling using an ideal string. If the angle between the string and the vertical line (the pendulum angle) is \ud835\udf03\u2080, and the ball is released from rest, then when the pendulum angle is \ud835\udf03, the ball is subjected to gravitational force and the tension in the string. The torque relative to the suspension point is given by:\n\n$$\n\\vec{\\tau} = \\vec{r} \\times \\vec{F} \\quad \\Rightarrow \\quad \\tau = r F \\sin \\theta\n$$\n\nIf the moment of inertia (\ud835\udc3c) is defined as:\n\n$$\nI = m r^2\n$$\n\nSince the torque (\ud835\udf0f) is in the opposite direction of the angular acceleration (\ud835\udefc), the relationship between them is:\n\n$$\n\\tau = -I \\alpha \\quad \\Rightarrow \\quad r F \\sin \\theta = -m r^2 \\frac{d^2 \\theta}{dt^2} \\quad \\Rightarrow \\quad \\frac{F}{m r} \\sin \\theta = - \\frac{d^2 \\theta}{dt^2}\n$$\n\nIf $r = L$ and $F = mg$, and when $\\theta < 5^\\circ$, we can approximate $\\sin \\theta \\approx \\theta$. The above equation can be rewritten as:\n\n$$\n\\frac{g}{L} \\theta = - \\frac{d^2 \\theta}{dt^2}\n$$\n\nThe solution is:\n\n$$\n\\theta(t) = \\theta_0 \\cos \\left( \\sqrt{\\frac{g}{L}} t \\right) = \\theta_0 \\cos(\\omega t)\n$$\n\nIn the above equation, $\\omega$ is the angular frequency of the pendulum\u2019s oscillation, and the period is:\n\n$$\nT = \\frac{2\\pi}{\\omega} = 2\\pi \\sqrt{\\frac{L}{g}}\n$$\n\n\n3. Cyber Input Variable Mapping Information:\n\n(1) Friction_I is mapped to the variable named Angle_I with an initial value set to a 1-dimensional value 5\n(2) When the value of Angle_I changes, let the animation rerun to the starting point and start with the updated Friction_I.\n</span>",
      "output": "from vpython import *\n\n# Screen Settings\nscene = canvas(width=700, height=400)\n\n# Constants\ng = 9.81  # acceleration due to gravity in m/s^2\nL = 1.0  # length of the pendulum in meters\n\n# Initial Parameters\nAngle_I = 5  # initial angle in degrees\ntheta_0 = radians(Angle_I)  # initial angle in radians\n\n# Objects\nceiling = sphere(pos=vector(0, 0, 0), radius=0.02, color=color.white)\nball = sphere(pos=vector(L*sin(theta_0), -L*cos(theta_0), 0), radius=0.05, color=color.red)\nstring = cylinder(pos=ceiling.pos, axis=ball.pos-ceiling.pos, radius=0.005)\n\n# Animation\nt = 0\ndt = 0.01\n\nwhile True:\n    rate(100)\n    \n    ball.pos = vector(L*sin(theta_0*cos(sqrt(g/L)*t)), -L*cos(theta_0*cos(sqrt(g/L)*t)), 0)\n    string.axis = ball.pos - ceiling.pos\n    \n    t += dt\n    if t > 2*pi*sqrt(L/g):\n        t = 0",
      "mode": "initial",
      "timestamp": "2024-10-26 17:19:07",
      "serial_number": 1
    },
    {
      "input": "1. Screen Settings:</br>Set the canvas width to 700 and height to 400. Do not change the canvas size.</br>2. Object Motion & Parameter Settings:</br>Create a VPython animation to illustrate the following physics experiment:<br><span style=\"color:red;\">1. Screen Settings:\nSet the canvas width to 700 and height to 400. Do not change the canvas size.\n2. Object Motion & Parameter Settings:\nCreate a VPython animation to illustrate the following physics experiment:\n## Small Ball Pendulum\n\nA small ball is suspended from the ceiling using an ideal string. If the angle between the string and the vertical line (the pendulum angle) is \ud835\udf03\u2080, and the ball is released from rest, then when the pendulum angle is \ud835\udf03, the ball is subjected to gravitational force and the tension in the string. The torque relative to the suspension point is given by:\n\n$$\n\\vec{\\tau} = \\vec{r} \\times \\vec{F} \\quad \\Rightarrow \\quad \\tau = r F \\sin \\theta\n$$\n\nIf the moment of inertia (\ud835\udc3c) is defined as:\n\n$$\nI = m r^2\n$$\n\nSince the torque (\ud835\udf0f) is in the opposite direction of the angular acceleration (\ud835\udefc), the relationship between them is:\n\n$$\n\\tau = -I \\alpha \\quad \\Rightarrow \\quad r F \\sin \\theta = -m r^2 \\frac{d^2 \\theta}{dt^2} \\quad \\Rightarrow \\quad \\frac{F}{m r} \\sin \\theta = - \\frac{d^2 \\theta}{dt^2}\n$$\n\nIf $r = L$ and $F = mg$, and when $\\theta < 5^\\circ$, we can approximate $\\sin \\theta \\approx \\theta$. The above equation can be rewritten as:\n\n$$\n\\frac{g}{L} \\theta = - \\frac{d^2 \\theta}{dt^2}\n$$\n\nThe solution is:\n\n$$\n\\theta(t) = \\theta_0 \\cos \\left( \\sqrt{\\frac{g}{L}} t \\right) = \\theta_0 \\cos(\\omega t)\n$$\n\nIn the above equation, $\\omega$ is the angular frequency of the pendulum\u2019s oscillation, and the period is:\n\n$$\nT = \\frac{2\\pi}{\\omega} = 2\\pi \\sqrt{\\frac{L}{g}}\n$$\n\n\n3. Cyber Input Variable Mapping Information:\n\n(1) canvas_width is mapped to the variable named Gravity_I with an initial value set to a 1-dimensional value 5\n(2) When the value of Gravity_I changes, let the animation rerun to the starting point and start with the updated canvas_width.\n</span>",
      "output": "from vpython import *\n\n# Screen Settings\ncanvas(width=700, height=400)\n\n# Constants\nL = 1.0  # length of the pendulum\ng = 9.81  # acceleration due to gravity\n\n# Variables\ntheta0 = 0.5  # initial angle in radians\nomega = sqrt(g/L)  # angular frequency\nT = 2*pi/omega  # period of oscillation\n\n# Objects\nceiling = box(pos=vector(0, 0, 0), size=vector(0.1, 0.1, 0.1), color=color.blue)\nball = sphere(pos=vector(L*sin(theta0), -L*cos(theta0), 0), radius=0.05, color=color.red)\nstring = cylinder(pos=ceiling.pos, axis=ball.pos-ceiling.pos, radius=0.01)\n\n# Animation\nt = 0\ndt = 0.01\n\nwhile True:\n    rate(100)\n    t += dt\n    theta = theta0 * cos(omega * t)\n    \n    ball.pos = vector(L*sin(theta), -L*cos(theta), 0)\n    string.axis = ball.pos - ceiling.pos",
      "mode": "initial",
      "timestamp": "2024-10-26 18:00:58",
      "serial_number": 1
    },
    {
      "input": "1. Screen Settings:</br>Set the canvas width to 700 and height to 400. Do not change the canvas size.</br>2. Object Motion & Parameter Settings:</br>Create a VPython animation to illustrate the following physics experiment:<br><span style=\"color:red;\">1. Screen Settings:\nSet the canvas width to 700 and height to 400. Do not change the canvas size.\n2. Object Motion & Parameter Settings:\nCreate a VPython animation to illustrate the following physics experiment:\n# **Horizontal Projectile Motion**\n\nA small ball is launched horizontally from a height \\( h \\) with an initial velocity \\( v_0 \\). The ball accelerates downward under the influence of gravity and bounces upon hitting the ground.\nOnly the effect of gravity is considered, and the collision between the ball and the ground is elastic.\n\n\n3. Cyber Input Variable Mapping Information:\n\n(1) canvas_width is mapped to the variable named Angle_I with an initial value set to a 1-dimensional value 5\n(2) When the value of Angle_I changes, let the animation rerun to the starting point and start with the updated canvas_width.\n</span>",
      "output": "canvas(width=700, height=400)\n\nball = sphere(pos=vec(0, 5, 0), radius=0.5, color=color.blue)\nground = box(pos=vec(0, 0, 0), size=vec(20, 0.2, 10), color=color.green)\n\nv0 = 5  # Initial velocity\nh = 5   # Initial height\n\nball.velocity = vec(v0, 0, 0)\ng = 9.81  # Acceleration due to gravity\n\ndt = 0.01\n\nwhile True:\n    rate(100)\n    \n    ball.pos.x += ball.velocity.x * dt\n    ball.velocity.y -= g * dt\n    \n    if ball.pos.y < ball.radius:\n        ball.velocity.y *= -1  # Bounce\n        ball.pos.y = ball.radius",
      "mode": "initial",
      "timestamp": "2024-10-26 20:57:11",
      "serial_number": 1
    },
    {
      "input": "1. Screen Settings:</br>Set the canvas width to 700 and height to 400. Do not change the canvas size.</br>2. Object Motion & Parameter Settings:</br>Create a VPython animation to illustrate the following physics experiment:<br><span style=\"color:red;\">1. Screen Settings:\nSet the canvas width to 700 and height to 400. Do not change the canvas size.\n2. Object Motion & Parameter Settings:\nCreate a VPython animation to illustrate the following physics experiment:\n## Small Ball Pendulum\n\nA small ball is suspended from the ceiling using an ideal string. If the angle between the string and the vertical line (the pendulum angle) is \ud835\udf03\u2080, and the ball is released from rest, then when the pendulum angle is \ud835\udf03, the ball is subjected to gravitational force and the tension in the string. The torque relative to the suspension point is given by:\n\n$$\n\\vec{\\tau} = \\vec{r} \\times \\vec{F} \\quad \\Rightarrow \\quad \\tau = r F \\sin \\theta\n$$\n\nIf the moment of inertia (\ud835\udc3c) is defined as:\n\n$$\nI = m r^2\n$$\n\nSince the torque (\ud835\udf0f) is in the opposite direction of the angular acceleration (\ud835\udefc), the relationship between them is:\n\n$$\n\\tau = -I \\alpha \\quad \\Rightarrow \\quad r F \\sin \\theta = -m r^2 \\frac{d^2 \\theta}{dt^2} \\quad \\Rightarrow \\quad \\frac{F}{m r} \\sin \\theta = - \\frac{d^2 \\theta}{dt^2}\n$$\n\nIf $r = L$ and $F = mg$, and when $\\theta < 5^\\circ$, we can approximate $\\sin \\theta \\approx \\theta$. The above equation can be rewritten as:\n\n$$\n\\frac{g}{L} \\theta = - \\frac{d^2 \\theta}{dt^2}\n$$\n\nThe solution is:\n\n$$\n\\theta(t) = \\theta_0 \\cos \\left( \\sqrt{\\frac{g}{L}} t \\right) = \\theta_0 \\cos(\\omega t)\n$$\n\nIn the above equation, $\\omega$ is the angular frequency of the pendulum\u2019s oscillation, and the period is:\n\n$$\nT = \\frac{2\\pi}{\\omega} = 2\\pi \\sqrt{\\frac{L}{g}}\n$$\n\n\n3. Cyber Input Variable Mapping Information:\n\n(1) canvas_width is mapped to the variable named Friction_I with an initial value set to a 1-dimensional value 5\n(2) When the value of Friction_I changes, let the animation rerun to the starting point and start with the updated canvas_width.\n</span>",
      "output": "scene.width = 700\nscene.height = 400\n\nFriction_I = 5\n\ndef pendulum_motion(theta0):\n    L = 9.81  # length of the pendulum\n    g = 9.81  # acceleration due to gravity\n\n    omega = sqrt(g/L)\n    T = 2*pi/omega\n\n    t = 0\n    dt = 0.01\n\n    while t < 20*T:\n        rate(100)\n        theta = theta0 * cos(omega*t)\n        ball.pos = vector(L*sin(theta), -L*cos(theta), 0)\n        t += dt\n\ndef update_canvas():\n    global Friction_I\n    scene.width = Friction_I\n    pendulum_motion(pi/6)\n\nupdate_canvas()",
      "mode": "initial",
      "timestamp": "2024-10-26 23:44:16",
      "serial_number": 1
    },
    {
      "input": "1. Screen Settings:</br>Set the canvas width to 700 and height to 400. Do not change the canvas size.</br>2. Object Motion & Parameter Settings:</br>Create a VPython animation to illustrate the following physics experiment:<br><span style=\"color:red;\">1. Screen Settings:\nSet the canvas width to 700 and height to 400. Do not change the canvas size.\n2. Object Motion & Parameter Settings:\nCreate a VPython animation to illustrate the following physics experiment:\n## Small Ball Pendulum\n\nA small ball is suspended from the ceiling using an ideal string. If the angle between the string and the vertical line (the pendulum angle) is \ud835\udf03\u2080, and the ball is released from rest, then when the pendulum angle is \ud835\udf03, the ball is subjected to gravitational force and the tension in the string. The torque relative to the suspension point is given by:\n\n$$\n\\vec{\\tau} = \\vec{r} \\times \\vec{F} \\quad \\Rightarrow \\quad \\tau = r F \\sin \\theta\n$$\n\nIf the moment of inertia (\ud835\udc3c) is defined as:\n\n$$\nI = m r^2\n$$\n\nSince the torque (\ud835\udf0f) is in the opposite direction of the angular acceleration (\ud835\udefc), the relationship between them is:\n\n$$\n\\tau = -I \\alpha \\quad \\Rightarrow \\quad r F \\sin \\theta = -m r^2 \\frac{d^2 \\theta}{dt^2} \\quad \\Rightarrow \\quad \\frac{F}{m r} \\sin \\theta = - \\frac{d^2 \\theta}{dt^2}\n$$\n\nIf $r = L$ and $F = mg$, and when $\\theta < 5^\\circ$, we can approximate $\\sin \\theta \\approx \\theta$. The above equation can be rewritten as:\n\n$$\n\\frac{g}{L} \\theta = - \\frac{d^2 \\theta}{dt^2}\n$$\n\nThe solution is:\n\n$$\n\\theta(t) = \\theta_0 \\cos \\left( \\sqrt{\\frac{g}{L}} t \\right) = \\theta_0 \\cos(\\omega t)\n$$\n\nIn the above equation, $\\omega$ is the angular frequency of the pendulum\u2019s oscillation, and the period is:\n\n$$\nT = \\frac{2\\pi}{\\omega} = 2\\pi \\sqrt{\\frac{L}{g}}\n$$\n\n\n3. Cyber Input Variable Mapping Information:\n\n(1) canvas_height is mapped to the variable named Angle_I with an initial value set to a 1-dimensional value 5\n(2) When the value of Angle_I changes, let the animation rerun to the starting point and start with the updated canvas_height.\n</span>",
      "output": "from vpython import *\n\ncanvas.width = 700\ncanvas.height = 400\n\nL = 1.0  # length of the pendulum\ng = 9.81  # acceleration due to gravity\n\nball = sphere(pos=vector(0, -L, 0), radius=0.1, color=color.red)\nrod = cylinder(pos=vector(0, 0, 0), axis=ball.pos, radius=0.01)\n\ntheta_0 = radians(5)  # initial angle in radians\nomega = sqrt(g / L)  # angular frequency\n\nt = 0\ndt = 0.01\n\ndef update_angle(angle):\n    ball.pos.y = -L * cos(angle)\n    ball.pos.x = L * sin(angle)\n\ndef run_animation():\n    global t\n    while True:\n        rate(100)\n        t += dt\n        angle = theta_0 * cos(omega * t)\n        update_angle(angle)\n        if t >= 2 * pi / omega:\n            t = 0\n\nAngle_I = 5\n\ndef on_change_Angle_I(change):\n    global theta_0\n    theta_0 = radians(change['new'])\n    ball.pos = vector(0, -L * cos(theta_0), L * sin(theta_0))\n    run_animation()\n\nAngle_I = 5\non_change_Angle_I({'new': Angle_I})",
      "mode": "initial",
      "timestamp": "2024-10-27 19:21:27",
      "serial_number": 1
    },
    {
      "input": "1. Screen Settings:</br>Set the canvas width to 700 and height to 400. Do not change the canvas size.</br>2. Object Motion & Parameter Settings:</br>Create a VPython animation to illustrate the following physics experiment:<br><span style=\"color:red;\">1. Screen Settings:\nSet the canvas width to 700 and height to 400. Do not change the canvas size.\n2. Object Motion & Parameter Settings:\nCreate a VPython animation to illustrate the following physics experiment:\n## Small Ball Pendulum\n\nA small ball is suspended from the ceiling using an ideal string. If the angle between the string and the vertical line (the pendulum angle) is \ud835\udf03\u2080, and the ball is released from rest, then when the pendulum angle is \ud835\udf03, the ball is subjected to gravitational force and the tension in the string. The torque relative to the suspension point is given by:\n\n$$\n\\vec{\\tau} = \\vec{r} \\times \\vec{F} \\quad \\Rightarrow \\quad \\tau = r F \\sin \\theta\n$$\n\nIf the moment of inertia (\ud835\udc3c) is defined as:\n\n$$\nI = m r^2\n$$\n\nSince the torque (\ud835\udf0f) is in the opposite direction of the angular acceleration (\ud835\udefc), the relationship between them is:\n\n$$\n\\tau = -I \\alpha \\quad \\Rightarrow \\quad r F \\sin \\theta = -m r^2 \\frac{d^2 \\theta}{dt^2} \\quad \\Rightarrow \\quad \\frac{F}{m r} \\sin \\theta = - \\frac{d^2 \\theta}{dt^2}\n$$\n\nIf $r = L$ and $F = mg$, and when $\\theta < 5^\\circ$, we can approximate $\\sin \\theta \\approx \\theta$. The above equation can be rewritten as:\n\n$$\n\\frac{g}{L} \\theta = - \\frac{d^2 \\theta}{dt^2}\n$$\n\nThe solution is:\n\n$$\n\\theta(t) = \\theta_0 \\cos \\left( \\sqrt{\\frac{g}{L}} t \\right) = \\theta_0 \\cos(\\omega t)\n$$\n\nIn the above equation, $\\omega$ is the angular frequency of the pendulum\u2019s oscillation, and the period is:\n\n$$\nT = \\frac{2\\pi}{\\omega} = 2\\pi \\sqrt{\\frac{L}{g}}\n$$\n\n\n3. Cyber Input Variable Mapping Information:\n\n(1) canvas_width is mapped to the variable named Friction_I with an initial value set to a 1-dimensional value 5\n(2) When the value of Friction_I changes, let the animation rerun to the starting point and start with the updated canvas_width.\n</span>",
      "output": "from vpython import *\n\n# Screen Settings\ncanvas.width = 700\ncanvas.height = 400\n\n# Constants\nL = 1  # Length of the pendulum\ng = 9.81  # Acceleration due to gravity\n\n# Variables\nFriction_I = 5  # Initial value\n\n# Objects\nceiling = box(pos=vector(0, 0, 0), size=vector(0.1, 0.01, 0.1))\nball = sphere(pos=vector(L, -L, 0), radius=0.05, color=color.red)\nstring = cylinder(pos=ceiling.pos, axis=ball.pos - ceiling.pos, radius=0.005)\n\n# Initial conditions\ntheta0 = radians(10)  # Initial angle\nomega = sqrt(g / L)\n\n# Animation function\ndef animate_pendulum(Friction_I):\n    ball.pos = vector(L * sin(theta0), -L * cos(theta0), 0)\n    string.axis = ball.pos - ceiling.pos\n    \n    t = 0\n    dt = 0.01\n    \n    while t < 10:\n        rate(100)\n        theta = theta0 * cos(omega * t)\n        ball.pos = vector(L * sin(theta), -L * cos(theta), 0)\n        string.axis = ball.pos - ceiling.pos\n        t += dt\n\n# Call animation function with initial Friction_I value\nanimate_pendulum(Friction_I)",
      "mode": "initial",
      "timestamp": "2024-10-27 22:30:58",
      "serial_number": 1
    }
  ]
}