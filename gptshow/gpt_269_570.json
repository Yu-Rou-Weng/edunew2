{
  "session_id": 570,
  "log": [
    {
      "input": "Horizontal Projectile Motion\n\nA small ball is thrown horizontally from a height \\( h \\) with an initial velocity \\( v_0 \\). The ball accelerates downward due to gravity and bounces upon hitting the floor, considering only the effect of gravity and assuming an elastic collision between the ball and the floor.\n\nParameter Settings\nThe variables defined here include size, v0, h, L, g, i, t, dt, and their purposes are explained in the comments within the code.\n\nDisplay Settings\nIn this instance, no colors (color) are set for the sphere and box objects; instead, materials (texture) are specified using the syntax:\ntexture = textures.[material_name]\n\nVPython 7 currently supports the following 12 materials:\n\nnames = [\"flower\", \"granite\", \"gravel\", \"metal\", \"rock\", \"rough\",\n         \"rug\", \"stones\", \"stucco\", \"wood\", \"wood_old\", \"earth\"]\ntex = [textures.flower, textures.granite, textures.gravel, textures.metal, textures.rock, textures.rough,\n       textures.rug, textures.stones, textures.stucco, textures.wood, textures.wood_old, textures.earth]\n\nSupported Colors in VPython 7\n\nnames = [\"red\", \"green\", \"blue\", \"purple\", \"yellow\", \"orange\", \"cyan\",\n         \"magenta\", \"black\", \"white\", \"gray\", \"custom\"]\ncolors = [color.red, color.green, color.blue, color.purple, color.yellow,\n          color.orange, color.cyan, color.magenta, color.black, color.white, color.gray(0.5), vec(0, 0.6, 0.6)]\n\nCustom textures using online images can also be used by adding the image URL after texture and enclosing it in quotes, as shown with a Jupiter image:\n\njupiter = sphere(pos=vec(0, 0, 0), radius=1, \n                 texture=\"https://upload.wikimedia.org/wikipedia/commons/c/c1/Jupiter_New_Horizons.jpg\")\n\nUsing Online Images for Custom Textures:\n```python\nscene = canvas(title=\"Jupiter\", width=600, height=600, color=color.black, range=1.5)\njupiter = sphere(pos=vec(0, 0, 0), radius=1, texture=\"https://upload.wikimedia.org/wikipedia/commons/c/c1/Jupiter_New_Horizons.jpg\")\nwhile True: \n    rate(1000)\n    jupiter.rotate(angle=2*pi/(24*60*60), axis=vec(0, 1, 0))\n```\n\nBuilt-in Earth Material\n```python\nscene = canvas(title=\"Earth\", width=600, height=600, color=color.black, range=1.5)\nearth = sphere(pos=vec(0, 0, 0), radius=1, texture=textures.earth)\nwhile True: \n    rate(1000)\n    earth.rotate(angle=2*pi/(24*60*60), axis=vec(0, 1, 0))\n```\nA sphere can generate a ball with initial velocity and acceleration, which can also be set later as follows:\n\nball.v = vec(v0, 0, 0)\nball.a = vec(0, -g, 0)\n\nObject Motion\nThe condition set in the while loop is:\n\nball.pos.x < L/2\nThus, the animation continues until the ball reaches the right edge of the floor.\n\nWhen the ball hits the floor, the collision count \\( i \\) is incremented by 1, and it prints the collision count \\( i \\), the elapsed time \\( t \\), and the horizontal range \\( ball.pos.x + L/2 \\). The following code is required to reverse the direction of the ball's y-velocity:\n\nif ball.pos.y - floor.pos.y <= size + 0.5*floor.height and ball.v.y < 0:\n    i += 1\n    print(i, t, ball.pos.x + L/2)\n    ball.v.y = -ball.v.y\n    \nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Speed_I as a cyber input variable, set Speed_I=5\n(2) Speed_I is the horizontal initial velocity of the ball. When Speed_I changes to a new value, the horizontal initial velocity of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math and time.",
      "output": "from vpython import *\n\n# Parameter Settings\nL = 20.0                                   \nh = 15.0                                       \nsize = 1.0                                 \ng = 9.8                               \ndt = 0.001                              \nSpeed_I = 5                            \n\n# Display Settings\nscene = canvas(width=800, height=800, background=vec(0.5, 0.5, 0), center=vec(0, h / 2, 0), range=L)\nfloor = box(length=L, height=0.01, width=10, texture=textures.wood_old)\nball = sphere(radius=size, color=color.red, make_trail=True, retain=100)\nball.pos = vec(-L / 2 + size, h, 0)\nball.v = vec(Speed_I, 0, 0)\nball.a = vec(0, -g, 0)\n\n# Object Motion\ni = 0\nt = 0\nwhile True:\n    rate(1/dt)\n    ball.pos += ball.v * dt + 0.5 * ball.a * dt**2\n    ball.v += ball.a * dt\n    if ball.pos.y - floor.pos.y <= size + 0.5*floor.height and ball.v.y < 0:\n        i += 1\n        print(i, t, ball.pos.x + L/2)\n        ball.v.y = -ball.v.y\n    t += dt",
      "mode": "initial",
      "timestamp": "2024-07-23 21:36:41",
      "serial_number": 1
    },
    {
      "input": "Please update the following program based on this instruction: The animation will continue to run until the ball reaches the right edge of the floor.\n\nfrom vpython import *\n\n# Parameter Settings\nL = 20.0                                   \nh = 15.0                                       \nsize = 1.0                                 \ng = 9.8                               \ndt = 0.001                              \nSpeed_I = 5                            \n\n# Display Settings\nscene = canvas(width=800, height=800, background=vec(0.5, 0.5, 0), center=vec(0, h / 2, 0), range=L)\nfloor = box(length=L, height=0.01, width=10, texture=textures.wood_old)\nball = sphere(radius=size, color=color.red, make_trail=True, retain=100)\nball.pos = vec(-L / 2 + size, h, 0)\nball.v = vec(Speed_I, 0, 0)\nball.a = vec(0, -g, 0)\n\n# Object Motion\ni = 0\nt = 0\nwhile True:\n    rate(1/dt)\n    ball.pos += ball.v * dt + 0.5 * ball.a * dt**2\n    ball.v += ball.a * dt\n    if ball.pos.y - floor.pos.y <= size + 0.5*floor.height and ball.v.y < 0:\n        i += 1\n        print(i, t, ball.pos.x + L/2)\n        ball.v.y = -ball.v.y\n    t += dt",
      "output": "from vpython import *\n\n# Parameter Settings\nL = 20.0                                   \nh = 15.0                                       \nsize = 1.0                                 \ng = 9.8                               \ndt = 0.001                              \nSpeed_I = 5                            \n\n# Display Settings\nscene = canvas(width=800, height=800, background=vec(0.5, 0.5, 0), center=vec(0, h / 2, 0), range=L)\nfloor = box(length=L, height=0.01, width=10, texture=textures.wood_old)\nball = sphere(radius=size, color=color.red, make_trail=True, retain=100)\nball.pos = vec(-L / 2 + size, h, 0)\nball.v = vec(Speed_I, 0, 0)\nball.a = vec(0, -g, 0)\n\n# Object Motion\ni = 0\nt = 0\nwhile ball.pos.x < L/2:\n    rate(1/dt)\n    ball.pos += ball.v * dt + 0.5 * ball.a * dt**2\n    ball.v += ball.a * dt\n    if ball.pos.y - floor.pos.y <= size + 0.5*floor.height and ball.v.y < 0:\n        i += 1\n        print(i, t, ball.pos.x + L/2)\n        ball.v.y = -ball.v.y\n    t += dt",
      "mode": "modification",
      "timestamp": "2024-07-23 21:43:57",
      "serial_number": 2
    }
  ]
}