{
  "session_id": 676,
  "log": [
    {
      "input": "Mass Spectrometer: Automate the Process for 5 Particles Using a For Loop\n\nFive particles enter a uniform magnetic field B at the same speed and at a perpendicular angle, as depicted in the diagram below. These five particles are: carbon atom ($^{12}$C), oxygen ion ($^{16}$O$^{2-}$), sodium ion ($^{23}$Na$^+$), magnesium ion ($^{24}$Mg$^{2+}$), and chlorine ion ($^{35}$Cl$^-$). Ignoring gravitational effects, the trajectories labeled 1, 2, 3, 4, and 5 in the diagram respectively represent which particles?\n\nThis problem is from the 1995 Joint University Entrance Examination in Japan. Although it is quite dated, this question can still be found in various reference books. As particles with a positive charge enter the magnetic field moving upward, they experience a magnetic force to the left, while particles with a negative charge experience it to the right, and neutral particles are unaffected by magnetic forces. Assuming the magnetic force acts as a centripetal force for uniform circular motion in the magnetic field, the equation\n$$\nqvB = m \\cdot \\frac{v^2}{R} \\Rightarrow R = \\frac{mv}{qB} \\propto \\frac{m}{q}\n$$\nleads to the answer being $^{23}$Na$^+$, $^{24}$Mg$^{2+}$, $^{12}$C, $^{16}$O$^{2-}$, $^{35}$Cl$^-$. Next, we'll use VPython to graphically demonstrate the motion of these particles in the mass spectrometer.\n\nProgramming Section\nThe program for the mass spectrometer, which uses a for loop to process the 5 types of particles, is similar to another mass spectrometer program. The modification is described below.\n\nWe added particle label data, labels. Since VPython supports HTML syntax, we can achieve superscripts and subscripts. Text between `<sup>` and `</sup>` is superscripted, while text between `<sub>` and `</sub>` is subscripted.\n\nA for loop reads the names of particles and incorporates the generation of particles and their motion within a while loop inside the for loop. When the while loop completes, a label for the particle is added.\n\nSimulation Results\nHere are the results from running program 23-2, showing that the radius of particle rotation is directly proportional to m/q.\n\nProgram 23-2 Screenshot:\n![image](https://hackmd.io/_uploads/HkDwi3aO0.png)\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1.\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Constants\nB = vector(0, 0, -1)  # Magnetic field\nv = vector(0, 1, 0)  # Initial velocity\n\n# Particles\nparticles = [\n    {'name': '<sup>12</sup>C', 'mass': 12*1.67e-27, 'charge': 0},\n    {'name': '<sup>16</sup>O<sup>2-</sup>', 'mass': 16*1.67e-27, 'charge': -2*1.6e-19},\n    {'name': '<sup>23</sup>Na<sup>+</sup>', 'mass': 23*1.67e-27, 'charge': 1.6e-19},\n    {'name': '<sup>24</sup>Mg<sup>2+</sup>', 'mass': 24*1.67e-27, 'charge': 2*1.6e-19},\n    {'name': '<sup>35</sup>Cl<sup>-</sup>', 'mass': 35*1.67e-27, 'charge': -1.6e-19}\n]\n\n# For each particle\nfor particle in particles:\n    # Create a sphere and assign properties\n    ball = sphere(pos=vector(0, 0, 0), radius=1, color=color.white, make_trail=True)\n    ball.mass = particle['mass']\n    ball.charge = particle['charge']\n    ball.velocity = v\n\n    # While the ball is inside the magnetic field\n    while abs(ball.pos.y) < 5:\n        rate(100)\n        # Calculate force and update momentum\n        F = ball.charge * cross(ball.velocity, B)\n        ball.velocity = ball.velocity + F/ball.mass\n\n    # Label the particle\n    label(pos=ball.pos, text=particle['name'], xoffset=20, yoffset=12, space=ball.radius, height=10, border=4, font='sans')",
      "mode": "initial",
      "timestamp": "2024-07-24 08:58:00",
      "serial_number": 1
    }
  ]
}