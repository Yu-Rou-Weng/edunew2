{
  "session_id": 678,
  "log": [
    {
      "input": "# Velocity Selector\n\nA velocity selector is a device used to filter charged particles with specific speeds, and its basic structure is shown in the diagram below. A downward electric field is created using two parallel charged plates, combined with a magnetic field entering perpendicularly to the plane of the paper. If a positively charged particle enters the velocity selector from the left with a horizontal speed \\( v \\), the particle will experience a downward electrostatic force and an upward magnetic force. When the net force is zero, the particle moves at a constant speed, then:\n$$\nqE = qvB \\Rightarrow v = \\frac{E}{B} = \\frac{V}{Bd}\n$$\n\nIf a barrier with only a small hole is added on the right side, only particles moving straight to the right can pass through, allowing the control of particle speed values through changes in the electric and magnetic fields. There are two programs below:\n\n- Program 20-1: Draws the electric field, magnetic field, parallel charged plates, and the trajectory of the particle. The particle stops moving after hitting the parallel charged plates.\n- Program 20-2: Based on 20-1, adds a barrier at the exit.\n\nProgram to be written: 20-1: Draws the electric field, magnetic field, parallel charged plates, and the trajectory of the particle. The particle stops moving after hitting the parallel charged plates.\n\nVelocity Selector Construction Diagram:\n![image](https://hackmd.io/_uploads/HJlvr2auR.png)\n\n## Parameter Setup\n\nVariables are set as size, m, v0, q, V, d, L, B, E_field, B_field, t, dt, with their purposes written in the comments for each line. To ensure smooth animation, the acceleration of the particle must not be too large, therefore the mass of the particle is much larger than the actual mass of a nucleus.\n\n## Display Setup\n\nGenerate an animation window, parallel charged plates, horizontal lines, and charged particles.\n\nArrows are generated to represent velocity and acceleration.\n\nArrows and labels to represent the electric and magnetic fields are generated. The syntax for labels is:\n\n[label_name] = label(pos=[position vector], text=\"[label content]\", xoffset=[x-direction offset], yoffset=[y-direction offset], color=[color name or RGB value], font=\"[font name]\")\nReplace the contents in [] with the parameters you need.\n\nOpen the drawing window, plot the positions, velocities, accelerations, and the time relationship of the particles.\n\n## Object Motion\n\nTo stop the animation when the charged particle reaches the far right of the screen or hits the parallel charged plates, set the condition in the while loop as:\ncharge.pos.x < L and abs(charge.pos.y) < d/2 - p1.height - size.\n\nCalculate the net force on the charged particle, which only exists between the parallel charged plates and is set to zero outside. The mathematical formula for the net force on the charged particle is:\n$$\n\\vec{F} = q(\\vec{E} + \\vec{v} \\times \\vec{B})\n$$\nCorresponding code:\nF = q*(E_field + cross(charge.v, B_field))\nUpdate the particle's acceleration, velocity, and position.\n\nUpdate the arrows representing velocity and acceleration, only drawing the direction to avoid automatic resizing of the animation.\n\nUpdate the time.\n\n## Simulation Results\n\nHere are five different data combinations and their test results:\n\n1. v0 = 10, V = 1, d = 0.1, B = 1 \u21d2 Constant velocity straight-line motion\n\nScreenshot:\n![image](https://hackmd.io/_uploads/r1w2B2TuC.png)\n\n2. q > 0, v0 = 20, other conditions same as combination 1 \u21d2 Upward shift\n\nScreenshot:\n![image](https://hackmd.io/_uploads/H1oaB26uC.png)\n\n3. q > 0, d = 0.2, other conditions same as combination 1 \u21d2 Upward shift\n\nScreenshot:\n![image](https://hackmd.io/_uploads/SyL1U36OC.png)\n\n4. q > 0, V = 2, other conditions same as combination 1 \u21d2 Downward shift\n\nScreenshot:\n![image](https://hackmd.io/_uploads/ByvlInp_R.png)\n\n5. q > 0, B = 5, other conditions same as combination 1 \u21d2 Upward shift\n\nScreenshot:\n![image](https://hackmd.io/_uploads/Bk1fLna_A.png)\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Parameter Setup\nsize = 0.01     # size of the particle\nm = 1E-11       # mass of the particle\nv0 = 10         # initial speed of the particle\nq = 1.6E-19     # charge of the particle\nV = 1           # potential difference between the plates\nd = 0.1         # distance between the plates\nL = 0.5         # length of the plates\nB = 1           # magnetic field strength\nE_field = vec(0, -V/d, 0)  # electric field vector\nB_field = vec(0, 0, -B)    # magnetic field vector\nt = 0           # initial time\ndt = 1E-5       # time step size\n\n# Display Setup\nscene = canvas(width=600, height=400, align='left', background=vec(0.5,0.5,0))\np1 = box(pos=vec(L/2, d/2, 0), size=vec(L, 0.01, 0.2), color=color.blue)\np2 = box(pos=vec(L/2, -d/2, 0), size=vec(L, 0.01, 0.2), color=color.blue)\ncharge = sphere(pos=vec(0, 0, 0), radius=size, color=color.red)\ncharge.v = vec(v0, 0, 0)\nv_arrow = arrow(pos=charge.pos, axis=charge.v/6, color=color.green)\na_arrow = arrow(pos=charge.pos, axis=vec(0,0,0), color=color.yellow)\nE_arrow = arrow(pos=vec(L/2, d/3, 0), axis=vec(0, -0.2, 0), color=color.orange)\nB_arrow = arrow(pos=vec(L/2, -d/3, 0), axis=vec(0, 0, -0.2), color=color.cyan)\nE_label = label(pos=E_arrow.pos, text='E', xoffset=20, yoffset=-25, space=30, height=16, color=color.orange, font='sans')\nB_label = label(pos=B_arrow.pos, text='B', xoffset=20, yoffset=-25, space=30, height=16, color=color.cyan, font='sans')\n\n# Object Motion\nwhile charge.pos.x < L and abs(charge.pos.y) < d/2 - p1.height - size:\n    rate(1000)\n    if charge.pos.x < 0 or charge.pos.x > L:\n        F = vec(0, 0, 0)\n    else:\n        F = q*(E_field + cross(charge.v, B_field))\n    charge.v = charge.v + F/m*dt\n    charge.pos = charge.pos + charge.v*dt\n    v_arrow.pos = charge.pos\n    v_arrow.axis = charge.v/6\n    a_arrow.pos = charge.pos\n    a_arrow.axis = F/m/6\n    t = t + dt",
      "mode": "initial",
      "timestamp": "2024-07-24 08:58:24",
      "serial_number": 1
    }
  ]
}