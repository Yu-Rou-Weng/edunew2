{
  "session_id": 746,
  "log": [
    {
      "input": "Please write a Vpython program for \"Free Fall Three-Ball Collision\"\n\nOne-dimensional elastic collision velocity formula\n\nAssume two particles have masses \\( m_1 \\) and \\( m_2 \\), with initial velocities \\( v_1 \\) and \\( v_2 \\) respectively. The velocities after collision are \\( v_1' \\) and \\( v_2' \\), given by:\n\n\\[ v_1' = \\frac{m_1 - m_2}{m_1 + m_2} v_1 + \\frac{2m_2}{m_1 + m_2} v_2 \\]\n\n\\[ v_2' = \\frac{2m_1}{m_1 + m_2} v_1 + \\frac{m_2 - m_1}{m_1 + m_2} v_2 \\]\n\nWhere:\n- \\( v_1' \\) is the velocity of the object with mass \\( m_1 \\) after the collision\n- \\( v_2' \\) is the velocity of the object with mass \\( m_2 \\) after the collision\n- \\( v_1 \\) is the velocity of the object with mass \\( m_1 \\) before the collision\n- \\( v_2 \\) is the velocity of the object with mass \\( m_2 \\) before the collision\n\nThere are three balls: one red, one green, and one blue. Please draw a wooden floor with a side length of 50. The red ball has a mass of 3 and a radius of 3, the green ball has a mass of 2 and a radius of 2, and the blue ball has a mass of 1 and a radius of 1. The three balls are stacked vertically, with the green ball on top of the red ball and the blue ball on top of the green ball. Release the three stacked balls from a height of 15 above the floor, with the balls accelerating downwards due to gravity from rest. The three balls will adhere to one-dimensional elastic collisions. If the red ball hits the ground, it will bounce back. If the red and green balls collide, the mass of the red ball, the y-direction velocity of the red ball, the mass of the green ball, and the y-direction velocity of the green ball will be substituted into the one-dimensional elastic collision formula to calculate the post-collision velocities, which are then reassigned to the y-direction velocities of the red and green balls respectively. If the green and blue balls collide, the mass of the green ball, the y-direction velocity of the green ball, the mass of the blue ball, and the y-direction velocity of the blue ball will be substituted into the one-dimensional elastic collision formula to calculate the post-collision velocities, which are then reassigned to the y-direction velocities of the green and blue balls respectively. Due to the heavier mass of the balls below (red and green) compared to the blue ball, the rebound height of the blue ball will far exceed its original height above the ground.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "import vpython as vp\n\n# Define constants\ng = 9.8 # acceleration due to gravity\n\n# Define the initial radius\nRadius_I = 1\n\n# Define the balls\nball1 = vp.sphere(pos=vp.vector(0, 15, 0), radius=3*Radius_I, color=vp.color.red, m=3, v=vp.vector(0, 0, 0))\nball2 = vp.sphere(pos=vp.vector(0, 15+2*Radius_I+3*Radius_I, 0), radius=2*Radius_I, color=vp.color.green, m=2, v=vp.vector(0, 0, 0))\nball3 = vp.sphere(pos=vp.vector(0, 15+2*Radius_I+3*Radius_I+2*Radius_I+Radius_I, 0), radius=Radius_I, color=vp.color.blue, m=1, v=vp.vector(0, 0, 0))\n\n# Define the floor\nfloor = vp.box(pos=vp.vector(0, 0, 0), size=vp.vector(50, 0.01, 50), color=vp.color.orange)\n\n# Define the time step\ndt = 0.01\n\nwhile True:\n    vp.rate(100)\n    \n    ball1.v.y -= g*dt\n    ball2.v.y -= g*dt\n    ball3.v.y -= g*dt\n    \n    ball1.pos.y += ball1.v.y*dt\n    ball2.pos.y += ball2.v.y*dt\n    ball3.pos.y += ball3.v.y*dt\n    \n    if ball1.pos.y < ball1.radius:\n        ball1.v.y = abs(ball1.v.y)\n    if ball2.pos.y < ball2.radius + ball1.radius and ball2.v.y < ball1.v.y:\n        v1f = ((ball1.m-ball2.m)/(ball1.m+ball2.m))*ball1.v.y + ((2*ball2.m)/(ball1.m+ball2.m))*ball2.v.y\n        v2f = ((2*ball1.m)/(ball1.m+ball2.m))*ball1.v.y + ((ball2.m-ball1.m)/(ball1.m+ball2.m))*ball2.v.y\n        ball1.v.y = v1f\n        ball2.v.y = v2f\n    if ball3.pos.y < ball3.radius + ball2.radius and ball3.v.y < ball2.v.y:\n        v1f = ((ball2.m-ball3.m)/(ball2.m+ball3.m))*ball2.v.y + ((2*ball3.m)/(ball2.m+ball3.m))*ball3.v.y\n        v2f = ((2*ball2.m)/(ball2.m+ball3.m))*ball2.v.y + ((ball3.m-ball2.m)/(ball2.m+ball3.m))*ball3.v.y\n        ball2.v.y = v1f\n        ball3.v.y = v2f",
      "mode": "initial",
      "timestamp": "2024-07-25 18:27:52",
      "serial_number": 1
    }
  ]
}