{
  "session_id": 1185,
  "log": [
    {
      "input": "# Free Fall and Collision of Three BallsIn this scenario, three highly elastic balls of varying masses and radii are stacked vertically, with the heaviest ball at the bottom. When the stack is released from rest, all three balls accelerate downward due to gravity. After the bottom ball hits the ground and rebounds, a series of collisions occurs between the balls, transferring energy and momentum among them.1. **Initial Setup:**\u00a0 \u00a0- The balls are stacked with the largest and heaviest at the bottom and the smallest and lightest at the top.\u00a0 \u00a0- Each ball is subjected to the same gravitational acceleration.2. **Collision Dynamics:**\u00a0 \u00a0- The bottom ball rebounds upon hitting the ground.\u00a0 \u00a0- Elastic collisions occur between the balls, with velocities updated according to conservation laws of energy and momentum.3. **Outcome of Motion:**\u00a0 \u00a0- If the lower balls are heavier, the top ball is propelled upward to heights significantly greater than its original release height.\u00a0 \u00a0- If the bottom ball is lighter, it tends to bounce repeatedly between the ground and the balls above it.",
      "output": "from vpython import *\n\n# Parameters\ng = 9.81  # acceleration due to gravity\nm1 = 3.0  # mass of bottom ball\nm2 = 2.0  # mass of middle ball\nm3 = 1.0  # mass of top ball\nr1 = 0.1  # radius of bottom ball\nr2 = 0.075  # radius of middle ball\nr3 = 0.05  # radius of top ball\n\n# Create balls\nbottom_ball = sphere(pos=vector(0, -m1*0.5, 0), radius=r1, color=color.blue, make_trail=True)\nmiddle_ball = sphere(pos=bottom_ball.pos + vector(0, m1*0.5 + r2, 0), radius=r2, color=color.green, make_trail=True)\ntop_ball = sphere(pos=middle_ball.pos + vector(0, m2*0.5 + r3, 0), radius=r3, color=color.red, make_trail=True)\n\n# Initial velocities\nbottom_ball.v = vector(0, 0, 0)\nmiddle_ball.v = vector(0, 0, 0)\ntop_ball.v = vector(0, 0, 0)\n\n# Time step\ndt = 0.001\n\n# Main loop\nwhile True:\n    rate(1000)\n    \n    # Update positions\n    bottom_ball.pos += bottom_ball.v * dt\n    middle_ball.pos += middle_ball.v * dt\n    top_ball.pos += top_ball.v * dt\n    \n    # Update velocities due to gravity\n    bottom_ball.v.y -= g * dt\n    middle_ball.v.y -= g * dt\n    top_ball.v.y -= g * dt\n    \n    # Check for collisions and update velocities\n    if mag(bottom_ball.pos - middle_ball.pos) <= r1 + r2:\n        v1f = ((m1 - m2) * bottom_ball.v + 2 * m2 * middle_ball.v) / (m1 + m2)\n        v2f = ((m2 - m1) * middle_ball.v + 2 * m1 * bottom_ball.v) / (m1 + m2)\n        bottom_ball.v = v1f\n        middle_ball.v = v2f\n    \n    if mag(middle_ball.pos - top_ball.pos) <= r2 + r3:\n        v2f = ((m2 - m3) * middle_ball.v + 2 * m3 * top_ball.v) / (m2 + m3)\n        v3f = ((m3 - m2) * top_ball.v + 2 * m2 * middle_ball.v) / (m2 + m3)\n        middle_ball.v = v2f\n        top_ball.v = v3f\n    \n    if bottom_ball.pos.y <= -m1*0.5 + r1:\n        bottom_ball.v.y *= -1",
      "mode": "initial",
      "timestamp": "2024-12-26 19:00:25",
      "serial_number": 1
    }
  ]
}