{
  "session_id": 740,
  "log": [
    {
      "input": "### Horizontal Projectile Motion with Consideration of Gravity and Air Resistance f = -bv\n\nA small ball is thrown horizontally from a height h with an initial speed v0. The ball accelerates downwards due to gravity, while also considering the effects of gravity and air resistance f = -bv.\n\n2. Horizontal Projectile Motion with Coefficient of Restitution e:\nA small ball is thrown horizontally from a height h with an initial speed v0. The ball accelerates downwards due to gravity. When the ball hits the floor, it bounces back, considering only the effect of gravity. The coefficient of restitution upon hitting the floor is e.\n\nThe program for horizontal projectile motion with coefficient of restitution e is almost identical to itself, only adding the coefficient of restitution e, and modifying upon the ball's impact with the floor to:\n\nif ball.pos.y - floor.pos.y <= size + 0.5*floor.height and ball.v.y < 0:\n    i += 1\n    print(i, t, ball.pos.x + L/2)\n    ball.v.y = -ball.v.y * e\n\n3. \"Horizontal Projectile Motion Considering Gravity and Air Resistance f = -bv\" Program\nThe program \"Horizontal Projectile Motion Considering Gravity and Air Resistance f = -bv\" is almost identical to the \"Horizontal Projectile Motion with Coefficient of Restitution e\" program, with the difference being:\n\nThe addition of the air resistance coefficient b.\n\nWithin the while loop, add:\n\n    f = -b*ball.v\n    ball.a = vec(0, -g, 0) + f/m\nCalculating the current air resistance and the ball's acceleration.\n\nTo prevent the ball from experiencing excessive resistance and failing to reach the right edge of the floor, the condition in the while loop has been modified to include i < 20, stopping the animation when the ball hits the floor 20 times.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Speed_I as a cyber input variable, set Speed_I=5\n(2) Speed_I is the horizontal initial velocity of the ball. When Speed_I changes to a new value, the horizontal initial velocity of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# constants\ng = 9.8\nsize = 0.25  # ball radius\nheight = 15.0  # ball height\nm = 0.2  # ball mass\nb = 0.05  # air resistance coefficient\ne = 0.9  # coefficient of restitution\nL = 30.0  # floor length\nSpeed_I = 5  # initial horizontal velocity\n\n# objects\nfloor = box(length=L, height=0.01, width=10, color=color.blue)\nball = sphere(pos=vec(0, height, 0), radius=size, color=color.red)\nball.v = vec(Speed_I, 0, 0)\nball.a = vec(0, -g, 0)\n\n# variables\nt = 0\ndt = 0.001\ni = 0\n\nwhile i < 20:\n    rate(1000)\n    f = -b * ball.v\n    ball.a = vec(0, -g, 0) + f / m\n    ball.v += ball.a * dt\n    ball.pos += ball.v * dt\n    t += dt\n    if ball.pos.y - floor.pos.y <= size + 0.5 * floor.height and ball.v.y < 0:\n        i += 1\n        ball.v.y = -ball.v.y * e",
      "mode": "initial",
      "timestamp": "2024-07-25 15:06:35",
      "serial_number": 1
    }
  ]
}