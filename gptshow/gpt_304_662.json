{
  "session_id": 662,
  "log": [
    {
      "input": "# Velocity Selector\n\nA velocity selector is a device used to filter charged particles with specific speeds, and its basic structure is shown in the following diagram. A downward electric field is created by two parallel charged plates, combined with a magnetic field entering perpendicularly to the plane of the paper. If a positively charged particle enters the velocity selector from the left side at a horizontal speed \\( v \\), the particle experiences a downward electrostatic force and an upward magnetic force. When the net force is zero, the particle moves forward at a constant speed, resulting in:\n$$\nqE = qvB \\Rightarrow v = \\frac{E}{B} = \\frac{V}{Bd}\n$$\n\nIf a plate with only a small hole is added on the right side, only particles moving straight to the right can pass through. This allows control over the speed of the particles passing through the device by altering the values of the electric and magnetic fields. There are two programs included:\n\n- Program 20-1: Draw the electric field, magnetic field, parallel charged plates, and particle trajectory. The particle stops moving after hitting the parallel charged plates.\n- Program 20-2: Based on 20-1, a plate is added at the outlet.\n\nProgram to be written: 20-1: Draw the electric field, magnetic field, parallel charged plates, and particle trajectory. The particle stops moving after hitting the parallel charged plates.\n\nVelocity Selector Structure Diagram:\n![image](https://hackmd.io/_uploads/HJlvr2auR.png)\n\n## Parameter Settings\n\nVariables such as size, m, v0, q, V, d, L, B, E_field, B_field, t, dt are set here, with their purposes documented in the comments. To make the animation smoother, the particle's mass is much larger than the actual mass of a nucleus.\n\n## Display Settings\n\nGenerate an animation window, parallel charged plates, horizontal line, and charged particle.\n\nGenerate arrows representing velocity and acceleration.\n\nGenerate arrows and labels for the electric and magnetic fields. The syntax for labels is:\n\n[label_name] = label(pos=[position vector], text=\"[label content]\", xoffset=[x-direction offset], yoffset=[y-direction offset], color=[color name or RGB value], font=\"[font name]\")\nReplace the contents in [] with your required parameters.\n\nOpen the drawing window to plot the relationships of the particle's position, velocity, acceleration, and time.\n\nObject Movement\nTo stop the animation when the charged particle reaches the far right of the screen or hits the parallel charged plates, set the condition in the while loop to charge.pos.x < L and abs(charge.pos.y) < d/2 - p1.height - size.\n\nCalculate the net force on the charged particle, which only exists between the parallel charged plates where the electric and magnetic fields are present. The formula for the net force is:\n\n$$\n\\vec{F} = q(\\vec{E} + \\vec{v} \\times \\vec{B})\n$$\nThe corresponding code is:\n\nF = q*(E_field + cross(charge.v, B_field))\nUpdate the charged particle's acceleration, velocity, and position.\n\nUpdate the arrows representing velocity and acceleration to only show direction to avoid automatic resizing of the animation.\n\nUpdate the time.\n\nSimulation Results\n\nBelow are five different sets of data and test results:\n\n1. v0 = 10, V = 1, d = 0.1, B = 1 \u21d2 Uniform linear motion\n\nScreenshot:\n![image](https://hackmd.io/_uploads/r1w2B2TuC.png)\n\n2. q > 0, v0 = 20, other conditions same as combination 1 \u21d2 Upward shift\n\nScreenshot:\n![image](https://hackmd.io/_uploads/H1oaB26uC.png)\n\n3. q > 0, d = 0.2, other conditions same as combination 1 \u21d2 Upward shift\n\nScreenshot:\n![image](https://hackmd.io/_uploads/SyL1U36OC.png)\n\n4. q > 0, V = 2, other conditions same as combination 1 \u21d2 Downward shift\n\nScreenshot:\n![image](https://hackmd.io/_uploads/ByvlInp_R.png)\n\n5. q > 0, B = 5, other conditions same as combination 1 \u21d2 Upward shift\n\nScreenshot:\n![image](https://hackmd.io/_uploads/Bk1fLna_A.png)\n\nCyber Input Variable Mapping Information:\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Constants\nm, q, V, d, L, B = 1E-11, 1.6E-19, 200, 0.02, 0.1, 0.5\nv0, E_field, B_field = vector(V/d, 0, 0), vector(0, -V/d, 0), vector(0, 0, B)\nt, dt = 0, 1E-5\nsize, p1, p2 = 0.0025, box(length=0.01, height=0.0005, width=0.01, color=color.red), box(length=0.01, height=0.0005, width=0.01, color=color.red)\np1.pos, p2.pos = vector(L/2, d/2, 0), vector(L/2, -d/2, 0)\ncharge = sphere(pos=vector(0, 0, 0), radius=size, color=color.yellow, v=vector(v0.x, 0, 0), a=vector(0, 0, 0))\nv_arrow = arrow(pos=charge.pos, axis=charge.v, color=color.green)\na_arrow = arrow(pos=charge.pos, axis=charge.a, color=color.red)\nlabel_E = label(pos=vector(L/2, 0.75*d, 0), text='E', xoffset=0, yoffset=-10, color=color.green, font='sans')\nlabel_B = label(pos=vector(L/2, -0.75*d, 0), text='B', xoffset=0, yoffset=-10, color=color.green, font='sans')\n\n# Window\nscene = canvas(width=600, height=400, range=0.05, background=vector(0.5, 0.5, 0))\n\n# Animation\nwhile charge.pos.x < L and abs(charge.pos.y) < d/2 - p1.height - size:\n    rate(1000)\n    if charge.pos.x < 0 or charge.pos.x > L:\n        charge.a = vector(0, 0, 0)\n    else:\n        F = q * (E_field + cross(charge.v, B_field))\n        charge.a = F/m\n    charge.v += charge.a*dt\n    charge.pos += charge.v*dt\n    v_arrow.pos = charge.pos\n    v_arrow.axis = charge.v/3\n    a_arrow.pos = charge.pos\n    a_arrow.axis = charge.a/3\n    t += dt",
      "mode": "initial",
      "timestamp": "2024-07-24 07:26:21",
      "serial_number": 1
    }
  ]
}