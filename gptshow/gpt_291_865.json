{
  "session_id": 865,
  "log": [
    {
      "input": "Please write a \"Wood Block Spring System Elastic Collision\" VPython animation\n\n# One-dimensional Elastic Collision\n\nAssume there are two wood blocks on a horizontal, smooth table surface with masses $m_1$ and $m_2$, and velocities $v_1$ and $v_2$, respectively. After the collision, their velocities become $v_1'$ and $v_2'$. Since the collision process of the two blocks is free from external forces, the system conserves momentum:\n$$\nm_1 v_1 + m_2 v_2 = m_1 v_1' + m_2 v_2' \\Rightarrow m_1 (v_1 - v_1') = m_2 (v_2' - v_2) \\quad (1)\n$$\n\nIf there is no energy loss during the collision, the total kinetic energy of the blocks before and after the collision is equal:\n$$\n\\frac{1}{2} m_1 v_1^2 + \\frac{1}{2} m_2 v_2^2 = \\frac{1}{2} m_1 v_1'^2 + \\frac{1}{2} m_2 v_2'^2\n$$\n$$\nm_1 (v_1^2 - v_1'^2) = m_2 (v_2'^2 - v_2^2)\n$$\n$$\nm_1 (v_1 + v_1') (v_1 - v_1') = m_2 (v_2' + v_2) (v_2' - v_2) \\quad (2)\n$$\n\nDividing equation (2) by equation (1), we get:\n$$\nv_1 + v_1' = v_2' + v_2 \\Rightarrow\n\\begin{cases}\nv_1' = v_2' + v_2 - v_1 \\quad (3) \\\\\nv_2' = v_1 + v_1' - v_2 \\quad (4)\n\\end{cases}\n$$\n\nSubstituting equation (4) into equation (1), we find:\n$$\nm_1 (v_1 - v_1') = m_2 [(v_1 + v_1' - v_2) - v_2]\n$$\n$$\n(m_1 + m_2) v_1' = (m_1 - m_2) v_1 + 2 m_2 v_2 \\Rightarrow v_1' = \\frac{m_1 - m_2}{m_1 + m_2} v_1 + \\frac{2 m_2}{m_1 + m_2} v_2\n$$\n\nSubstituting equation (3) into equation (1), we find:\n$$\nm_1 [v_1 - (v_2' + v_2 - v_1)] = m_2 (v_2' - v_2)\n$$\n$$\n(m_1 + m_2) v_2' = 2 m_1 v_1 + (m_2 - m_1) v_2 \\Rightarrow v_2' = \\frac{2 m_1}{m_1 + m_2} v_1 + \\frac{m_2 - m_1}{m_1 + m_2} v_2\n$$\n\n\nProgram should: Directly use the post-collision velocity formulas\n\n![image](https://hackmd.io/_uploads/S1x8VjadA.png)\n\n![image](https://hackmd.io/_uploads/H14w4jpOC.png)\nScreenshot of the one-dimensional elastic collision program\n\nParameter Settings\n\nHere variables set include block width, mass, initial velocity, color, x-axis range, time, and time interval. Time interval dt is set to 0.0005, as setting it to 0.001 produces more significant errors when calculating block energy, thus a smaller value is chosen. A 3 cm white spring is attached to the right side of the green block for buffering during collisions. There will be a floor.\n\nScreen Setup\n\nThe code to generate the animation window, floor, blocks, and drawing window has appeared often in previous animations and will not be repeated here.\n\nCustom Functions\n\nLines 36 to 39 of the code define a function named af_col_v, which takes parameters (m1, m2, v1, v2) and returns the velocities after collision v1_prime, v2_prime. We call this function at line 58:\n\nb1.v.x, b2.v.x = af_col_v(m1, m2, b1.v.x, b2.v.x)\nSince the function returns two values, the program assigns the first return value to b1.v.x, and the second return value to b2.v.x.\n\nObject Movement\n\nThe animation stops when the blocks reach the edge, so the while loop's condition is set as:\n\nb2.pos.x <= xmax - d2/2 and b1.pos.x >= xmin + d1/2\nIf the distance between the centers of the two blocks is less than (d1 + d2) / 2, it indicates a collision between the blocks, and the custom function af_col_v is called to calculate the velocities after the collision.\n\nUpdate the positions of the blocks.\n\nBoth the red and green blocks have a width of 0.1. A 3 cm spring is tied to the right side of the green block. The spring and red block do not connect together; draw the spring thicker and with higher density. When the red block hits the spring, the spring undergoes the aforementioned wood block spring system elastic collision.\n\nSpecial Note: The left side of the green block should have a 3 cm spring tied to it, which will only move with the green block and not separate. The spring will only connect to the green block, not to the red block.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Speed_I as a cyber input variable, set Speed_I=1\n(2) Speed_I is the Initial velocity of b1. When Speed_I changes to a new value, the Initial velocity of b1 also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Define and initialize all variables\nm1, m2 = 0.2, 0.6  # block mass\nv1, v2 = 1.0, 0  # initial velocities\nd1, d2 = 0.1, 0.1  # block width\nL = 10.0  # x-axis range\nt, dt = 0, 0.0005  # time, time interval\nb1 = box(pos=vector(-3.7,0,0), size=vector(d1,0.6*d1,0.6*d1), m=m1, v=vector(v1,0,0), color=color.green)\nb2 = box(pos=vector(-2.5,0,0), size=vector(d2,0.6*d2,0.6*d2), m=m2, v=vector(v2,0,0), color=color.red)\nspring = helix(pos=b1.pos, axis=b2.pos-b1.pos, radius=0.1, thickness=0.03, color=color.white)\nfloor = box(pos=vector(0,-0.07,0), size=vector(2*L,0.06,0.8), color=color.blue)\nxmin, xmax = -L+d1/2, L-d2/2  # limit of x\n\n# Define the after collision function\ndef af_col_v(m1, m2, v1, v2):\n    v1_prime = (m1-m2)*v1/(m1+m2) + 2*m2*v2/(m1+m2)\n    v2_prime = 2*m1*v1/(m1+m2) - (m1-m2)*v2/(m1+m2)\n    return v1_prime, v2_prime\n\n# Animation\nwhile b2.pos.x <= xmax and b1.pos.x >= xmin:\n    rate(1000)\n    # Check for collision\n    if abs(b2.pos.x - b1.pos.x) <= (d1+d2)/2:\n        b1.v.x, b2.v.x = af_col_v(m1, m2, b1.v.x, b2.v.x)\n    # Update positions\n    b1.pos, b2.pos = b1.pos + b1.v*dt, b2.pos + b2.v*dt\n    spring.axis = b2.pos - spring.pos",
      "mode": "initial",
      "timestamp": "2024-07-26 12:31:26",
      "serial_number": 1
    }
  ]
}