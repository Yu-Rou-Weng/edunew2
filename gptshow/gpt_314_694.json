{
  "session_id": 694,
  "log": [
    {
      "input": "Magnetic Field Generated by a Current-Carrying Solenoid\n\nChapter 8 of elective physics, \"Magnetic Effects of Current,\" introduces the Biot-Savart law, which is used to calculate the magnetic field produced by a small segment of current-carrying wire at a point in space. The equation is:\n$$\nd\\vec{B} = \\frac{\\mu_0}{4\\pi} \\frac{I d\\vec{L} \\times \\hat{r}}{r^2} \\Rightarrow dB = \\frac{\\mu_0}{4\\pi} \\frac{I dL \\sin{\\theta}}{r^2}\n$$\n\nUsing the Biot-Savart law, the magnetic field magnitude at a perpendicular distance \\( r \\) from a long, straight, current-carrying wire can be calculated as:\n$$\nB = \\frac{\\mu_0 I}{2\\pi r}\n$$\n\nThe magnetic field magnitude at the center of a current-carrying loop with radius \\( r \\) is:\n$$\nB = \\frac{\\mu_0 I}{2r}\n$$\n\nThe magnetic field magnitude at the center of a solenoid with \\( n \\) turns per unit length carrying a current \\( I \\) is:\n$$\nB = \\mu_0 n I\n$$\n\nMagnetic fields are distributed in space, but the diagrams in the book are all flat. Therefore, I want to use VPython to visualize the intensity and direction of the magnetic field in space.\n\nProgramming Part\n\nThe code for \"Magnetic Field Generated by a Current-Carrying Solenoid\" is modified based on the magnetic field generated by a current-carrying loop. Only the differences are described below.\n\nNew variables include the radius of the small sphere point_size, the radius of the wire seg_size, the radius of the solenoid r, and the number of turns of the solenoid num.\n\nA for loop arranges 500 small spheres into a helical line and stores the data in the list points.\n\nAnother for loop reads two adjacent spheres from the list points, calculates the length and direction of the line connecting the spheres, and starts drawing the wire from the midpoint between the two spheres, storing the data in the list segs.\n\nThe diagram to be drawn: \n![image](https://hackmd.io/_uploads/r1QWA3TuC.png)\n(1) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Constants\nmu = 4*pi*1E-7       # Permeability of free space\nI = 1.0              # Current in the wire\nr = 0.2              # Radius of solenoid\nnum = 500            # Number of turns of the solenoid\ndl = 2*pi*r/num      # Length of one turn\nseg_size = dl/5      # Radius of wire\npoint_size = dl/10   # Radius of a small sphere\nB_scale = 0.5*dl     # Scale for the magnetic field\ns2 = sqrt(2)\n\npoints = []          # List to store the small spheres\nsegs = []            # List to store the wire\nB_arrows = []        # List to store the magnetic field arrows\nsolenoids = []       # List to store the solenoid\n\n# Arrange the small spheres into a helical line\nfor i in range(num):\n    theta = i*2*pi/num\n    points.append(sphere(pos=vector(r*cos(theta), r*sin(theta), dl*i), radius=point_size, color=color.yellow))\n\n# Create the wire using adjacent spheres\nfor i in range(num-1):\n    r_middle = (points[i].pos + points[i+1].pos)/2\n    segs.append(cylinder(pos=r_middle, axis=points[i+1].pos-points[i].pos, radius=seg_size, color=color.red))\n\n# Create the solenoid\nfor i in range(num-1):\n    solenoids.append(cylinder(pos=points[i].pos, axis=points[i+1].pos-points[i].pos, radius=r, color=color.cyan, opacity=0.3))\n\n# Create the magnetic field arrows\nfor x in arange(-1.5, 1.6, 0.2):\n    for y in arange(-1.5, 1.6, 0.2):\n        for z in arange(-1.5, 1.6, 0.2):\n            loc = vector(x, y, z)\n            B = vector(0, 0, 0)\n            dB = vector(0, 0, 0)\n            for seg in segs:\n                r = loc - seg.pos\n                dB = (mu/4/pi)*I*cross(seg.axis, r.norm())/(mag(r)**2)\n                B = B + dB\n            if mag(B) > 1E-10:\n                B_arrows.append(arrow(pos=loc, axis=B_scale*B, color=color.cyan))",
      "mode": "initial",
      "timestamp": "2024-07-24 10:56:51",
      "serial_number": 1
    }
  ]
}