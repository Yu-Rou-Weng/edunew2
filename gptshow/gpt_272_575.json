{
  "session_id": 575,
  "log": [
    {
      "input": "Oblique Projectile Motion\n\nA small ball is thrown from the ground with an initial speed v0 and an elevation angle \ud835\udf03. The ball accelerates downward due to gravity, and its motion stops upon hitting the ground, considering only the effect of gravity.\n\nParameter Settings\nThe variables defined here include size, v0, theta, L, g, t, dt, and their purposes are described in the comments of the respective lines. A new function introduced here is:\n\nradians(x)\n\nThis function converts the unit of x from degrees to radians (rad), and is included in the math library. Prior to using this function, the library must be imported, but since vpython already includes math, it is not necessary to import the math library separately. This is required because the trigonometric functions in Python accept values in radians. Another similar function is:\n\ndegrees(x)\n\nThis function converts the unit of x from radians to degrees.\n\nScreen Setup\nThe screen setup is very similar to Program 5-1, with the difference being in the initial position and speed of the ball:\n\nball = sphere(pos=vec(-L/2, 0, 0), radius=size, color=color.red, make_trail=True,\n              v=vec(v0*cos(theta), v0*sin(theta), 0), a=vec(0, -g, 0))\n\nThe ball starts at a height of 0, with initial velocities \n\n$v_x = v_0 \\cos \\theta$\n\n$v_y = v_0 \\sin \\theta$\n\nObject Motion\nThe object motion part is very similar to the horizontal projectile motion program. The difference is that the animation stops when the ball hits the floor. Thus, the condition set in the while loop is:\n\nball.pos.y - floor.pos.y >= size\nAfter the while loop ends, the flight time t and the horizontal range R are printed. You can manually change the values of v0 or theta to observe changes in t and R.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Speed_I as a cyber input variable, set Speed_I=30\n\n(2) Speed_I is the initial velocity of the ball. When Speed_I changes to a new value, the initial velocity of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math and time.",
      "output": "from vpython import *\n\n# Parameter Settings\nsize = 0.1  # ball radius\nSpeed_I = 30  # initial velocity\ntheta = 30  # launch angle (in degrees)\nL = 10.0  # length of the floor\ng = 9.8  # gravitational acceleration\nt = 0  # initial time\ndt = 0.001  # time step\n\ntheta = radians(theta)  # convert theta from degrees to radians\n\n# Screen Setup\nfloor = box(length=L, height=0.01, width=2, color=color.blue)  # create the floor\nball = sphere(pos=vec(-L/2, 0, 0), radius=size, color=color.red, make_trail=True,\n              v=vec(Speed_I*cos(theta), Speed_I*sin(theta), 0), a=vec(0, -g, 0))  # create the ball\n\n# Object Motion\nwhile ball.pos.y - floor.pos.y >= size:  # while the ball is above the floor\n    rate(1000)  # run 1000 times per real second\n    ball.v += ball.a*dt  # update velocity\n    ball.pos += ball.v*dt  # update position\n    t += dt  # update time\n\n# print the flight time and the horizontal distance\nprint(\"Flight time = \", t, \" s\")\nprint(\"Horizontal range = \", ball.pos.x + L/2, \" m\")",
      "mode": "initial",
      "timestamp": "2024-07-23 22:37:33",
      "serial_number": 1
    },
    {
      "input": "Please update the following program based on this instruction: The ball is stationary. Please fix it.\n\nfrom vpython import *\n\n# Parameter Settings\nsize = 0.1  # ball radius\nSpeed_I = 30  # initial velocity\ntheta = 30  # launch angle (in degrees)\nL = 10.0  # length of the floor\ng = 9.8  # gravitational acceleration\nt = 0  # initial time\ndt = 0.001  # time step\n\ntheta = radians(theta)  # convert theta from degrees to radians\n\n# Screen Setup\nfloor = box(length=L, height=0.01, width=2, color=color.blue)  # create the floor\nball = sphere(pos=vec(-L/2, 0, 0), radius=size, color=color.red, make_trail=True,\n              v=vec(Speed_I*cos(theta), Speed_I*sin(theta), 0), a=vec(0, -g, 0))  # create the ball\n\n# Object Motion\nwhile ball.pos.y - floor.pos.y >= size:  # while the ball is above the floor\n    rate(1000)  # run 1000 times per real second\n    ball.v += ball.a*dt  # update velocity\n    ball.pos += ball.v*dt  # update position\n    t += dt  # update time\n\n# print the flight time and the horizontal distance\nprint(\"Flight time = \", t, \" s\")\nprint(\"Horizontal range = \", ball.pos.x + L/2, \" m\")",
      "output": "from vpython import *\n\n# Parameter Settings\nsize = 0.1  # ball radius\nSpeed_I = 30  # initial velocity\ntheta = 30  # launch angle (in degrees)\nL = 10.0  # length of the floor\ng = 9.8  # gravitational acceleration\nt = 0  # initial time\ndt = 0.001  # time step\n\ntheta = radians(theta)  # convert theta from degrees to radians\n\n# Screen Setup\nfloor = box(length=L, height=0.01, width=2, color=color.blue)  # create the floor\nball = sphere(pos=vec(-L/2, size, 0), radius=size, color=color.red, make_trail=True,\n              v=vec(Speed_I*cos(theta), Speed_I*sin(theta), 0), a=vec(0, -g, 0))  # create the ball\n\n# Object Motion\nwhile ball.pos.y - floor.pos.y >= size:  # while the ball is above the floor\n    rate(1000)  # run 1000 times per real second\n    ball.v += ball.a*dt  # update velocity\n    ball.pos += ball.v*dt  # update position\n    t += dt  # update time\n\n# print the flight time and the horizontal distance\nprint(\"Flight time = \", t, \" s\")\nprint(\"Horizontal range = \", ball.pos.x + L/2, \" m\")",
      "mode": "modification",
      "timestamp": "2024-07-23 22:48:34",
      "serial_number": 2
    }
  ]
}