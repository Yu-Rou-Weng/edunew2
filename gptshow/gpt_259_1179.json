{
  "session_id": 1179,
  "log": [
    {
      "input": "1. Screen Settings: Set the canvas width to 700 and height to 400. Do not change the canvas size. 2. Object Motion & Parameter Settings: Create a VPython animation to illustrate the following physics experiment: # **Horizontal Projectile Motion** A small ball is launched horizontally from a height \\( h \\) with an initial velocity \\( v_0 \\). The ball accelerates downward under the influence of gravity and bounces upon hitting the ground. Only the effect of gravity is considered, and the collision between the ball and the ground is elastic. Draw the ball and floor. Let the ball move for 3 seconds and then stop. Do not resize the scene. The center point of the canvas needs to be set correctly, so the writing order of Parameter Settings of the program needs to be after Screen Settings.",
      "output": "scene.width = 700\nscene.height = 400\n\nh = 5 # initial height\nv0 = 10 # initial velocity\n\nball = sphere(pos=vector(0, h, 0), radius=0.5, color=color.blue, make_trail=True)\nfloor = box(pos=vector(0, 0, 0), size=vector(20, 0.1, 10), color=color.green)\n\nt = 0\ndt = 0.01\n\nwhile t < 3:\n    rate(100)\n    ball.pos.x += v0 * dt\n    ball.pos.y -= 0.5 * 9.81 * (t ** 2) * dt\n    t += dt\n\n    if ball.pos.y <= 0:\n        ball.pos.y = 0\n        v0 *= -1\n\n    t += dt",
      "mode": "initial",
      "timestamp": "2024-12-28 13:39:45",
      "serial_number": 1
    },
    {
      "input": "# Velocity Selector## Description of Physical Motion\u00a0\u00a0A velocity selector is a device used to filter charged particles with specific velocities. The basic structure consists of two parallel charged plates generating a uniform downward electric field, combined with a perpendicular magnetic field directed into the plane of the paper. When positively charged particles enter the velocity selector horizontally from the left at speed \\(v\\), they experience a downward electric force and an upward magnetic force. If these forces cancel out (resulting in zero net force), the particle moves at a constant velocity in a straight line.\u00a0\u00a0By adding a blocking plate with a small aperture on the right, only particles moving in a straight line can pass through. This allows the velocity of the particles passing through to be controlled by adjusting the strengths of the electric and magnetic fields.\u00a0\u00a0### Key Simulation Features (Program 20-1)- Visualizes the electric field, magnetic field, parallel charged plates, and the trajectory of a charged particle.- The particle stops moving upon collision with the charged plates.The simulation clearly demonstrates the motion of particles under various force combinations, even with adjusted parameters to simplify visualization (e.g., increased particle mass to reduce acceleration).\u00a0\u00a0## Conclusion\u00a0\u00a0The velocity selector simulation effectively illustrates the interplay between electric and magnetic forces on charged particles, making it an excellent educational tool to understand particle motion dynamics in electric and magnetic fields.",
      "output": "from vpython import *\n\n# Constants\nq = 1.6e-19  # Charge of the particle (C)\nm = 1e-6 * 9.11e-31  # Mass of the particle (kg)\nv = 1e5  # Initial velocity of the particle (m/s)\nB = 1  # Magnetic field strength (T)\nE = 1  # Electric field strength (V/m)\nL = 1  # Length of the plates (m)\nd = 0.1  # Separation between the plates (m)\n\n# Create charged plates\nplate1 = box(pos=vector(-L/2, 0, 0), size=vector(0.01, L, L), color=color.red)\nplate2 = box(pos=vector(L/2, 0, 0), size=vector(0.01, L, L), color=color.blue)\n\n# Create blocking plate with aperture\nblocking_plate = box(pos=vector(0.5, 0, 0), size=vector(0.01, L, L), color=color.green)\n\n# Create particle\nparticle = sphere(pos=vector(-L/2, -d/2, 0), radius=0.01, color=color.orange, v=vector(v, 0, 0))\n\n# Calculate forces on the particle\ndef calculate_force():\n    F_electric = q * E\n    F_magnetic = q * v * B\n    return F_electric, F_magnetic\n\n# Time evolution\ndt = 0.001\nt = 0\nwhile particle.pos.x < blocking_plate.pos.x:\n    rate(1000)\n    \n    F_electric, F_magnetic = calculate_force()\n    net_force = F_electric - F_magnetic\n    acceleration = net_force / m\n    \n    particle.v.x += acceleration * dt\n    particle.pos.x += particle.v.x * dt\n    t += dt",
      "mode": "initial",
      "timestamp": "2024-12-29 23:02:51",
      "serial_number": 1
    }
  ]
}