{
  "session_id": 581,
  "log": [
    {
      "input": "Oblique Projectile Motion: Ball Stops upon Landing, with Air Resistance\n\nA ball is thrown from the ground with an initial velocity v0 and angle \ud835\udf03. The ball accelerates downward due to gravity, and we also consider the effects of gravity and air resistance, where $f = -b v$ and b = 0.1. Simultaneously, plot the trajectories of the ball considering air resistance and without considering air resistance.\n\nParameter Settings\nThe program for oblique projectile motion with air resistance is similar to the one for oblique projectile motion without air resistance, but it includes the addition of the ball's mass m and the air resistance coefficient b. To record the flight time of the ball, we have added four variables: s1, s2, t1, and t2.\n\nDisplay Settings\nTo contrast with the ideal situation without air resistance, it is necessary to plot two balls, ball with air resistance and ball2 under ideal conditions. Since the acceleration of ball is dependent on its velocity, it can be set within the while loop.\n\nObject Motion\nTo ensure that both balls stop moving after they hit the floor, the condition set in the while loop is:\n\nball.pos.y - floor.pos.y >= size or ball2.pos.y - floor.pos.y >= size\nAs ball needs to consider air resistance, it must include:\n\nf = -b*ball.v\nball.a = vector(0, -g, 0) + f/m\nCalculate the air resistance using the original velocity, then substitute into $F = ma$ to update the acceleration.\n\nTo record the flight time, initially set the states s1 and s2 to False. When the ball first contacts the floor, change the state to True and store the time in t1 and t2.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Speed_I as a cyber input variable, set Speed_I=30\n\n(2) Speed_I is the initial velocity of the ball. When Speed_I changes to a new value, the initial velocity of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math and time.",
      "output": "from vpython import *\n\n# parameter settings\nsize = 0.25\nheight = 0.0\ng = 9.8\nb = 0.1\nm = 0.2\ntheta = 60 * pi / 180\nSpeed_I = 30\nv0 = vector(Speed_I * cos(theta), Speed_I * sin(theta), 0)\nfloor = box(length=30, height=0.01, width=10, color=color.green)\n\n# create balls\nball = sphere(pos=vector(-15, height, 0), v=v0, radius=size, color=color.red)\nball2 = sphere(pos=vector(-15, height, 0), v=v0, radius=size, color=color.yellow)\n\n# motion\ns1 = False\ns2 = False\n\nwhile ball.pos.y - floor.pos.y >= size or ball2.pos.y - floor.pos.y >= size:\n    rate(200)\n    if not(s1):\n        if ball.pos.y - floor.pos.y <= size:\n            s1 = True\n            t1 = t\n    if not(s2):\n        if ball2.pos.y - floor.pos.y <= size:\n            s2 = True\n            t2 = t\n    if not(s1):\n        f = -b * ball.v\n        ball.a = vector(0, -g, 0) + f / m\n        ball.v += ball.a * dt\n        ball.pos += ball.v * dt\n    if not(s2):\n        ball2.v += vector(0, -g, 0) * dt\n        ball2.pos += ball2.v * dt",
      "mode": "initial",
      "timestamp": "2024-07-24 00:46:05",
      "serial_number": 1
    }
  ]
}