{
  "session_id": 739,
  "log": [
    {
      "input": "Free fall, the ball bounces when it hits the ground, with a coefficient of restitution e.\n\nWith the addition of gravity, the objective is to simulate the ball accelerating downwards from a certain height and bouncing upon hitting the ground, with a coefficient of restitution e.\n\nThe code for \"Free fall, the ball bounces when it hits the ground, with a coefficient of restitution e\" is almost identical to \"Free fall, the ball bounces when it hits the ground,\" except for the differences described below.\n\nSince the collision between the ball and the floor is not perfectly elastic, we define the coefficient of restitution:\n\nCoefficient of restitution definition:\n\nSince the collision between the ball and the floor is not perfectly elastic, the coefficient of restitution is defined as:\n$$ e = \\frac{v'}{v} $$\nwhere:\n- \ud835\udc63 is the velocity before the collision\n- \ud835\udc63' is the velocity after the collision\n\nCollision code modification:\n\nWhen a collision occurs, the code executed changes to:\n\nball.v.y = -ball.v.y * e\n\nCounting collision occurrences:\nTo count the number of times the ball hits the floor, and to stop the program after 20 collisions, add the variables:\n\ni = 0 (number of times the ball hits the floor, default is 0)\nN = 20 (the maximum number of floor collisions after which the operation stops)\nModify the while loop condition to i < N, and increment i by 1 each time a collision occurs.\n\nAccurate collision conditions:\nTo make the collision conditions with the floor more precise, consider the thickness of the floor, hence the if condition changes to:\n\nif ball.pos.y - floor.pos.y <= size + 0.5 * floor.height and ball.v.y < 0:\n\nIn the above formula, floor.height is used to read the height value of the object floor.\n\nCyber Input Variable Mapping Information:\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Parameter settings\nsize = 1 \nheight = 15 \nv0 = 5 \ng = 9.8 \ndt = 0.001 \ne = 0.9 \ni = 0 \nN = 20\n\n# Creating objects\nfloor = box(pos=vec(0, 0, 0), length=30, height=0.01, width=10, color=color.blue)\nball = sphere(pos=vec(0, height, 0), radius=size, color=color.red)\nball.v = vec(0, v0, 0)\n\n# Animation\nwhile i < N:\n    rate(1000)\n    ball.pos += ball.v*dt\n    if ball.pos.y - floor.pos.y <= size + 0.5*floor.height and ball.v.y < 0:\n        i += 1 \n        ball.v.y = -ball.v.y*e \n    else:\n        ball.v.y -= g*dt",
      "mode": "initial",
      "timestamp": "2024-07-25 14:54:42",
      "serial_number": 1
    }
  ]
}