{
  "session_id": 741,
  "log": [
    {
      "input": "Oblique Projectile Motion\n\nA small ball is thrown from the ground with an initial velocity \\( v_0 \\) and an angle of elevation \\( \\theta \\). The ball accelerates downwards due to gravity and stops moving when it hits the ground, considering only the effect of gravity.\n\nParameter Settings\nThe defined variables include size, \\( v_0 \\), theta, L, g, t, dt, with their purposes already noted in the comments of the corresponding lines. Here, a new function is introduced:\n\nradians(x)\n\nThis function converts the unit of \\( x \\) from degrees to radians (rad), and is included in the math library. Although the library needs to be imported before use, vpython already includes math, so there is no need to import it separately. This is necessary because Python's trigonometric functions take inputs in radians. Another similar function is:\n\ndegrees(x)\n\nThis function converts the unit of \\( x \\) from radians to degrees.\n\nScreen Setting\nThe screen setting is very similar to Program 5-1, with the difference being the initial position and velocity of the ball:\n\n```python\nball = sphere(pos=vec(-L/2, 0, 0), radius=size, color=color.red, make_trail=True,\n              v=vec(v0*cos(theta), v0*sin(theta), 0), a=vec(0, -g, 0))\n```\n\nThe ball starts at a height of 0, with initial velocities:\n\\[ v_x = v_0 \\cos(\\theta) \\]\n\\[ v_y = v_0 \\sin(\\theta) \\]\n\nMotion of the Object\nThe motion of the object is very similar to the horizontal projectile program. The difference is that the animation stops when the ball hits the floor. Therefore, the condition set in the while loop is:\n\\[ ball.pos.y - floor.pos.y \\geq \\text{size} \\]\n\nAfter the while loop ends, the flight time \\( t \\) and the horizontal range \\( R \\) are printed. The values of \\( v_0 \\) or \\( \\theta \\) can be manually modified to observe the changes in \\( t \\) and \\( R \\).\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Speed_I as a cyber input variable, set Speed_I=30.\n\n(2) Speed_I is the initial velocity of the ball. When Speed_I changes to a new value, the initial velocity of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# parameter settings\nsize = 0.5  # ball radius\nSpeed_I = 30  # initial velocity\ntheta = 60  # launch angle\nL = 50  # length of the floor\ng = 9.8  # gravitational acceleration\nt = 0  # start time\ndt = 0.001  # time interval\n\n# convert the launch angle to radians\ntheta = radians(theta)\n\n# create objects\nfloor = box(length=L, height=0.01, width=10, color=color.green)\nball = sphere(\n    pos=vec(-L/2, 0, 0),\n    radius=size,\n    color=color.red,\n    make_trail=True,\n    v=vec(Speed_I*cos(theta), Speed_I*sin(theta), 0),\n    a=vec(0, -g, 0),\n)\n\n# motion\nwhile ball.pos.y >= 0:\n    rate(1000)\n    ball.v += ball.a*dt\n    ball.pos += ball.v*dt\n    t += dt\n\n# print the results\nprint('Flight time =', t, 's')\nprint('Range =', ball.pos.x + L/2, 'm')",
      "mode": "initial",
      "timestamp": "2024-07-25 15:24:17",
      "serial_number": 1
    }
  ]
}