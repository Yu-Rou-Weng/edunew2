{
  "session_id": 881,
  "log": [
    {
      "input": "Please write a Vpython program for \"Free Falling Two Ball Collision\"\n\nOne-Dimensional Elastic Collision Velocity Formula\n\nAssuming two particles have masses \\( m_1 \\) and \\( m_2 \\), with initial velocities \\( v_1 \\) and \\( v_2 \\) respectively. The velocities after the collision will be \\( v_1' \\) and \\( v_2' \\), given by:\n\n\\[ v_1' = \\frac{m_1 - m_2}{m_1 + m_2} v_1 + \\frac{2m_2}{m_1 + m_2} v_2 \\]\n\n\\[ v_2' = \\frac{2m_1}{m_1 + m_2} v_1 + \\frac{m_2 - m_1}{m_1 + m_2} v_2 \\]\n\nWhere:\n- \\( v_1' \\) is the velocity of the object with mass \\( m_1 \\) after the collision\n- \\( v_2' \\) is the velocity of the object with mass \\( m_2 \\) after the collision\n- \\( v_1 \\) is the velocity of the object with mass \\( m_1 \\) before the collision\n- \\( v_2 \\) is the velocity of the object with mass \\( m_2 \\) before the collision\n\nThere are two balls, one red and one green, and a floor. The red ball has a mass of 2 and a radius of 2, while the green ball has a mass of 1 and a radius of 1. The green ball is stacked on top of the red ball. Both balls are released from a height of 15 above the floor and begin to accelerate downwards due to gravity. When the red ball hits the ground, it bounces back, while the green ball follows the one-dimensional elastic collision rules. If the red and green balls collide again, the mass of the red ball, the velocity of the red ball in the y-direction, the mass of the green ball, and the velocity of the green ball in the y-direction are substituted into the one-dimensional elastic collision formula to calculate the post-collision velocities, which are then reassigned to the red ball's velocity in the y-direction and the green ball's velocity in the y-direction.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Constants\ng = 9.8\nh = 15\n\n# Variables\nRadius_I = 1  \nRed_Ball_Radius = 2 * Radius_I\nGreen_Ball_Radius = Radius_I\n\nRed_Ball_Mass = 2\nGreen_Ball_Mass = 1\n\n# Sphere objects\nred_ball = sphere(pos=vector(0, h, 0), radius=Red_Ball_Radius, color=color.red, make_trail=True)\ngreen_ball = sphere(pos=vector(0, h + Green_Ball_Radius + Red_Ball_Radius, 0), radius=Green_Ball_Radius, color=color.green, make_trail=True)\n\n# Initial velocities\nred_ball.v = vector(0, 0, 0)\ngreen_ball.v = vector(0, 0, 0)\n\n# Floor\nfloor = box(pos=vector(0, 0, 0), size=vector(10, 0.01, 10), color=color.white)\n\ndt = 0.01\nt = 0\n\nwhile True:\n    rate(100)\n    # Gravity\n    red_ball.v.y = red_ball.v.y - g * dt\n    green_ball.v.y = green_ball.v.y - g * dt\n\n    # Motion\n    red_ball.pos.y = red_ball.pos.y + red_ball.v.y * dt\n    green_ball.pos.y = green_ball.pos.y + green_ball.v.y * dt\n\n    # Red ball bounce\n    if red_ball.pos.y <= Red_Ball_Radius:\n        red_ball.v.y = abs(red_ball.v.y)\n\n    # Collision\n    if abs(green_ball.pos.y - red_ball.pos.y) <= Red_Ball_Radius + Green_Ball_Radius:\n        v1 = red_ball.v.y\n        v2 = green_ball.v.y\n\n        red_ball.v.y = ((Red_Ball_Mass - Green_Ball_Mass) / (Red_Ball_Mass + Green_Ball_Mass)) * v1 + ((2 * Green_Ball_Mass) / (Red_Ball_Mass + Green_Ball_Mass)) * v2\n        green_ball.v.y = ((2 * Red_Ball_Mass) / (Red_Ball_Mass + Green_Ball_Mass)) * v1 + ((Green_Ball_Mass - Red_Ball_Mass) / (Red_Ball_Mass + Green_Ball_Mass)) * v2",
      "mode": "initial",
      "timestamp": "2024-07-29 16:13:02",
      "serial_number": 1
    }
  ]
}