{
  "session_id": 687,
  "log": [
    {
      "input": "Mass Spectrometer: Automated Run for 5 Types of Particles Using a \"for\" Loop\n\nFive types of particles, namely carbon atom ($^{12}$C), oxygen ion ($^{16}$O$^{2-}$), sodium ion ($^{23}$Na$^+$), magnesium ion ($^{24}$Mg$^{2+}$), and chloride ion ($^{35}$Cl$^-$), enter a uniform magnetic field B at the same velocity and perpendicular direction, as illustrated in the diagram. Assuming gravity is negligible, the diagram tracks labeled 1, 2, 3, 4, and 5 respectively correspond to which particles?\n\nThis problem comes from the 1995 Joint University Entrance Examination in Japan. Although it's quite dated, this question is still found in many reference books. As particles enter the magnetic field from below, positively charged particles experience a magnetic force to the left, negatively charged particles to the right, and neutral particles experience no magnetic force. Assuming the magnetic force acts as the centripetal force, the particles perform uniform circular motion in the magnetic field:\n$$\nqvB = m \\cdot \\frac{v^2}{R} \\Rightarrow R = \\frac{mv}{qB} \\propto \\frac{m}{q}\n$$\n\nThus, the answer to the problem is $^{23}$Na$^+$, $^{24}$Mg$^{2+}$, $^{12}$C, $^{16}$O$^{2-}$, $^{35}$Cl$^-$. Next, we will attempt to use VPython to graphically represent the motion of these particles in a mass spectrometer.\n\nProgramming Part:\nThe program for the mass spectrometer, involving a \"for\" loop to automatically process the 5 types of particles, is similar to another one with minor modifications:\n\nParticle labels data is added using the labels variable. Since VPython supports HTML syntax, it's possible to create superscript and subscript effects. Text between `<sup>` and `</sup>` becomes superscript, and text between `<sub>` and `</sub>` becomes subscript.\n\nA \"for\" loop is used to read the names of the particles, and the particle generation and motion segment's \"while\" loop are enclosed within this \"for\" loop, with a label added to each particle after the \"while\" loop completes.\n\nSimulation Results:\nBelow is a screenshot from the execution of program 23-2, showing that the radius of particle revolution is directly proportional to m/q.\n\nScreenshot of program 23-2:\n![image](https://hackmd.io/_uploads/HkDwi3aO0.png)\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Constants\nB = vector(0, 0, 1)  # Magnetic field\nv0 = vector(1, 0, 0)  # Initial velocity\n\n# Define particles\nparticles = [(23, 1, \"<sup>23</sup>Na<sup>+</sup>\"),\n             (24, 2, \"<sup>24</sup>Mg<sup>2+</sup>\"),\n             (12, 0, \"<sup>12</sup>C\"),\n             (16, -2, \"<sup>16</sup>O<sup>2-</sup>\"),\n             (35, -1, \"<sup>35</sup>Cl<sup>-</sup>\")]\n\nscene = canvas(title=\"Mass Spectrometer\")\nfor m, q, lbl in particles:\n    ball = sphere(pos=vector(0, 0, 0), radius=1, color=color.red, make_trail=True)\n    ball.m = m\n    ball.q = q\n    ball.v = v0\n    label(pos=ball.pos, text=lbl, yoffset=20)\n\n    while mag(ball.pos) < 10:\n        rate(100)\n        F = q * cross(ball.v, B)\n        ball.v = ball.v + F / m\n        ball.pos = ball.pos + ball.v",
      "mode": "initial",
      "timestamp": "2024-07-24 10:22:34",
      "serial_number": 1
    }
  ]
}