{
  "session_id": 677,
  "log": [
    {
      "input": "Magnetic Field Generated by a Current-Carrying Solenoid\n\nChapter 8 of elective physics, \"The Magnetic Effect of Current,\" introduces the Biot-Savart law, which is used to calculate the magnetic field produced by a small segment of current-carrying wire at a point in space. The equation is:\n$$\nd\\vec{B} = \\frac{\\mu_0}{4\\pi} \\frac{I d\\vec{L} \\times \\hat{r}}{r^2} \\Rightarrow dB = \\frac{\\mu_0}{4\\pi} \\frac{I dL \\sin{\\theta}}{r^2}\n$$\n\nUsing the Biot-Savart law, we can calculate the magnetic field magnitude at a perpendicular distance $r$ from a long straight current-carrying wire as:\n$$\nB = \\frac{\\mu_0 I}{2\\pi r}\n$$\n\nThe magnetic field magnitude at the center of a current-carrying loop with radius $r$ is:\n$$\nB = \\frac{\\mu_0 I}{2r}\n$$\n\nThe magnetic field magnitude at the center of a solenoid with $n$ turns per unit length is:\n$$\nB = \\mu_0 n I\n$$\n\nThe magnetic field is distributed in space, but the diagrams in the book are all in two dimensions; therefore, I want to use VPython to visualize the strength and direction of the magnetic field in space.\n\nProgramming Part\n\nThe program for generating the magnetic field of a current-carrying solenoid is based on modifications from the program for a current-carrying loop. The differences are described below.\n\nNew variables include the radius of the small spheres as point_size, the radius of the wire as seg_size, the radius of the solenoid as r, and the number of turns of the solenoid as num.\n\nA for loop arranges 500 small spheres into a helical line and stores the data in the list points.\n\nAnother for loop reads two adjacent small spheres from the list points, calculates the length and direction of the line connecting the spheres, and starts drawing the wire from the midpoint of the two spheres, storing this data in the list segs.\n\nIllustration to be drawn:\n![image](https://hackmd.io/_uploads/r1QWA3TuC.png)\n(1) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\nscene = canvas(width=600, height=600)\nscene.range = 1.5\nscene.title = \"Magnetic Field Generated by Current-Carrying Solenoid\"\nscene.forward = vector(-1,-1,-1)\n\nI = 5e-3  # current in the solenoid\nmu = 4*pi*1e-7  # magnetic permeability\nB_scale = 3e-5  # scale for the magnetic field arrow length\nr = 1.0  # radius of the solenoid\nnum = 20  # number of turns of the solenoid\ndl = 2*pi*r/100  # length element of the solenoid wire\nseg_size = 0.03  # radius of the wire\npoint_size = 0.01  # radius of the small spheres\nstep = 0.2  # distance between the field points\nx_max = 1.5  # x boundary of the field points\ny_max = 1.5  # y boundary of the field points\nz_max = 1.5  # z boundary of the field points\n\npoints = [sphere(pos=vector(r*cos(2*pi*n/num), r*sin(2*pi*n/num), n/num),\n                 radius=point_size, color=color.yellow)\n          for n in range(500)]\nsegs = [cylinder(pos=(points[n].pos+points[n+1].pos)/2,\n                 axis=points[n+1].pos-points[n].pos,\n                 size=seg_size, color=color.red)\n        for n in range(len(points)-1)]\nB_points = [arrow(pos=vector(x, y, z),\n                  axis=vector(0, 0, 0),\n                  color=color.cyan)\n            for x in arange(-x_max, x_max, step)\n            for y in arange(-y_max, y_max, step)\n            for z in arange(-z_max, z_max, step) if vector(x, y, z).mag > r+0.2]\n\nfor B_point in B_points:\n    B = vector(0, 0, 0)\n    for seg in segs:\n        r = B_point.pos-seg.pos\n        if r.mag < seg.size:\n            B = vector(0, 0, 0)\n            break\n        B = B + mu/4/pi*I*cross(seg.axis, r.norm())/r.mag**2\n    if B.mag > 0:\n        B_point.axis = B.norm()*B_scale",
      "mode": "initial",
      "timestamp": "2024-07-24 08:58:22",
      "serial_number": 1
    }
  ]
}