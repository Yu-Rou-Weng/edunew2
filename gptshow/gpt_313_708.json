{
  "session_id": 708,
  "log": [
    {
      "input": "Magnetic Fields Generated by Two Current-Carrying Coils\n\nIn the elective physics course, Chapter 8 introduces the magnetic effects of current and discusses the Biot-Savart law, which is used to calculate the magnetic field produced by a small segment of current-carrying wire at a certain point in space. The equation is given by:\n$$\nd\\vec{B} = \\frac{\\mu_0}{4\\pi} \\frac{I d\\vec{L} \\times \\hat{r}}{r^2} \\Rightarrow dB = \\frac{\\mu_0}{4\\pi} \\frac{I dL \\sin{\\theta}}{r^2}\n$$\n\nUsing the Biot-Savart law, the magnetic field magnitude at a perpendicular distance $r$ from a long straight current-carrying wire can be calculated as:\n$$\nB = \\frac{\\mu_0 I}{2\\pi r}\n$$\n\nThe magnetic field magnitude at the center of a current-carrying coil with radius $r$ is:\n$$\nB = \\frac{\\mu_0 I}{2r}\n$$\n\nThe magnetic field magnitude at the center of a solenoid with $n$ turns per unit length is:\n$$\nB = \\mu_0 n I\n$$\n\nMagnetic fields are distributed in space, but the illustrations in the book are all in two dimensions, which is why I want to use VPython to visualize the strength and direction of the magnetic field in three-dimensional space.\n\nProgramming Section\n\nThe program \"Magnetic Field Generated by Two Coils\" is primarily designed to illustrate the magnetic field of a Helmholtz coil. It builds upon the program \"Magnetic Field Generated by a Coil\" by adding another coil. The differences are highlighted below.\n\nAn additional variable, delta, is defined to adjust the distance between the two coils, which are positioned at (0, delta, 0) and (0, -delta, 0), respectively.\n\nThe placement of small spheres after dividing the rings remains the same, but the data for the spheres from the two divided coils are stored in two separate lists.\n\nWhen calculating the magnetic field, data from segs1 and segs2 are input into a custom function to compute the total magnetic field.\n\nIllustration to be drawn:\n\n![image](https://hackmd.io/_uploads/SJfAahpdR.png)\n(1) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Constants\nmu = 4*pi*1E-7 # permeability of free space\nI = 1.0 # current in the wire\nN = 100 # number of elements\nr_coil = 1.0 # radius of coil\ndelta = 1.1*r_coil # distance between the coils\n\n# Create two coils \ncoil1 = ring(pos=vector(0,delta,0), axis=vector(0,1,0), radius=r_coil, thickness=0.01)\ncoil2 = ring(pos=vector(0,-delta,0), axis=vector(0,1,0), radius=r_coil, thickness=0.01)\n\n# Divide each coil into small segments and store their positions in segs1 and segs2\nangle = 2*pi/N # angle between each segment\nsegs1 = [coil1.pos + vector(r_coil*cos(i*angle), delta, r_coil*sin(i*angle)) for i in range(N)]\nsegs2 = [coil2.pos + vector(r_coil*cos(i*angle), -delta, r_coil*sin(i*angle)) for i in range(N)]\n\n# Create small spheres at the positions of the segments\nspheres1 = [sphere(pos=segs1[i], radius=0.05, color=color.red) for i in range(N)]\nspheres2 = [sphere(pos=segs2[i], radius=0.05, color=color.red) for i in range(N)]\n\n# Define function to calculate the magnetic field at a given point due to a small current element\ndef Bfield(seg, loc):\n    r = loc - seg.pos\n    dB = (mu/4*pi)*I*cross(seg.dL, r.norm())/(mag(r)**2)\n    return dB\n\n# Calculate the total magnetic field at the center of the coils\nB = vector(0,0,0)\nfor seg in segs1:\n    seg.dL = r_coil*vector(-sin(angle),0,cos(angle)) # current element for coil 1\n    B += Bfield(seg, vector(0,0,0))\nfor seg in segs2:\n    seg.dL = r_coil*vector(-sin(angle),0,cos(angle)) # current element for coil 2\n    B += Bfield(seg, vector(0,0,0))\n\n# Create an arrow to represent the total magnetic field\nB_arrow = arrow(pos=vector(0,0,0), axis=1E5*B, color=color.yellow)",
      "mode": "initial",
      "timestamp": "2024-07-24 12:47:17",
      "serial_number": 1
    }
  ]
}