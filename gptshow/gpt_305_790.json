{
  "session_id": 790,
  "log": [
    {
      "input": "# Electron Charge-to-Mass Ratio\n\nThe experimental setup for measuring the electron charge-to-mass ratio is shown below. Its appearance and velocity selector are very similar; thus, by slightly modifying the program for the \"Velocity Selector,\" we can create an animation for the electron charge-to-mass ratio experiment.\n### Schematic of the Experimental Setup\n![image](https://hackmd.io/_uploads/SkTFu36OR.png)\n\n## Theoretical Analysis\n\nRefer to the diagram above, where the particle has a mass $m$ and charge $q$, entering a downward uniform electric field $E$ with a horizontal velocity $v_0$ to the right. The length of the parallel charged plates is $L$, and the distance from the right side of the charged plates to the screen is $D$. Considering only the electrostatic force, the particle's upward acceleration in the electric field is\n$$\na = \\frac{qE}{m}\n$$\n\nThere are no external forces horizontally; motion is at a constant speed, so the time spent in the electric field is\n$$\nt_1 = \\frac{L}{v_0}\n$$\n\nThe upward displacement is\n$$\ny_1 = \\frac{1}{2} a t_1^2 = \\frac{1}{2} \\left( \\frac{qE}{m} \\right) \\left( \\frac{L}{v_0} \\right)^2\n$$\n\nThe upward velocity of the particle upon leaving the electric field is\n$$\nv_{y1} = a t_1 = \\frac{qEL}{mv_0}\n$$\n\nOutside the electric field, the particle moves in a straight line at a constant speed, and the time spent moving outside the field is\n$$\nt_2 = \\frac{D}{v_0}\n$$\n\nThe upward displacement outside the field is\n$$\ny_2 = v_{y1} t_2 = \\left( \\frac{qEL}{mv_0} \\right) \\left( \\frac{D}{v_0} \\right) = \\frac{qELD}{mv_0^2}\n$$\n\nThe total upward displacement is\n$$\ny = y_1 + y_2 = \\frac{qE}{2m} \\left( \\frac{L^2}{v_0^2} \\right) + \\frac{qELD}{mv_0^2} = \\frac{qEL(L + 2D)}{2mv_0^2}\n$$\n\nThe charge-to-mass ratio of the charged particle is\n$$\n\\frac{q}{m} = \\frac{2yv_0^2}{E L (L + 2D)}\n$$\n\nThe value of the electric field can be determined by the voltage and distance between the parallel charged plates, and the initial velocity $v_0$ can be controlled by the velocity selector. Thus, in the experiment, all data except for the charge-to-mass ratio can be measured.\n\n\nParameter Settings\n\nVariables are set for size, m, v0, q, V, d, L, E_field, t, dt, and their purposes are commented in the corresponding lines. To make the animation smoother, the particle's charge and mass are deliberately set very high.\n\n\nScreen Settings\nCreate the animation window, parallel charged plates, horizontal lines, and charged particles. The parallel charged plates are located between -L < x < 0.\n\nGenerate arrows and labels representing the electric and magnetic fields.\n\nGenerate arrows representing velocity and acceleration.\n\n\nObject Motion\nTo stop the animation when the charged particle reaches the screen or hits the parallel charged plates, the condition in the while loop is set to 0 < charge.pos.x < screen.pos.x - screen.length/2 - size or (charge.pos.x < 0 and abs(charge.pos.y) < d/2 - p1.height - size)\n(a) The function of the first group of conditions: The animation continues while the particle is between the electric field and the screen.\n(b) The function of the second group of conditions: The animation continues while the particle is in the electric field and does not hit the parallel charged plates.\n\nCalculate the resultant force on the charged particle; the electric field only exists between the parallel charged plates and is set to zero outside.\n\nUpdate the charged particle's acceleration, velocity, and position.\n\nUpdate arrows representing velocity and acceleration, drawing only their directions to prevent the animation from automatically shrinking.\n\nTo draw a horizontal line when the charged particle leaves the parallel charged plates, define variables xp and xc; xp is the particle's position at the previous moment, xc is the particle's current position. If xp < 0 and xc > 0, it indicates that the particle has just left the parallel charged plates, and the cylinder command is used to draw a parallel line.\n\nUpdate the time.\n\nSimulation Results\n\nHere are six different combinations of data and test results:\n\n1. v0 = 20, q = -2 \u00d7 10-9, V = 1, d = 0.1 \u21d2 Hits the parallel charged plates upward.\n![image](https://hackmd.io/_uploads/B1w6O2TdR.png)\n\n2. q = -1 \u00d7 10-9, other conditions the same as combination 1 \u21d2 Moves upward but does not hit the parallel charged plates.\n![image](https://hackmd.io/_uploads/Bkoa_naOC.png)\n\n3. v0 = 25, other conditions the same as combination 1 \u21d2 Moves upward but does not hit the parallel charged plates.\n![image](https://hackmd.io/_uploads/S11AunauA.png)\n\n4. q = 2 \u00d7 10-9, other conditions the same as combination 1 \u21d2 Hits the parallel charged plates downward.\n![image](https://hackmd.io/_uploads/S1NROhpO0.png)\n\n5. q = 1 \u00d7 10-9, other conditions the same as combination 1 \u21d2 Moves downward but does not hit the parallel charged plates.\n![image](https://hackmd.io/_uploads/ryY0OnTu0.png)\n\n6. v0 = 25, q = 2 \u00d7 10-9, other conditions the same as combination 1 \u21d2 Moves downward but does not hit the parallel charged plates.\n![image](https://hackmd.io/_uploads/rJpRO3TO0.png)\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Parameters\nm = 1E-10  # mass\nv0 = 25  # initial velocity\nq = 1E-7  # charge\nV = 10000  # voltage\nd = 0.05  # distance between plates\nL = 0.3  # length of plates\nD = 0.5  # distance to screen\nE_field = vector(0, -V/d, 0)  # electric field\n\n# Objects\nscene = canvas(width=800, height=800, background=vector(1, 1, 1))\ncharge = sphere(pos=vector(-L/2, 0, 0), radius=1E-2,\n                color=color.red, make_trail=True)\nscreen = box(pos=vector(D, 0, 0), size=vector(0.01, d, d), color=color.green)\np1 = box(pos=vector(-L/2, d/2, 0), size=vector(L, 0.01, d))\np2 = box(pos=vector(-L/2, -d/2, 0), size=vector(L, 0.01, d))\n\n# Initial conditions\nv = vector(v0, 0, 0)\na = vector(0, 0, 0)\nt = 0\ndt = 1E-5\nxp = -L/2\n\n# Animation\nwhile (0 < charge.pos.x < screen.pos.x - screen.length/2 - charge.radius) or \\\n        (charge.pos.x < 0 and abs(charge.pos.y) < d/2 - p1.height - charge.radius):\n    \n    # Calculate force\n    if charge.pos.x < 0:\n        F = q * E_field\n    else:\n        F = vector(0, 0, 0)\n        \n    # Update acceleration, velocity and position\n    a = F / m\n    v += a * dt\n    charge.pos += v * dt\n    \n    # Draw velocity and acceleration vectors\n    arrow(pos=charge.pos, axis=v/10, color=color.blue)\n    arrow(pos=charge.pos, axis=a/10, color=color.yellow)\n    \n    # Draw horizontal line when charge leaves electric field\n    xc = charge.pos.x\n    if xp < 0 and xc > 0:\n        cylinder(pos=vector(0, charge.pos.y, charge.pos.z), axis=vector(D, 0, 0), radius=0.001)\n    xp = xc\n    \n    # Update time\n    t += dt",
      "mode": "initial",
      "timestamp": "2024-07-25 22:07:53",
      "serial_number": 1
    }
  ]
}