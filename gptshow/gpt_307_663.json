{
  "session_id": 663,
  "log": [
    {
      "input": "Mass Spectrometer\n\nFive particles enter a uniform magnetic field B at the same speed and perpendicularly, demonstrating the trajectories as shown in the diagram below. Assume these five particles are: carbon atom ($^{12}$C), oxygen ion ($^{16}$O$^{2-}$), sodium ion ($^{23}$Na$^+$), magnesium ion ($^{24}$Mg$^{2+}$), and chlorine ion ($^{35}$Cl$^-$). Ignoring the effects of gravity, which trajectories labeled 1, 2, 3, 4, and 5 in the diagram respectively represent?\n\nParticle trajectories in a mass spectrometer:\n\n![image](https://hackmd.io/_uploads/HJuF5hp_0.png)\n\nThis is a question from the 1995 Joint University Entrance Examination in Japan. Though the question is quite old, it can still be found in various reference books. When particles with charge enter the magnetic field from above, positively charged particles experience a magnetic force to the left, negatively charged particles to the right, and neutral particles experience no magnetic force. If the magnetic force acts as the centripetal force for uniform circular motion in the magnetic field, then:\n$$\nqvB = m \\cdot \\frac{v^2}{R} \\Rightarrow R = \\frac{mv}{qB} \\propto \\frac{m}{q}\n$$\n\nHence, the correct identification of the trajectories is $^{23}$Na$^+$, $^{24}$Mg$^{2+}$, $^{12}$C, $^{16}$O$^{2-}$, $^{35}$Cl$^-$. This time, we will attempt to visualize the particles' motion in the mass spectrometer using VPython.\n\nSimulation Results\n\nBelow are the results for three different particles. Program 23-1 is for testing, entering one particle's data at a time and observing the results. Next, we will use a loop to draw the trajectories of all five particles.\n\nProgram 23-1: Screenshot for 12C\n![image](https://hackmd.io/_uploads/ByRi53a_A.png)\n\nProgram 23-1: Screenshot for 16O2-\n![image](https://hackmd.io/_uploads/rkyachadR.png)\n\nProgram 23-1: Screenshot for 23Na+\n![image](https://hackmd.io/_uploads/H1Eac3Td0.png)\n\nParameter Settings\nVariables are set for size, m, q, masses, charges, colors, particles, v0, L, B_field, t, dt, with their purposes annotated in the comments. To ensure smoother animations, the particles\u2019 electric charge and mass are deliberately set much higher.\n\nDisplay Settings\nCreating an animation window, metal plates.\nCreating charged particles; you can select a particle's name, and the program retrieves the particle data from masses, charges, colors.\nCreating arrows and labels indicating the magnetic field.\nCreating arrows representing velocity and acceleration.\n\nObject Motion\nThe conditions in the while loop are set as follows: (abs(particle.pos.x) < 0.1*size and particle.pos.y < L/2) or (abs(particle.pos.x) > 0 and particle.pos.y > p1.height/2 + size)\n(a) First condition: the animation continues as long as the particle has not deviated (-0.1size < x < 0.1size) and has not yet reached the top of the screen (particle.pos.y < L/2).\n(b) Second condition: the animation continues as long as the particle has deviated to the left or right (abs(particle.pos.x) > 0) and has not yet hit the metal plate (particle.pos.y > p1.height/2 + size).\n\nCalculate the net force on the charged particle, update the particle's acceleration, velocity, and position.\nUpdate the arrows representing velocity and acceleration, displaying only direction to avoid automatic shrinking of the animation.\nUpdate the time.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Parameter Settings\nsize = 0.2\nm = {'C':12, 'O':16, 'Na':23, 'Mg':24, 'Cl':35} # mass\nq = {'C':0, 'O':-2, 'Na':1, 'Mg':2, 'Cl':-1} # charge\nmasses = [m['Na'], m['Mg'], m['C'], m['O'], m['Cl']]\ncharges = [q['Na'], q['Mg'], q['C'], q['O'], q['Cl']]\ncolors = [color.yellow, color.green, color.blue, color.red, color.cyan]\nparticles = ['Na', 'Mg', 'C', 'O', 'Cl']\nv0 = vector(0, 1, 0)\nL = 5\nB_field = vector(0, 0, -1)\nt = 0\ndt = 0.001\n\n# Display Settings\nscene = canvas(width=800, height=800, center=vector(0,2,0), background=vector(0.5,0.5,0))\np1 = box(pos=vector(0,0,0), size=vector(2.2*size,0.02*size,2*size), color=color.blue)\np2 = box(pos=vector(0,L,0), size=vector(2.2*size,0.02*size,2*size), color=color.blue)\nB_arrow = arrow(pos=vector(0,L/2,0), axis=3*B_field, shaftwidth=0.1, color=color.orange)\nB_label = label(pos=vector(0,L/2,0), text='B', xoffset=20, yoffset=12, space=30, height=16, border=4, font='sans')\n\nfor i in range(5):\n    particle = sphere(pos=vector(-1.1*size+0.55*i*size,0,0), radius=size, m=masses[i], q=charges[i], v=v0, color=colors[i], make_trail=True)\n    v_arrow = arrow(pos=particle.pos, axis=particle.v, shaftwidth=0.05, color=color.magenta)\n    a_arrow = arrow(pos=particle.pos, axis=vector(0,0,0), shaftwidth=0.05, color=color.cyan)\n\n    # Object Motion\n    while (abs(particle.pos.x) < 0.1*size and particle.pos.y < L/2) or (abs(particle.pos.x) > 0 and particle.pos.y > p1.height/2 + size):\n        rate(1000)\n        \n        # Calculate the net force on the charged particle\n        F_net = particle.q*cross(particle.v, B_field)\n        \n        # Update the particle's acceleration, velocity, and position\n        a = F_net/particle.m\n        particle.v += a*dt\n        particle.pos += particle.v*dt\n        \n        # Update the arrows representing velocity and acceleration\n        v_arrow.pos = particle.pos\n        v_arrow.axis = particle.v\n        a_arrow.pos = particle.pos\n        a_arrow.axis = a\n        \n        # Update the time\n        t += dt",
      "mode": "initial",
      "timestamp": "2024-07-24 07:26:28",
      "serial_number": 1
    }
  ]
}