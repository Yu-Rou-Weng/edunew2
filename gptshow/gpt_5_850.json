{
  "session_id": 850,
  "log": [
    {
      "input": "1. Screen Settings\nSet the width of the canvas to 700 and the height to 400. Please draw the trajectory of the ball's movement. Do not adjust the size of the scene. The center point of the canvas must be set correctly, so the order of writing the Parameter Settings in the program should be after the Screen Settings.\n\n2. Object Motion & Parameter Settings\nPlease create a VPython animation of horizontal projectile motion: Launch a horizontal ball that bounces off the floor. Draw the ball and the floor. Assume that the ball undergoes an elastic collision with the ground, considering only the effect of gravity, meaning the ball accelerates downward under gravity and bounces upon hitting the ground. Let the ball's movement stop after 5 seconds.\n\n3. Cyber Input Variable Mapping Information:\n\n(1) Define and initialize a Cyber Input Variable named `Speed_I` with an initial value set to 5. This variable represents the speed of the ball.\n\n(2) During the animation, whenever the value of the `Speed_I` variable changes, the speed of the ball should immediately update to the new value of `Speed_I`.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Screen settings\ncanvas(width=700, height=400, center=vector(0,0,0))\n\n# Parameter settings\ng = 9.8 # acceleration due to gravity\ndt = 0.01 # time step\nt = 0 # initialize time\nball_radius = 0.2 # radius of the ball\nspeed_I = 5 # initial speed\n\n# Create objects\nfloor = box(length=4, height=0.01, width=4, color=color.green)\nball = sphere(pos=vector(0,0,0), radius=ball_radius, color=color.red, make_trail=True)\nball.velocity = vector(speed_I, 0, 0) # initial velocity\n\n# Animation\nwhile t < 5:\n    rate(100) # limit the number of loops per second\n    ball.velocity.y = ball.velocity.y - g*dt # update y-velocity\n    ball.pos = ball.pos + ball.velocity*dt # update position\n\n    if ball.pos.y < floor.pos.y + ball_radius: # check collision with floor\n        ball.velocity.y = -ball.velocity.y # reverse y-velocity (elastic collision)\n\n    t = t + dt # update time\n\n    # Cyber input variable mapping\n    ball.velocity.x = speed_I",
      "mode": "initial",
      "timestamp": "2024-08-15 23:21:12",
      "serial_number": 1
    }
  ]
}