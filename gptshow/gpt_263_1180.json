{
  "session_id": 1180,
  "log": [
    {
      "input": "1. Screen Settings: Set the canvas width to 700 and height to 400. Do not change the canvas size. 2. Object Motion & Parameter Settings: Create a VPython animation to illustrate the following physics experiment: ### One-Dimensional Elastic Collision One-dimensional elastic collision is covered in Chapter 4 of Mechanics 2 (old syllabus, Basic Physics 2B final chapter). In this scenario, two small balls are placed on a frictionless horizontal surface, with masses \\( m_1 \\) and \\( m_2 \\), and initial velocities \\( v_1 \\) and \\( v_2 \\), respectively. After the collision, the velocities of the two balls become \\( v_1' \\) and \\( v_2' \\). Assuming no external forces act during the collision, the system's momentum is conserved. If the collision does not result in energy loss, the total kinetic energy of the two balls before and after the collision remains the same: \\[ m_1 v_1^2 + m_2 v_2^2 = m_1 v_1'^2 + m_2 v_2'^2 \\] Dividing the above equation by the momentum equation yields the following formula for the velocities after the collision: \\[ v_1' = \\frac{(m_1 - m_2)}{(m_1 + m_2)} v_1 + \\frac{2 m_2}{(m_1 + m_2)} v_2 \\] \\[ v_2' = \\frac{2 m_1}{(m_1 + m_2)} v_1 + \\frac{(m_2 - m_1)}{(m_1 + m_2)} v_2 \\] These equations describe the velocities of two objects after a perfectly elastic collision, where both momentum and kinetic energy are conserved. --- #### One-Dimensional Elastic Collision Process The following programs demonstrate two methods: the first calculates the velocities after the collision directly using the formula, and the second introduces an ideal spring as a buffer between the blocks to visualize the entire collision process. *The calculations and visualizations are handled through a VPython-based simulation to demonstrate the elastic collision dynamics.*",
      "output": "scene.width = 700\nscene.height = 400\n\nball1 = sphere(pos=vector(-5, 0, 0), radius=0.5, color=color.blue, make_trail=True)\nball2 = sphere(pos=vector(5, 0, 0), radius=0.5, color=color.red, make_trail=True)\n\nball1.m = 1\nball2.m = 2\n\nball1.v = 2\nball2.v = -1\n\ndef collide(ball1, ball2):\n    v1 = ball1.v\n    v2 = ball2.v\n    m1 = ball1.m\n    m2 = ball2.m\n\n    ball1.v = ((m1 - m2) / (m1 + m2)) * v1 + (2 * m2 / (m1 + m2)) * v2\n    ball2.v = (2 * m1 / (m1 + m2)) * v1 + ((m2 - m1) / (m1 + m2)) * v2\n\nwhile True:\n    rate(60)\n    ball1.pos.x += ball1.v * 0.1\n    ball2.pos.x += ball2.v * 0.1\n\n    if ball1.pos.x + ball1.radius >= ball2.pos.x - ball2.radius:\n        collide(ball1, ball2)\n        ball1.v, ball2.v = ball2.v, ball1.v",
      "mode": "initial",
      "timestamp": "2024-12-26 18:04:37",
      "serial_number": 1
    }
  ]
}