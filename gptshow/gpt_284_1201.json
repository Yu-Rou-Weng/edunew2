{
  "session_id": 1201,
  "log": [
    {
      "input": "1. Screen Settings:\nSet the canvas width to 700 and height to 400. Do not change the canvas size.\n\n2. Object Motion & Parameter Settings:\nCreate a VPython animation to illustrate the following physics experiment:\n\n# Electrostatic Force and Simple Harmonic Motion\n\n\n##  Motion Description\n\n### Physical Phenomenon\n\nTwo fixed charged spheres are placed at equal distances from the origin along a horizontal axis. A movable charged sphere is positioned above the midpoint of the line connecting the two fixed spheres (on the perpendicular bisector). Due to the electrostatic force governed by Coulomb's law, the movable sphere experiences a restoring force directed towards the equilibrium position, resulting in a simple harmonic motion along the vertical axis.  \n\n### Theoretical Background\n\n- The two fixed spheres exert forces on the movable sphere, which cancel in the horizontal direction but combine in the vertical direction.\n- The restoring force is proportional to the displacement from the equilibrium position for small displacements, leading to simple harmonic motion.\n- The period of the motion is determined by the system parameters, such as the charges, masses, and distances involved.\n\n### Observations\n\n- For small initial displacements, the motion resembles a cosine wave in displacement (`y-t`), a sine wave in velocity (`v-t`), and a negative cosine wave in acceleration (`a-t`).\n- Deviations from simple harmonic motion occur at larger displacements due to the non-linear nature of Coulomb\u2019s force.\n\n</br>3. Cyber Input Variable Mapping Information:</br>\n(1) mass1 is mapped to the variable named Angle_I with an initial value set to a 1-dimensional float [5]</br>\n(2) When the value of Angle_I changes, let the animation rerun to the starting point and start with the updated mass1.</br>",
      "output": "from vpython import *\n\n# Screen Settings\nscene = canvas(width=700, height=400)\n\n# Constants\nk = 9e9  # Coulomb's constant\nq1 = 1e-6  # Charge on fixed sphere 1\nq2 = -1e-6  # Charge on fixed sphere 2\nd = 0.1  # Distance between fixed spheres\nm1 = 5  # Initial mass of movable sphere\n\n# Objects\nfixed1 = sphere(pos=vector(-d/2, 0, 0), radius=0.02, color=color.red)\nfixed2 = sphere(pos=vector(d/2, 0, 0), radius=0.02, color=color.blue)\nmass = sphere(pos=vector(0, 0.05, 0), radius=0.02, color=color.green, make_trail=True)\n\n# Initial Conditions\nmass.m = m1\nmass.v = vector(0, 0, 0)\nmass.a = vector(0, 0, 0)\n\n# Animation\ndt = 0.01\nt = 0\nwhile True:\n    rate(100)\n    \n    r1 = mass.pos - fixed1.pos\n    r2 = mass.pos - fixed2.pos\n    \n    F1 = k * q1 * q2 * r1 / mag(r1)**3\n    F2 = k * q1 * q2 * r2 / mag(r2)**3\n    F_net = F1 + F2\n    \n    mass.a = F_net / mass.m\n    mass.v += mass.a * dt\n    mass.pos += mass.v * dt\n    \n    t += dt",
      "mode": "initial",
      "timestamp": "2024-12-26 19:48:33",
      "serial_number": 1
    }
  ]
}