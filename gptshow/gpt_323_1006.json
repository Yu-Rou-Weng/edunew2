{
  "session_id": 1006,
  "log": [
    {
      "input": "1. Screen Settings:</br>Set the canvas width to 700 and height to 400. Do not change the canvas size.</br>2. Object Motion & Parameter Settings:</br>Create a VPython animation to illustrate the following physics experiment:<br><span style=\"color:red;\">This is a simulation of projectile motion with only gravitational force acting on the object. The object is launched horizontally with an initial velocity \\( v_0 \\) from a height \\( h \\). The object accelerates downward due to gravity and bounces off the ground elastically when it hits the ground.</span>\n\n3. Cyber Input Variable Mapping Information:\n    (1) initial_velocity is mapped to the variable named Angle_I with an initial value set to a 1-dimensional value 5\n    (2) When the value of Angle_I changes, let the animation rerun to the starting point and start with the updated initial_velocity.\n    \n\n3. Cyber Input Variable Mapping Information:\n    (1) height is mapped to the variable named Gyroscope_I with an initial value set to a 3-dimensional vector [[0, 0, 4]]\n    (2) When the value of Gyroscope_I changes, let the animation rerun to the starting point and start with the updated height.",
      "output": "```python\nfrom vpython import *\n\n# Screen Settings\nscene = canvas(width=700, height=400)\n\n# Object Motion & Parameter Settings\nball = sphere(pos=vector(0, 0, 4), radius=0.5, color=color.red, make_trail=True)\nground = box(pos=vector(0, -1, 0), size=vector(10, 0.1, 10), color=color.green)\n\ndef projectile_motion(angle, height):\n    ball.pos = vector(0, 0, height)\n    ball.v = vector(angle, 0, 0)\n    dt = 0.01\n    g = vector(0, -9.81, 0)\n    \n    while ball.pos.y >= 0:\n        rate(100)\n        ball.v += g * dt\n        ball.pos += ball.v * dt\n        \n        if ball.pos.y < 0:\n            ball.v.y *= -1  # Bounce off the ground elastically\n\n# Cyber Input Variable Mapping Information\nAngle_I = 5  # initial_velocity\nGyroscope_I = vector(0, 0, 4)  # height\n\ndef on_change_Angle_I(change):\n    global Angle_I\n    Angle_I = change['new']\n    projectile_motion(Angle_I, Gyroscope_I.z)\n    \ndef on_change_Gyroscope_I(change):\n    global Gyroscope_I\n    Gyroscope_I = vector(0, 0, change['new'][0][2])\n    projectile_motion(Angle_I, Gyroscope_I.z)\n\n# Observing the changes in mapped variables\nobserve(on_change_Angle_I, names='Angle_I')\nobserve(on_change_Gyroscope_I, names='Gyroscope_I')\n\nprojectile_motion(Angle_I, Gyroscope_I.z)\n```",
      "mode": "initial",
      "timestamp": "2024-09-12 07:57:46",
      "serial_number": 1
    }
  ]
}