{
  "session_id": 873,
  "log": [
    {
      "input": "Please write a Vpython code for \"Simple Harmonic Motion caused by Electrostatic Force (Circular Ring, Placed Above the Vertical Line)\"\n\nThe electrostatic force \\( F \\) is calculated based on the Coulomb's force between two charged particles. In this code, the electrostatic force is calculated using the following formula:\n\n$$\nF = \\frac{k \\cdot Q \\cdot q}{r^2}\n$$\n\nWhere:\n- \\( k \\) is the electrostatic constant, set to \\( 8.988 \\times 10^{9} \\ \\text{N\u00b7m}^2/\\text{C}^2 \\)\n- \\( Q \\) and \\( q \\) are the charges of the particles, in Coulombs (\\(\\text{C}\\))\n- \\( r \\) is the distance between the two particles, in meters (\\(\\text{m}\\)).\n\nOn the X-Z plane, there is a solid green ring with a radius of 10, centered at (0, 0, 0), and with a thickness of 0.1, fixed in position. Do not use 'ring' as a variable name.\nThere are \\( 100 \\) small blue spheres with a radius of 0.3, uniformly arranged on the ring, each with a charge of \\( 1 \\times 10^{-10} \\text{C} \\), fixed in position.\nA small red ball with a radius of 0.3, mass of \\( 1 \\) kg, and charge of \\( -1 \\times 10^{1} \\text{C} \\) is initially positioned at (0, 3, 0). Upon release, it starts to undergo simple harmonic motion due to the electrostatic force with the ring.\n\nWhen setting variable names, please ensure they do not conflict with Vpython object names.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Constants\nk_e = 8.988 * 10**9  # Coulomb's constant\nQ = 1e-10  # Charge of spheres on the ring\nq = -1e1  # Charge of the ball\nm = 1  # Mass of the ball\nring_radius = 10  # Radius of ring\nball_radius = 1  # Radius of the ball\nnum_spheres = 100  # Number of spheres on the ring\ndt = 0.01  # Time step\n\n# Create ring of spheres\nspheres = [sphere(pos=vector(ring_radius*cos(2*pi*i/num_spheres), 0, ring_radius*sin(2*pi*i/num_spheres)),\n                  radius=0.3, color=color.blue) for i in range(num_spheres)]\n\n# Create ball\nball = sphere(pos=vector(0, 3, 0), radius=ball_radius, color=color.red, m=m, charge=q, v=vector(0,0,0))\n\n# Run simulation\nwhile True:\n    rate(100)\n    F_net = vector(0, 0, 0)\n    for s in spheres:\n        r = ball.pos - s.pos\n        F_net += k_e * Q * q * r.hat / mag2(r)\n    ball.v += F_net / m * dt\n    ball.pos += ball.v * dt",
      "mode": "initial",
      "timestamp": "2024-07-26 14:49:54",
      "serial_number": 1
    }
  ]
}