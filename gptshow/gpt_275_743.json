{
  "session_id": 743,
  "log": [
    {
      "input": "Circular Motion, Including Rotation Axis and Rope\n\nIf a small ball has a mass $m$, velocity $v$, angular velocity $\\omega$, and the radius of curvature when turning is $R$, then the required centripetal acceleration for turning is\n$$\na_c = \\frac{v^2}{R} = R \\omega^2\n$$\n\nFrom Newton's second law of motion, the centripetal force is\n$$\nF_c = m a_c = m \\cdot \\frac{v^2}{R} = m \\cdot R \\omega^2\n$$\n\nIf you want to use VPython to draw the ball performing uniform circular motion on a horizontal plane, we need to find a way to calculate the size and direction of the centripetal acceleration, and draw the ball, rope, and rotation axis undergoing uniform circular motion.\n\nThe program for circular motion, including the rotation axis and rope, is very similar to that of circular motion alone, except that it includes additional elements for the rope and rotation axis. The new lines of code are 27, 28, and 41:\n\ncenter = cylinder(pos = vec(0, -size, 0), axis = vec(0, 2*size, 0), radius = 0.1*size, color = color.white)\nrope = cylinder(pos = vec(0, 0, 0), axis = ball.pos, radius = 0.1*size, color = color.yellow)\nrope.axis = axis\n\nThese are used to draw the rotation axis, draw the rope, and update the length and direction of the rope.\n\nIf you want to hide the arrows used to display velocity and acceleration, you can comment out lines 29, 30, and 42 to 45. This will only display the ball, axis, and rope.\n\nIn VPython, there is another object for drawing curves, called curve. If you only connect two points, it will appear as a straight line. This can be used to draw the axis and rope. The code on lines 27, 28, and 41 should be changed to:\n\ncenter = curve(pos=[vec(0, -size, 0), vec(0, size, 0)], radius=0.1*size, color=color.white)\nrope = curve(pos=[ball.pos, vec(0, 0, 0)], radius=0.1*size, color=color.yellow)\nrope.modify(0, pos=ball.pos)\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Speed_I as a cyber input variable, set Speed_I=1\n\n(2) Speed_I is the initial velocity of the ball. When Speed_I changes to a new value, the initial velocity of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Constants\nsize = 0.2    # radius of the ball\nmass = 0.2    # kg\nSpeed_I = 1   # initial speed, m/s\n\n# Objects\nball = sphere(pos = vec(-5, 0, 0), radius = size, color = color.red)\nball.v = vec(Speed_I, 0, 0)\nfloor = box(pos = vec(0, -0.005, 0), length = 10, height = 0.01, width = 10, color = color.blue)\ncenter = cylinder(pos = vec(0, -size, 0), axis = vec(0, 2*size, 0), radius = 0.1*size, color = color.white)\nrope = cylinder(pos = vec(0, 0, 0), axis = ball.pos, radius = 0.1*size, color = color.yellow)\nv_arrow = arrow(pos = ball.pos, axis = ball.v, shaftwidth = 0.1*size, color = color.green)\na_c_arrow = arrow(pos = ball.pos, axis = vec(0, 0, 0), shaftwidth = 0.1*size, color = color.yellow)\n\n# Time settings\nt = 0\ndt = 0.001\n\nwhile True:\n    rate(1000)\n\n    # Calculate the acceleration and velocity of the ball\n    a_c = -norm(ball.pos) * mag(ball.v)**2 / mag(ball.pos)\n    ball.v = ball.v + a_c*dt\n\n    # Update the position of the ball and arrows\n    ball.pos = ball.pos + ball.v*dt\n    v_arrow.pos = ball.pos\n    v_arrow.axis = ball.v\n    a_c_arrow.pos = ball.pos\n    a_c_arrow.axis = a_c\n\n    # Update the axis of the rope\n    rope.axis = ball.pos",
      "mode": "initial",
      "timestamp": "2024-07-25 15:26:55",
      "serial_number": 1
    }
  ]
}