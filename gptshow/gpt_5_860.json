{
  "session_id": 860,
  "log": [
    {
      "input": "1. Screen Settings\nSet the canvas width to 1000 and the height to 800. Please draw the trajectory of the moving ball. The center point of the canvas needs to be correctly set, therefore the sequence of writing the Parameter Settings must follow after the Screen Settings.\n\n2. Object Motion & Parameter Settings\nPlease create a VPython animation of a horizontally projected ball: Launch a horizontal ball that bounces off the ground.\nDraw the ball and the ground. Assume that the ball undergoes an elastic collision with the ground, considering only the effect of gravity, meaning the ball accelerates downward under the influence of gravity and bounces upon hitting the ground. Let the ball stop moving after 6 seconds.\n\n3. Cyber Input Variable Mapping Information:\n\n(1) Define and initialize a Cyber Input Variable named `Speed_I` with an initial value set to 5. This variable represents the speed of the ball.\n\n(2) During the animation, whenever the value of the Speed_I variable changes, let the animation rerun with the updated ball speed.\n\n(3) Do not resize the scene.\n(4) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Screen Settings\nscene = canvas(width=1000, height=800, center=vector(0,0,0), resizable=False)\n\n# Parameter Settings\nSpeed_I = 5  # initial speed\ng = vector(0, -9.8, 0)  # gravity\ndt = 0.01  # time step\nt = 0  # time\n\n# Object Motion\nball = sphere(pos=vector(0, 0, 0), radius=1, color=color.red)\nball.velocity = vector(Speed_I, 0, 0)\nground = box(pos=vector(0, -2, 0), size=vector(50, 1, 50), color=color.green)\n\ndef animation():\n    global t, Speed_I\n    while t < 6:\n        rate(100)\n        ball.pos += ball.velocity * dt\n        if ball.pos.y <= ground.pos.y + ball.radius:\n            ball.velocity.y = -ball.velocity.y\n        else:\n            ball.velocity += g * dt\n        t += dt\n    t = 0\n    ball.pos = vector(0, 0, 0)\n    ball.velocity = vector(Speed_I, 0, 0)\n\nanimation()\n\nwhile True:\n    rate(100)\n    if Speed_I != scene.userzoom:\n        Speed_I = scene.userzoom\n        animation()",
      "mode": "initial",
      "timestamp": "2024-08-16 17:45:36",
      "serial_number": 1
    }
  ]
}