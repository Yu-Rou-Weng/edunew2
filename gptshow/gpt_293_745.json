{
  "session_id": 745,
  "log": [
    {
      "input": "Please write a Vpython program for \"Three Ball Collision in Free Fall\"\n\nOne-Dimensional Elastic Collision Velocity Formula\n\nAssume two point masses have masses \\( m_1 \\) and \\( m_2 \\), and their velocities before the collision are \\( v_1 \\) and \\( v_2 \\) respectively. The velocities after the collision are \\( v_1' \\) and \\( v_2' \\), expressed as:\n\n\\[ v_1' = \\frac{m_1 - m_2}{m_1 + m_2} v_1 + \\frac{2m_2}{m_1 + m_2} v_2 \\]\n\n\\[ v_2' = \\frac{2m_1}{m_1 + m_2} v_1 + \\frac{m_2 - m_1}{m_1 + m_2} v_2 \\]\n\nWhere:\n- \\( v_1' \\) is the velocity of the mass \\( m_1 \\) object after the collision\n- \\( v_2' \\) is the velocity of the mass \\( m_2 \\) object after the collision\n- \\( v_1 \\) is the velocity of the mass \\( m_1 \\) object before the collision\n- \\( v_2 \\) is the velocity of the mass \\( m_2 \\) object before the collision\n\nThere are three balls: one is red, one is green, and the other is blue. Please draw a floor with a side length of 50. The red ball has a mass of 3 and radius of 3, the green ball has a mass of 2 and radius of 2, and the blue ball has a mass of 1 and radius of 1. The balls are stacked vertically: the green ball on top of the red ball, and the blue ball on top of the green ball. Release the three balls from a height of 15 above the floor. The balls accelerate downward from rest due to gravity. When the red ball hits the ground, it bounces. The green and blue balls adhere to the one-dimensional elastic collision rules. If the red and green balls collide again, insert the mass of the red ball, the y-direction velocity of the red ball, the mass of the green ball, and the y-direction velocity of the green ball into the one-dimensional elastic collision formula to calculate the post-collision velocities, then reassign these velocities to the red ball and green ball in the y-direction. If the green and blue balls collide again, insert the mass of the green ball, the y-direction velocity of the green ball, the mass of the blue ball, and the y-direction velocity of the blue ball into the one-dimensional elastic collision formula to calculate the post-collision velocities, then reassign these velocities to the green ball and blue ball in the y-direction. Because the balls below (red and green) are heavier than the blue ball, the rebound height of the blue ball will far exceed its original release height.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Constants\nG = 9.8 \nH = 15.0\ndt = 0.001\n\n# Cyber Input Variable\nRadius_I = 1\n\n# Create floor and balls\nfloor = box(pos=vector(0, 0, 0), size=vector(50, 0.01, 50), color=color.white)\nball = [sphere(pos=vector(0, H+2*3*Radius_I+2*2*Radius_I+Radius_I, 0), radius=Radius_I, color=color.blue, m=1, v=vector(0, 0, 0)),\n         sphere(pos=vector(0, H+2*3*Radius_I+Radius_I, 0), radius=2*Radius_I, color=color.green, m=2, v=vector(0, 0, 0)),\n         sphere(pos=vector(0, H+Radius_I, 0), radius=3*Radius_I, color=color.red, m=3, v=vector(0, 0, 0))]\n\nwhile True:\n    rate(1000)\n    for i in range(3):\n        ball[i].pos = ball[i].pos + ball[i].v*dt\n        if i == 0 and ball[i].pos.y <= ball[i].radius: \n            ball[i].v.y = abs(ball[i].v.y)\n        elif i > 0 and ball[i].pos.y <= ball[i-1].pos.y + ball[i-1].radius + ball[i].radius:\n            v1p = ((ball[i-1].m - ball[i].m) / (ball[i-1].m + ball[i].m))*ball[i-1].v.y + ((2*ball[i].m) / (ball[i-1].m + ball[i].m))*ball[i].v.y\n            v2p = ((2*ball[i-1].m) / (ball[i-1].m + ball[i].m))*ball[i-1].v.y + ((ball[i].m - ball[i-1].m) / (ball[i-1].m + ball[i].m))*ball[i].v.y\n            ball[i-1].v.y = v1p\n            ball[i].v.y = v2p\n        else:\n            ball[i].v = ball[i].v + vector(0, -G*dt, 0)",
      "mode": "initial",
      "timestamp": "2024-07-25 18:24:04",
      "serial_number": 1
    }
  ]
}