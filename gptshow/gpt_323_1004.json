{
  "session_id": 1004,
  "log": [
    {
      "input": "1. Screen Settings:</br>Set the canvas width to 700 and height to 400. Do not change the canvas size.</br>2. Object Motion & Parameter Settings:</br>Create a VPython animation to illustrate the following physics experiment:<br><span style=\"color:red;\">This is a simulation of projectile motion with only gravitational force acting on the object. The object is launched horizontally with an initial velocity \\( v_0 \\) from a height \\( h \\). The object accelerates downward due to gravity and bounces off the ground elastically when it hits the ground.</span>\n\n3. Cyber Input Variable Mapping Information:\n    (1) initial_velocity is mapped to the variable named Angle_I with an initial value set to a 1-dimensional value 5\n    (2) When the value of Angle_I changes, let the animation rerun to the starting point and start with the updated initial_velocity.\n    \n\n3. Cyber Input Variable Mapping Information:\n    (1) height is mapped to the variable named Gyroscope_I with an initial value set to a 3-dimensional vector [[0, 0, 4]]\n    (2) When the value of Gyroscope_I changes, let the animation rerun to the starting point and start with the updated height.",
      "output": "```python\nfrom vpython import *\nimport numpy as np\n\n# Screen Settings\nscene.width = 700\nscene.height = 400\n\n# Constants\ng = 9.81  # Acceleration due to gravity\nground_height = 0  # Height of the ground\n\n# Objects\nground = box(pos=vector(0, ground_height, 0), size=vector(20, 0.1, 10), color=color.green)\nball = sphere(pos=vector(0, 5, 0), radius=0.5, color=color.blue)\n\n# Parameters\ninitial_velocity = 5  # Initial velocity in m/s\nheight = vector(0, 0, 4)  # Initial height\n\n# Motion Function\ndef projectile_motion(angle, h):\n    ball.pos = vector(0, h.y, 0)\n    ball.velocity = vector(initial_velocity * np.cos(np.radians(angle)), 0, initial_velocity * np.sin(np.radians(angle)))\n\n    t = 0\n    dt = 0.01\n\n    while ball.pos.y > ground_height:\n        rate(100)\n        ball.pos.x += ball.velocity.x * dt\n        ball.pos.y += ball.velocity.y * dt - 0.5 * g * t**2\n        ball.pos.z += ball.velocity.z * dt\n        ball.velocity.y += -g * t\n        t += dt\n\n        if ball.pos.y <= ground_height:\n            ball.velocity.y *= -1\n\n# Animation Loop\ndef update_animation():\n    for obj in scene.objects:\n        obj.clear_trail()\n    projectile_motion(Angle_I, vector(Gyroscope_I[0][0], Gyroscope_I[0][1], Gyroscope_I[0][2]))\n\nupdate_animation()\n```",
      "mode": "initial",
      "timestamp": "2024-09-12 07:57:40",
      "serial_number": 1
    }
  ]
}