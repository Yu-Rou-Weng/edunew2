{
  "session_id": 992,
  "log": [
    {
      "input": "1. Screen Settings:\n  Set the canvas width to 700 and height to 400. Do not change the canvas size.\n\n  2. Object Motion & Parameter Settings:\n  Create a VPython animation to illustrate the following physics experiment:\n  This is a simulation of projectile motion with an elastic collision between the ball and the ground, considering only the effect of gravity. The ball is launched horizontally from a height h with an initial velocity v0.\n        \n\n3. Cyber Input Variable Mapping Information:\n    (1) h is mapped to the variable named Angle_I with an initial value set to a 1-dimensional value 5\n    (2) When the value of Angle_I changes, let the animation rerun to the starting point and start with the updated h.",
      "output": "Sure, here is the VPython code that simulates the projectile motion with an elastic collision between the ball and the ground:\n\n```python\nfrom vpython import *\nscene.width = 700\nscene.height = 400\n\nground = box(pos=vector(0, -1, 0), size=vector(20, 0.2, 10), color=color.green)\nball = sphere(pos=vector(-9, 5, 0), radius=0.5, color=color.blue)\narrow = arrow(pos=ball.pos, axis=vector(2, 0, 0), color=color.red)\n\ng = vector(0, -9.8, 0)  # acceleration due to gravity\nv0 = 10  # initial velocity\ndt = 0.01  # time step\n\nAngle_I = 5  # initial value for height\n\ndef launch_ball():\n    ball.pos = vector(-9, Angle_I, 0)  # initial position\n    ball.velocity = vector(v0, 0, 0)  # initial velocity\n\ndef reset():\n    scene.delete()\n    scene.width = 700\n    scene.height = 400\n    ground = box(pos=vector(0, -1, 0), size=vector(20, 0.2, 10), color=color.green)\n    ball = sphere(pos=vector(-9, 5, 0), radius=0.5, color=color.blue)\n    arrow = arrow(pos=ball.pos, axis=vector(2, 0, 0), color=color.red)\n    launch_ball()\n\ndef update_angle_I(value):\n    global Angle_I\n    Angle_I = value\n    reset()\n\nscene.bind('update', update_angle_I)\n\nlaunch_ball()\n\nwhile True:\n    rate(100)\n    ball.velocity = ball.velocity + g*dt\n    ball.pos = ball.pos + ball.velocity*dt\n    if ball.pos.y < ball.radius and ball.velocity.y < 0:\n        ball.velocity.y = -ball.velocity.y\n```",
      "mode": "initial",
      "timestamp": "2024-09-11 15:23:22",
      "serial_number": 1
    }
  ]
}