{
  "session_id": 753,
  "log": [
    {
      "input": "Please write a Vpython program for \"Free Fall Collision of Two Balls\"\n\nFormula for velocity in one-dimensional elastic collisions\n\nAssuming two particles have masses \\( m_1 \\) and \\( m_2 \\), and their velocities before the collision are \\( v_1 \\) and \\( v_2 \\) respectively. The velocities after the collision are \\( v_1' \\) and \\( v_2' \\), given by:\n\n\\[ v_1' = \\frac{m_1 - m_2}{m_1 + m_2} v_1 + \\frac{2m_2}{m_1 + m_2} v_2 \\]\n\n\\[ v_2' = \\frac{2m_1}{m_1 + m_2} v_1 + \\frac{m_2 - m_1}{m_1 + m_2} v_2 \\]\n\nWhere:\n- \\( v_1' \\) is the velocity of the object with mass \\( m_1 \\) after the collision\n- \\( v_2' \\) is the velocity of the object with mass \\( m_2 \\) after the collision\n- \\( v_1 \\) is the velocity of the object with mass \\( m_1 \\) before the collision\n- \\( v_2 \\) is the velocity of the object with mass \\( m_2 \\) before the collision\n\nThere are three balls: one red, one green, and one blue. Please draw a wooden floor with a side length of 50. The red ball has a mass of 3 and a radius of 3; the green ball has a mass of 2 and a radius of 2; the blue ball has a mass of 1 and a radius of 1. These three balls are vertically stacked, with the green ball on top of the red ball, and the blue ball on top of the green ball. Release these stacked balls from a height of 15 above the ground, and the balls will start to move downward due to gravitational acceleration. The balls will follow the rules of one-dimensional elastic collisions. The rebound range of the green ball after colliding with the red ball will only be between the red and blue balls, and the rebound range of the blue ball after colliding with the green ball will only be above the green ball. If the red ball hits the ground, it will bounce back. If the red ball and the green ball collide, insert the mass of the red ball, the y-direction velocity of the red ball, the mass of the green ball, and the y-direction velocity of the green ball into the formula for one-dimensional elastic collisions, calculate the velocity after the collision, and reassign the y-direction velocities to the red and green balls. If the green ball and the blue ball collide, insert the mass of the green ball, the y-direction velocity of the green ball, the mass of the blue ball, and the y-direction velocity of the blue ball into the formula for one-dimensional elastic collisions, calculate the velocity after the collision, and reassign the y-direction velocities to the green and blue balls. Since the red and green balls below are heavier than the blue ball, the rebound height of the blue ball will far exceed its original ground height.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy, and time.\n(4) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\nRadius_I = 1 # cyber input variable\n\nscene = canvas(width=800, height=800, center=vector(0, 15, 0), background=vector(0.5, 0.5, 0))\n\nRedBall = sphere(pos=vector(0, 15, 0), radius=3*Radius_I, color=color.red, m=3, v=vector(0, 0, 0))\nGreenBall = sphere(pos=vector(0, 15+3*Radius_I+2*Radius_I, 0), radius=2*Radius_I, color=color.green, m=2, v=vector(0, 0, 0))\nBlueBall = sphere(pos=vector(0, 15+3*Radius_I+2*Radius_I+Radius_I, 0), radius=Radius_I, color=color.blue, m=1, v=vector(0, 0, 0))\n\nfloor = box(pos=vector(0, 0, 0), size=vector(50, 1, 50), color=color.white)\ng = vector(0, -9.8, 0)\n\ndt = 0.001\nt = 0\nwhile t < 30:\n    rate(1000)\n    RedBall.pos += RedBall.v*dt\n    GreenBall.pos += GreenBall.v*dt\n    BlueBall.pos += BlueBall.v*dt\n    RedBall.v += g*dt\n    GreenBall.v += g*dt\n    BlueBall.v += g*dt\n\n    if RedBall.pos.y - RedBall.radius <= floor.pos.y + floor.size.y/2:\n        RedBall.v.y = abs(RedBall.v.y)\n    elif GreenBall.pos.y - GreenBall.radius <= RedBall.pos.y + RedBall.radius:\n        v1 = ((RedBall.m - GreenBall.m)/(RedBall.m + GreenBall.m))*RedBall.v.y + ((2*GreenBall.m)/(RedBall.m + GreenBall.m))*GreenBall.v.y\n        v2 = ((2*RedBall.m)/(RedBall.m + GreenBall.m))*RedBall.v.y + ((GreenBall.m - RedBall.m)/(RedBall.m + GreenBall.m))*GreenBall.v.y\n        RedBall.v.y = v1\n        GreenBall.v.y = v2\n    elif BlueBall.pos.y - BlueBall.radius <= GreenBall.pos.y + GreenBall.radius:\n        v1 = ((GreenBall.m - BlueBall.m)/(GreenBall.m + BlueBall.m))*GreenBall.v.y + ((2*BlueBall.m)/(GreenBall.m + BlueBall.m))*BlueBall.v.y\n        v2 = ((2*GreenBall.m)/(GreenBall.m + BlueBall.m))*GreenBall.v.y + ((BlueBall.m - GreenBall.m)/(GreenBall.m + BlueBall.m))*BlueBall.v.y\n        GreenBall.v.y = v1\n        BlueBall.v.y = v2\n\n    t += dt",
      "mode": "initial",
      "timestamp": "2024-07-25 18:58:50",
      "serial_number": 1
    }
  ]
}