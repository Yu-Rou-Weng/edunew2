{
  "session_id": 660,
  "log": [
    {
      "input": "Mass Spectrometer: Automatically Running 5 Types of Particles with a For Loop\n\nThere are five types of particles, each entering a uniform magnetic field B at the same speed and at a perpendicular angle, with their trajectories as shown in the figure below. These five particles are: carbon atom ($^{12}$C), oxygen ion ($^{16}$O$^{2-}$), sodium ion ($^{23}$Na$^+$), magnesium ion ($^{24}$Mg$^{2+}$), and chlorine ion ($^{35}$Cl$^-$). Ignoring gravitational effects, the trajectories labeled 1, 2, 3, 4, and 5 in the diagram respectively correspond to which particles?\n\nThis question is from the 1995 Joint University Admissions Examination in Japan. Although it dates back a long time, it can still be found in various reference books in circulation. When particles enter the magnetic field from below, positively charged particles experience a magnetic force to the left, negatively charged particles to the right, and neutral particles experience no magnetic force. Assuming the magnetic force acts as the centripetal force in a uniform circular motion within the magnetic field, we have:\n$$\nqvB = m \\cdot \\frac{v^2}{R} \\Rightarrow R = \\frac{mv}{qB} \\propto \\frac{m}{q}\n$$\n\nTherefore, the answer to this problem is $^{23}$Na$^+$, $^{24}$Mg$^{2+}$, $^{12}$C, $^{16}$O$^{2-}$, $^{35}$Cl$^-$. Next, we'll try to visualize the motion of these particles in a mass spectrometer using VPython.\n\nProgramming Section\nThe program for the mass spectrometer that automatically runs the 5 types of particles is similar to the basic mass spectrometer program, with modifications described below.\n\nAdd particle label data, `labels`. Since VPython supports HTML syntax, it is possible to create superscripts and subscripts. Text between `<sup>` and `</sup>` is superscripted, and text between `<sub>` and `</sub>` is subscripted.\n\nA for loop reads the names of the particles, and the while loop that generates and moves the particles is placed inside the for loop. When the while loop completes, a label is added to the particle.\n\nSimulation Results\nThe following are the results from running program 23-2, showing that the radii of the particles' orbits are directly proportional to m/q.\n\nScreenshot of program 23-2:\n![image](https://hackmd.io/_uploads/HkDwi3aO0.png)\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Define the properties of the particles\nparticles = [{'label': '23Na+', 'm': 23, 'q': 1},\n             {'label': '24Mg2+', 'm': 24, 'q': 2},\n             {'label': '12C', 'm': 12, 'q': 0},\n             {'label': '16O2-', 'm': 16, 'q': -2},\n             {'label': '35Cl-', 'm': 35, 'q': -1}]\n\nR = 1  # Radius\nB = vector(0, 0, 1)  # Magnetic field\nv = 1  # Velocity\n\n# Create a scene\nscene = canvas(title='Mass Spectrometer',\n               width=800, height=800,\n               center=vector(0, 0, 0), background=color.black)\n\n# Create a trajectory curve for each particle\nfor particle in particles:\n    particle['curve'] = curve(color=color.white)\n\n# For each particle\nfor particle in particles:\n    # Create the particle\n    p = sphere(pos=vector(0, -R, 0), radius=0.1, color=color.yellow, make_trail=True)\n    p.m = particle['m']\n    p.q = particle['q']\n    p.v = vector(0, v, 0)\n\n    # While the particle is within the field\n    while mag(p.pos) < R:\n        rate(1000)\n        # Calculate the force on the particle\n        F = p.q * cross(p.v, B)\n        # Update the particle's velocity\n        p.v += F / p.m\n        # Move the particle\n        p.pos += p.v\n\n    # Label the particle's trajectory\n    particle['curve'].append(pos=p.pos)\n    label(pos=p.pos, text=particle['label'], box=False)",
      "mode": "initial",
      "timestamp": "2024-07-24 07:25:53",
      "serial_number": 1
    }
  ]
}