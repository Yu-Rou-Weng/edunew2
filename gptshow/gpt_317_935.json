{
  "session_id": 935,
  "log": [
    {
      "input": "1. Screen Settings\nSet the canvas width to 700 and the height to 400. Please draw the trajectory of the ball's motion. Do not change the canvas size.\n\n2. Object Motion & Parameter Settings\nPlease draw a VPython horizontal projectile motion animation: Launch a ball horizontally from mid-air, which bounces off the ground upon impact.\nDraw both the ball and the ground. Assume that the ball has an elastic collision with the ground, and only consider the effects of gravity, meaning the ball accelerates downward due to gravity and bounces back up upon hitting the ground. Let the ball move for 10 seconds before stopping.\n\n3. Cyber Input Variable Mapping Information:\n\n(1) Define and initialize a Cyber Input Variable named Speed_I with an initial value set to 1. This variable represents the speed of the ball.\n\n(2) During the animation, whenever the value of the Speed_I variable changes, the speed of the moving ball should be immediately updated to reflect the new value of Speed_I.\n\n(3) Define and initialize a Cyber Input Variable named Gravity_I with an initial value set to 9.8. This variable represents the gravitational acceleration.\n\n(4) During the animation, whenever the value of the Gravity_I variable changes, the gravitational acceleration should be immediately updated to reflect the new value of Gravity_I.\n(5) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import sphere, vector, canvas, color, rate, box\n\n# Screen Settings\nscene = canvas(width=700, height=400)\n\n# Define and initialize a Cyber Input Variable\nSpeed_I = 1\nGravity_I = 9.8\n\n# Object Motion & Parameter Settings\nball = sphere(pos=vector(0, 5, 0), radius=1, color=color.red)\nball.velocity = vector(Speed_I, 0, 0)\nground = box(pos=vector(0, -1, 0), size=vector(20, 2, 2), color=color.green)\n\n# Start the animation\nt = 0\ndt = 0.01\nwhile t < 10:\n    rate(100)\n    ball.pos = ball.pos + ball.velocity * dt\n    if ball.pos.y > ground.pos.y + 1:\n        ball.velocity.y = ball.velocity.y - Gravity_I * dt\n    elif ball.velocity.y < 0:\n        ball.velocity.y = -ball.velocity.y\n    t = t + dt",
      "mode": "initial",
      "timestamp": "2024-08-18 20:52:35",
      "serial_number": 1
    }
  ]
}