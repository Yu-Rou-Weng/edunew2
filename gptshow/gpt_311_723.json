{
  "session_id": 723,
  "log": [
    {
      "input": "Magnetic Field Generated by a Long Straight Current-Carrying Conductor\n\nIn the 8th chapter of elective physics on the magnetic effects of electric currents, the Biot-Savart law is introduced. This law is used to calculate the magnetic field produced at a point in space by a small segment of a current-carrying conductor. The equation is given by:\n$$\nd\\vec{B} = \\frac{\\mu_0}{4\\pi} \\frac{I d\\vec{L} \\times \\hat{r}}{r^2} \\Rightarrow dB = \\frac{\\mu_0}{4\\pi} \\frac{I dL \\sin{\\theta}}{r^2}\n$$\n\nUsing the Biot-Savart law, the magnetic field magnitude at a perpendicular distance $r$ from a long straight current-carrying conductor can be calculated as:\n$$\nB = \\frac{\\mu_0 I}{2\\pi r}\n$$\n\nThe magnetic field magnitude at the center of a current-carrying loop with radius $r$ is:\n$$\nB = \\frac{\\mu_0 I}{2r}\n$$\n\nThe magnetic field magnitude at the center of a solenoid with $n$ turns per unit length carrying current is:\n$$\nB = \\mu_0 n I\n$$\n\nMagnetic fields should be distributed in space, but the diagrams in textbooks are usually in two dimensions, hence I plan to use VPython to visualize the strength and direction of the magnetic field in three dimensions.\n\nParameter Settings\n\nHere, variables such as size, n, L, d, mu, current, direct, and N are set, with their purposes commented in the lines. To make the field strength and arrow lengths more noticeable, the current value is set very high.\n\nScreen Setup\nCreates an animation window and conductor.\n\nCreates an empty list `segs`, and uses a for loop to produce small spheres representing segments of the conductor, which are then added to the list `segs`. There are two methods to do this, the first method has more lines but is easier to understand, the second method is more concise but harder to comprehend.\n\n```\nsegs = []\nfor i in range(n+1):\n    segs.append(sphere(pos=line.pos + vec(i*d, 0, 0), radius=size, color=color.cyan))\nsegs = [sphere(pos=line.pos + vec(i*d, 0, 0), radius=size, color=color.cyan) for i in range(n+1)]\n```\n\nCreates an empty list `locations`, and uses a 3-layer for loop to compute the positions for drawing arrows, which are then added to the list `locations`.\n\n```\nfields = []\nfor location in locations:\n    fields.append(arrow(pos=location, axis=vec(0, 0, 0), color=color.green))\nfields = [arrow(pos=location, axis=vec(0, 0, 0), color=color.green) for location in locations]\n```\n\nCustom function `magnetic`, which takes the position coordinate `loc` as input to calculate the magnetic field, and `segments` stores the segmented conductor data. The Biot-Savart law is used to calculate the magnetic field.\n\nSequentially reads elements from the list `locations` and generates arrows at corresponding positions.\n\nUpdates the length and direction of the arrows, records the maximum magnetic field strength Bmax; arrows near the maximum value appear red, while those near zero appear green.\n\nIllustration to be drawn:\n![image](https://hackmd.io/_uploads/H1fL6hp_R.png)\n(1) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Constants\nmu = 4*pi*1e-7\nI = 1e11\nsize, n, L, d = 0.02, 50, 1.0, L/n\ndirect = vec(0, 1, 0)\nN, R = 10, 0.4\n\n# Creating scene\nscene = canvas(width=800, height=800, background=vec(0.5, 0.5, 0))\nscene.range = 1.2\nscene.forward = vec(-1, -1, -1)\n\n# Creating conductor\nline = curve(pos=[vec(-L/2, 0, 0), vec(L/2, 0, 0)], radius=size, color=color.yellow)\n\n# Creating conductor segments\nsegs = [sphere(pos=line.pos + vec(i*d, 0, 0), radius=size, color=color.cyan) for i in range(n+1)]\n\n# Compute locations for drawing magnetic field\nlocations = [vec(x, y, z) for x in arange(-L/2, L/2+R, 2*R/N) for y in arange(-L/2, L/2+R, 2*R/N) for z in arange(-L/2, L/2+R, 2*R/N) if mag(vec(x, y, z)) <= R]\n\n# Draw field vectors\nfields = [arrow(pos=location, axis=vec(0, 0, 0), color=color.green) for location in locations]\n\ndef magnetic(loc, segs):\n    B = vec(0, 0, 0)\n    for seg in segs:\n        r = loc - seg.pos\n        if mag(r) == 0: continue\n        dB = mu / 4 / pi * I * cross(direct, r) / mag(r)**3\n        B = B + dB\n    return B\n\nBmax = 0\nwhile True:\n    rate(100)\n    for field in fields:\n        B = magnetic(field.pos, segs)\n        Bmax = max(Bmax, B.mag)\n        field.axis = B * (0.8*R/Bmax)\n        field.color = vec(1-B.mag/Bmax, B.mag/Bmax, 0)",
      "mode": "initial",
      "timestamp": "2024-07-24 14:07:38",
      "serial_number": 1
    }
  ]
}