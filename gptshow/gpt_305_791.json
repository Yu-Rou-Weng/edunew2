{
  "session_id": 791,
  "log": [
    {
      "input": "Please write a Vpython program for the charge-to-mass ratio:\n\nInformation on the velocity selector program:\n# Velocity Selector\n\nThe velocity selector is a device used to filter charged particles with a specific velocity. Its basic structure is as follows. A downward electric field is created by two parallel charged plates, combined with a magnetic field perpendicular to the plane of the paper. If a positively charged particle enters the velocity selector from the left with a horizontal velocity \\( v \\), the particle will be subjected to a downward electrostatic force and an upward magnetic force. When the resultant force is zero, the particle moves forward at a constant velocity, then\n$$\nqE = qvB \\Rightarrow v = \\frac{E}{B} = \\frac{V}{Bd}\n$$\n\nIf a board with only a small hole is added on the right side, only particles moving straight to the right can pass through. Thus, by changing the magnitudes of the electric and magnetic fields, you can control the velocity of the particles passing through the device. There are two programs below:\n\n- Program 20-1: Draw the electric field, magnetic field, parallel charged plates, and the trajectory of particle movement. The particle stops moving after hitting the parallel charged plates.\n- Program 20-2: Based on 20-1, add a baffle at the exit.\n\nProgramming task: 20-1: Draw the electric field, magnetic field, parallel charged plates, and the trajectory of particle movement. The particle stops moving after hitting the parallel charged plates.\n\nVelocity Selector Structure Diagram:\n![image](https://hackmd.io/_uploads/HJlvr2auR.png)\n\n\n## Parameter Settings\n\nVariables are set here as size, m, v0, q, V, d, L, B, E_field, B_field, t, dt, with their purposes written in the comments. To ensure smoother animation, the particle's acceleration should not be too large, thus the particle's mass is much larger than the actual mass of a nucleus.\n\n## Display Settings\n\nCreate an animation window, parallel charged plates, horizontal lines, and charged particles.\n\nCreate arrows indicating velocity and acceleration.\n\nCreate arrows and labels indicating the electric and magnetic fields. The syntax for labels is\n\n[label_name] = label(pos=[position vector], text=\"[label content]\", xoffset=[x-direction offset], yoffset=[y-direction offset], color=[color name or RGB value], font=\"[font name]\")\nPlease replace the contents in [] with your required parameters.\n\nOpen the drawing window, draw the ball's position, velocity, acceleration, and time relationship graph.\n\nObject Movement\nTo stop the animation when the charged particle reaches the far right of the screen or hits the parallel charged plates, set the condition in the while loop as charge.pos.x < L and abs(charge.pos.y) < d/2 - p1.height - size.\n\nCalculate the resultant force on the charged particle. As there are electric and magnetic fields only between the parallel charged plates, set them to zero outside. The mathematical formula for the resultant force on the charged particle is\n\n$$\n\\vec{F} = q(\\vec{E} + \\vec{v} \\times \\vec{B})\n$$\nThe corresponding code is\n\nF = q*(E_field + cross(charge.v, B_field))\nUpdate the charged particle's acceleration, velocity, and position.\n\nUpdate the arrows indicating velocity and acceleration, only drawing the direction to avoid the animation auto-resizing.\n\nUpdate the time.\n\n\n# Charge-to-Mass Ratio of an Electron\n\nThe experimental setup for measuring the electron charge-to-mass ratio is shown below, and it looks very similar to the velocity selector, so we can slightly modify the \"Velocity Selector\" program to create an animation for the electron charge-to-mass ratio experiment.\n### Experimental Setup Diagram\n![image](https://hackmd.io/_uploads/SkTFu36OR.png)\n\n## Theoretical Analysis\n\nReferring to the diagram above, the particle mass is \\( m \\), the charge is \\( q \\), and it enters the downward uniform electric field \\( E \\) with a horizontal velocity \\( v_0 \\). The length of the parallel charged plates is \\( L \\), and the distance between the right side of the parallel charged plates and the screen is \\( D \\). If only the electrostatic force is considered, the particle's acceleration upward in the electric field is\n$$\na = \\frac{qE}{m}\n$$\n\nSince there is no external force horizontally, it moves at a constant velocity, and thus the time it moves in the electric field is\n$$\nt_1 = \\frac{L}{v_0}\n$$\n\nThe upward displacement is\n$$\ny_1 = \\frac{1}{2} a t_1^2 = \\frac{1}{2} \\left( \\frac{qE}{m} \\right) \\left( \\frac{L}{v_0} \\right)^2\n$$\n\nThe particle's upward velocity when leaving the electric field is\n$$\nv_{y1} = a t_1 = \\frac{qEL}{mv_0}\n$$\n\nThe particle moves in a straight line at constant velocity outside the electric field, and the time it moves outside the electric field is\n$$\nt_2 = \\frac{D}{v_0}\n$$\n\nThe upward displacement\n$$\ny_2 = v_{y1} t_2 = \\left( \\frac{qEL}{mv_0} \\right) \\left( \\frac{D}{v_0} \\right) = \\frac{qELD}{mv_0^2}\n$$\n\nThe total upward displacement is\n$$\ny = y_1 + y_2 = \\frac{qE}{2m} \\left( \\frac{L^2}{v_0^2} \\right) + \\frac{qELD}{mv_0^2} = \\frac{qEL(L + 2D)}{2mv_0^2}\n$$\n\nThe charge-to-mass ratio of the charged particle is\n$$\n\\frac{q}{m} = \\frac{2yv_0^2}{E L (L + 2D)}\n$$\n\nThe value of the electric field can be obtained from the voltage and distance between the parallel charged plates, and the initial velocity \\( v_0 \\) of the particle can be controlled by the velocity selector, so all data except the charge-to-mass ratio can be measured in the experiment.\n\n\nParameter Settings\n\nVariables are set here as size, m, v0, q, V, d, L, E_field, t, dt, with their purposes written in the comments. To ensure smoother animation, the particle's charge and mass are deliberately increased significantly.\n\n\nDisplay Settings\nCreate an animation window, parallel charged plates, horizontal lines, and charged particles. The parallel charged plates are located between -L < x < 0.\n\nCreate arrows and labels indicating the electric and magnetic fields.\n\nCreate arrows indicating velocity and acceleration.\n\n\nObject Movement\nTo stop the animation when the charged particle reaches the screen or hits the parallel charged plates, set the condition in the while loop as 0 < charge.pos.x < screen.pos.x - screen.length/2 - size or (charge.pos.x < 0 and abs(charge.pos.y) < d/2 - p1.height - size)\n(a) The function of the first group of conditions: When the particle is between the electric field and the screen, the animation continues.\n(b) The function of the second group of conditions: When the particle is in the electric field and has not hit the parallel charged plates, the animation continues.\n\nCalculate the resultant force on the charged particle. Since there is an electric field only between the parallel charged plates, set it to zero outside.\n\nUpdate the charged particle's acceleration, velocity, and position.\n\nUpdate the arrows indicating velocity and acceleration, only drawing the direction to avoid the animation auto-resizing.\n\nTo draw a horizontal line when the charged particle leaves the parallel charged plates, define variables xp and xc, where xp is the particle's position at the previous moment, and xc is the particle's current position. If xp < 0 and xc > 0, it indicates that the particle is just leaving the parallel charged plates, use the cylinder command to draw a parallel line.\n\nUpdate the time.\n\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n# Parameter Settings\nsize = 0.01\nm = 1E-11\nv0 = 50.0\nq = 1.6E-19\nV = 600.0\nd = 0.02\nL = 0.5\nB = 0.05\nE_field = vec(0, -V/d, 0)\nB_field = vec(0, 0, -B)\nt = 0\ndt = 1E-5\n# Display Settings\nscene = canvas(width=800, height=800, background=vec(0.5, 0.5, 0))\np1 = box(length=0.8*L, height=d, width=0.02, color=color.blue)\np2 = box(length=0.8*L, height=d, width=0.02, color=color.red)\ncharge = sphere(pos=vec(-0.5*L,0,0), radius=size, color=color.yellow)\ncharge.v = vec(v0, 0, 0)\nE_arrow = arrow(pos=vec(0, 0.5*d, 0), axis=vec(0, -0.5*d, 0), color=color.green)\nB_arrow = arrow(pos=vec(0, -0.5*d, 0), axis=vec(0, 0, -0.5*L), color=color.blue)\nv_arrow = arrow(pos=charge.pos, axis=charge.v, color=color.yellow)\na_arrow = arrow(pos=charge.pos, axis=vec(0,0,0), color=color.red)\n# Object Movement\nwhile charge.pos.x < L and abs(charge.pos.y) < d/2 - p1.height - size:\n    if charge.pos.x < 0 or charge.pos.x > L:\n        E_field = vec(0, 0, 0)\n        B_field = vec(0, 0, 0)\n    else:\n        E_field = vec(0, -V/d, 0)\n        B_field = vec(0, 0, -B)\n    F = q*(E_field + cross(charge.v, B_field))\n    charge.a = F/m\n    charge.v += charge.a*dt\n    charge.pos += charge.v*dt\n    v_arrow.pos = charge.pos\n    v_arrow.axis = charge.v\n    a_arrow.pos = charge.pos\n    a_arrow.axis = charge.a\n    t += dt",
      "mode": "initial",
      "timestamp": "2024-07-25 22:10:34",
      "serial_number": 1
    }
  ]
}