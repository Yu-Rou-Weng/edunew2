{
  "session_id": 705,
  "log": [
    {
      "input": "Two Ball Collision During Free Fall\n\nIf two highly elastic balls are stacked vertically with the larger mass ball on the bottom and released from a certain height, what happens when the bottom ball hits the ground and bounces back under the influence of gravity? There are many experimental videos on YouTube, such as \"Stacked Ball Drop.\" We can address this issue using previously written simulation programs for \"Free Fall\" and \"One-Dimensional Elastic Collision.\"\n\nScreenshot of the program for the two ball collision during free fall:\n![image](https://hackmd.io/_uploads/SyOtLjT_C.png)\n\nThe program for the two ball collision during free fall features two balls.\n\nParameter Settings\n\nSet variables for small ball radius, mass, color, height above the ground, floor length, acceleration due to gravity, time, and time intervals. Please refer to the program code for the corresponding variable names.\n\nDisplay Settings\nCode for creating animation windows, floors, small balls, and drawing windows has appeared many times in previous animations and will not be detailed here. A special feature in the animation window is the addition of an option, range=L, which limits the display range of the animation window to prevent the screen from automatically shrinking when the upper ball bounces too high.\n\nObject Movement\nUpdate the velocity and position of the small balls.\nIf b1.pos.y <= 0, it means b1 hits the floor, and its velocity is reversed to make b1 bounce.\nIf b2.pos.y - b1.pos.y <= r1 + r2, it means b1 and b2 collide. Insert m1, b1.v.y, m2, b2.v.y into the custom function af_col_v to calculate the post-collision velocity, then reassign to b1.v.y and b2.v.y.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Parameters\nm1 = 1.0\nm2 = 0.1\nr1 = 0.05\nr2 = 0.05\nL = 2*r1+r2\ng = 9.8\nt = 0\ndt = 0.001\n\n# Animation Setup\nscene = canvas(width=600, height=600, center=vector(0, -L/2, 0), range=L)\nfloor = box(pos=vector(0, -L/2, 0), length=0.8, height=0.005, width=0.8, color=color.blue)\nb1 = sphere(pos=vector(0, -r1, 0), radius=r1, color=color.red)\nb2 = sphere(pos=vector(0, r2, 0), radius=r2, color=color.yellow)\n\nb1.v = vector(0, 0, 0)\nb2.v = vector(0, 0, 0)\n\ndef af_col_v(m1, v1, m2, v2):\n    return (m1-m2)/(m1+m2)*v1+2*m2/(m1+m2)*v2\n\nwhile True:\n    rate(1000)\n    b1.v.y -= g*dt\n    b1.pos.y += b1.v.y*dt\n    b2.v.y -= g*dt\n    b2.pos.y += b2.v.y*dt\n    if b1.pos.y <= -L/2+r1:\n        b1.v.y = -b1.v.y\n    if b2.pos.y - b1.pos.y <= r1 + r2:\n        v1prime = af_col_v(m1, b1.v.y, m2, b2.v.y)\n        v2prime = af_col_v(m2, b2.v.y, m1, b1.v.y)\n        b1.v.y = v1prime\n        b2.v.y = v2prime",
      "mode": "initial",
      "timestamp": "2024-07-24 12:23:07",
      "serial_number": 1
    }
  ]
}