{
  "session_id": 644,
  "log": [
    {
      "input": "Electric Field, Two Spherical Charged Bodies\n\n# Gravitational Field and Electric Field\n\nIf there is a sphere with mass $M$ uniformly distributed throughout, and taking the center of the sphere with mass $M$ as the origin, the gravitational field at a position vector $\\vec{r}$ in space is given by:\n$$\n\\vec{g} = - \\frac{GM}{r^2} \\hat{r}\n$$\nIn the equation above, the negative sign indicates that the direction of the gravitational field points toward the center of the sphere. If there are multiple spheres, the gravitational field due to the $i^{th}$ sphere, which has a mass of $M_i$ and is centered at $\\vec{r}_i$, is:\n$$\n\\vec{g} = \\sum \\vec{g}_i = -G \\sum \\frac{M_i (\\vec{r} - \\vec{r}_i)}{|\\vec{r} - \\vec{r}_i|^3}\n$$\n\nIt would be nearly impossible to draw the strength and direction of the gravitational field at every point on a blackboard. Below is a diagram I made to illustrate Earth's gravitational field.\n\n### Diagram of Earth's Gravitational Field\n\nIn the following lessons, we intend to take a point at regular intervals in space and use the length and direction of an arrow to represent the gravitational field at that point. Thus, we first practice using a for loop to draw an arrow at regular intervals in space in the program \"Gravitational Field, can be modified to depict different planets\". In addition to drawing arrows, this program calculates the gravitational field at that point and updates the length and direction of the arrows. If we can successfully depict the gravitational field of a sphere, in the program \"Gravitational Field, can be modified to depict different planets,\" we will then proceed to represent the gravitational fields established by two or even multiple bodies.\n\nAfter completing the depiction of the gravitational fields, we can use the same method to illustrate the electric field created by charged spheres in space, with the mathematical form expressed as:\n$$\n\\vec{E} = \\sum \\vec{E}_i = k \\sum \\frac{Q_i (\\vec{r} - \\vec{r}_i)}{|\\vec{r} - \\vec{r}_i|^3}\n$$\nWe just need to make minor modifications to the program \"Gravitational Field, can be modified to depict different planets\" to depict the electric field created by two charged spheres in space.\n\nProgram to be written: Electric Field, Two Spherical Charged Bodies\n\nThe program \"Electric Field, Two Spherical Charged Bodies\" is almost identical to \"Gravitational Field, can be modified to depict different planets,\" with the following differences explained:\n\nReduce the radius of the sphere and the width of the display significantly, set the charge of the charged bodies and the electrostatic constant.\nLines 23 to 31, when creating a custom class Ball, do not use inheritance; instead, create an object of this class by entering position pos, radius radius, color color, and charge charge, forming a sphere, and customize the function to calculate the electric field.\nIf the charge of the left sphere is q1 and the right sphere is q2, below are the simulation results for three different combinations.\n\nScreenshots of the program code should be illustrated:\n\nScreenshot of simulation results for q1 = 1, q2 = -5:\n![image](https://hackmd.io/_uploads/B18ne26uR.png)\n\nScreenshot of simulation results for q1 = 5, q2 = -5:\n![image](https://hackmd.io/_uploads/rkX6g36u0.png)\n\nScreenshot of simulation results for q1 = 5, q2 = -1:\n![image](https://hackmd.io/_uploads/SJQCeh6uC.png)\n(1) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n# Constants\nk = 8.99e9\n# Field point\nx, y, z = 0.5, 0, 0\nr = vector(x, y, z)\n# Charges\nq1 = 1\nq2 = -5\nr1 = vector(-0.2, 0, 0)\nr2 = vector(0.2, 0, 0)\n# Calculate the electric field\nE1 = k*q1*(r-r1)/mag(r-r1)**3\nE2 = k*q2*(r-r2)/mag(r-r2)**3\nE = E1 + E2\n# Create 3D objects\nball1 = sphere(pos=r1, radius=0.02, color=color.red)\nball2 = sphere(pos=r2, radius=0.02, color=color.blue)\nfield = arrow(pos=r, axis=E, color=color.yellow)\n# Update the electric field\nwhile True:\n    rate(100)  # Limit the execution speed to 100 loops per second\n    r.x = r.x + 0.01\n    E1 = k*q1*(r-r1)/mag(r-r1)**3\n    E2 = k*q2*(r-r2)/mag(r-r2)**3\n    E = E1 + E2\n    field.axis = E\n    field.pos = r",
      "mode": "initial",
      "timestamp": "2024-07-24 06:43:28",
      "serial_number": 1
    }
  ]
}