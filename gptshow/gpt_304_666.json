{
  "session_id": 666,
  "log": [
    {
      "input": "# Velocity Selector\n\nA velocity selector is a device used to filter particles with a specific velocity range. Its basic structure is shown in the diagram below. Two parallel charged plates create a downward electric field, coupled with a magnetic field perpendicular to the plane of the paper. When positively charged particles enter the velocity selector from the left side with a horizontal velocity \\( v \\), the particle experiences a downward electrostatic force and an upward magnetic force. When the net force is zero, the particle moves forward at a constant velocity, where\n$$\nqE = qvB \\Rightarrow v = \\frac{E}{B} = \\frac{V}{Bd}\n$$\n\nIf a barrier with only a small hole is added on the right side, only particles moving straight to the right can pass through. This allows control of the particle's velocity magnitude by varying the electric and magnetic field values. There are two programs included:\n\n- Program 20-1: Draws the electric field, magnetic field, parallel charged plates, and particle trajectories. The particle stops moving after hitting the parallel charged plates.\n- Program 20-2: Based on 20-1, a barrier is added at the exit.\n\nWrite a program: 20-1: Draw the electric field, magnetic field, parallel charged plates, and particle trajectories. The particle stops moving after hitting the parallel charged plates.\n\n\nVelocity Selector Structure Diagram:\n![image](https://hackmd.io/_uploads/HJlvr2auR.png)\n\n\n## Parameter Settings\n\nVariables such as size, m, v0, q, V, d, L, B, E_field, B_field, t, dt are set here, with their purposes commented in the respective lines. To make the animation smoother, the particle's mass is much larger than that of a real atomic nucleus.\n\n## Display Settings\n\nCreates the animation window, parallel charged plates, horizontal line, and charged particle.\n\nGenerates arrows indicating velocity and acceleration.\n\nGenerates arrows and labels for the electric field and magnetic field. The syntax for labels is:\n\n[label_name] = label(pos=[position vector], text=\"[label content]\", xoffset=[x-direction offset], yoffset=[y-direction offset], color=[color name or RGB value], font=\"[font name]\")\nReplace the content in [] with the required parameters.\n\nOpens the drawing window, draws the ball's position, velocity, acceleration, and their relationship with time.\n\nObject Motion\nTo stop the animation when the charged particle reaches the far right of the screen or hits the parallel charged plates, set the while loop condition as charge.pos.x < L and abs(charge.pos.y) < d/2 - p1.height - size.\n\nCalculates the net force on the charged particle, as there are electric and magnetic fields only between the parallel charged plates, set to zero outside. The formula for the net force is:\n\n$$\n\\vec{F} = q(\\vec{E} + \\vec{v} \\times \\vec{B})\n$$\nCorresponding code:\n\nF = q*(E_field + cross(charge.v, B_field))\nUpdates the charged particle's acceleration, velocity, and position.\n\nUpdates the arrows indicating velocity and acceleration, only showing the direction to avoid automatic resizing of the animation.\n\nUpdates time.\n\n\n\nSimulation Results\n\nBelow are five different data combinations and test results:\n\n1.v0 = 10, V = 1, d = 0.1, B = 1 \u21d2 Constant velocity straight-line motion\n\nScreenshot:\n![image](https://hackmd.io/_uploads/r1w2B2TuC.png)\n\n\n2.q > 0, v0 = 20 Other conditions same as combination 1 \u21d2 Upward shift\n\nScreenshot:\n![image](https://hackmd.io/_uploads/H1oaB26uC.png)\n\n3.q > 0, d = 0.2 Other conditions same as combination 1 \u21d2 Upward shift\n\nScreenshot:\n![image](https://hackmd.io/_uploads/SyL1U36OC.png)\n\n\n4.q > 0, V = 2 Other conditions same as combination 1 \u21d2 Downward shift\n\n\nScreenshot:\n![image](https://hackmd.io/_uploads/ByvlInp_R.png)\n\n5.q > 0, B = 5 Other conditions same as combination 1 \u21d2 Upward shift\n\nScreenshot:\n![image](https://hackmd.io/_uploads/Bk1fLna_A.png)\n\n\n\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Parameter Settings\nsize = 0.02\nm, v0, q, V, d, L, B = 1E-11, 10, 1, 1, 0.1, 1, 1\nE_field, B_field = vector(0, -V/d, 0), vector(0, 0, B)\nt, dt = 0, 0.001\n\n# Display Settings\nscene = canvas(width=500, height=500, center=vector(L/2, 0, 0), background=vector(0.5, 0.5, 0))\np1 = box(length=L, height=d/200, width=d*3, color=color.yellow)\np2 = box(length=L, height=d/200, width=d*3, pos=vector(L/2, -d/2, 0), color=color.yellow)\nhl = box(length=L, height=d/200, width=d/3, pos=vector(L/2, 0, 0), color=color.red)\ncharge = sphere(radius=size, color=color.red)\ncharge.m = m\ncharge.q = q\ncharge.pos = vector(0, 0, 0)\ncharge.v = vector(v0, 0, 0)\nv_arrow = arrow(color=color.green)\na_arrow = arrow(color=color.blue)\nE_arrow = arrow(pos=vector(L/2, d/4, 0), axis=E_field/10, color=color.magenta)\nB_arrow = arrow(pos=vector(L/2, -d/4, 0), axis=B_field*20, color=color.cyan)\nE_label = label(pos=E_arrow.pos, text='E', xoffset=20, yoffset=-25, color=E_arrow.color)\nB_label = label(pos=B_arrow.pos, text='B', xoffset=20, yoffset=-25, color=B_arrow.color)\n\n# Simulation\nwhile charge.pos.x < L and abs(charge.pos.y) < d/2 - p1.height - size:\n    rate(1000)\n    if charge.pos.x <= 0 or charge.pos.x >= L:\n        F = vector(0, 0, 0)\n    else:\n        F = charge.q * (E_field + cross(charge.v, B_field))\n    charge.a = F / charge.m\n    charge.v += charge.a*dt\n    charge.pos += charge.v*dt\n    v_arrow.pos = charge.pos\n    v_arrow.axis = charge.v/3\n    a_arrow.pos = charge.pos\n    a_arrow.axis = charge.a/30\n    t += dt",
      "mode": "initial",
      "timestamp": "2024-07-24 07:27:44",
      "serial_number": 1
    }
  ]
}