{
  "session_id": 655,
  "log": [
    {
      "input": "**Velocity Selector with Baffle at the Exit**\n\n# Velocity Selector\n\nA velocity selector is a device used to filter charged particles with specific speeds, with a basic structure as shown in the diagram below. It uses two parallel charged plates to create a downward electric field, combined with a magnetic field entering perpendicularly to the plane of the paper. If a positively charged particle enters the selector from the left side at horizontal speed \\( v \\), the particle will experience a downward electrostatic force and an upward magnetic force. When the resultant force is zero, the particle moves forward at a constant speed, where\n$$\nqE = qvB \\Rightarrow v = \\frac{E}{B} = \\frac{V}{Bd}\n$$\n\nIf a baffle with only a small hole is added on the right side, only particles moving straight to the right can pass through. This allows the control of particle speed values passing through the device by altering the values of the electric and magnetic fields. There are two programs below:\n\n- Program 20-1: Draws the electric field, magnetic field, parallel charged plates, and particle trajectories. The particle stops moving after hitting the parallel charged plates.\n- Program 20-2: Based on 20-1, adds a baffle at the exit.\n\nProgram to be written: 20-2: Based on 20-1, adds a baffle at the exit.\n\n### Program Design Part\n\nOnly three modifications were made:\n\nAdding a baffle at the exit:\n```python\nb1 = box(pos=vec(L/2, d/4 + size, 0), size=vec(0.01*L, 0.5*d, L), color=color.gray(0.7))\nb2 = box(pos=vec(L/2, -d/4 - size, 0), size=vec(0.01*L, 0.5*d, L), color=color.gray(0.7))\n```\nChanges in the while loop operation:\n```python\n(charge.pos.x + size + b1.length/2 < L/2 and abs(charge.pos.y) < d/2 - p1.height - size) or \\\n(L/2 < charge.pos.x + size + b1.length/2 < L and abs(charge.pos.y) < 0.1*size)\n```\n(a) First part effect: Animation continues as long as the particle is between the parallel charged plates and hasn't yet hit them.\n(b) Second part effect: Animation continues as long as the particle hasn't reached the screen edge or hit the baffle.\n\n### Simulation Results\n\nBelow are five different data combinations and their results:\n\n1. \\( v0 = 10, V = 1, d = 0.1, B = 1 \\) \u21d2 Straight-line motion at constant speed\n![image](https://hackmd.io/_uploads/Hk0Ywhp_A.png)\n\n2. \\( q > 0, v0 = 20 \\) other conditions same as combination 1 \u21d2 Upward shift\n![image](https://hackmd.io/_uploads/SyQcD3puR.png)\n\n3. \\( q > 0, d = 0.2 \\) other conditions same as combination 1 \u21d2 Upward shift\n![image](https://hackmd.io/_uploads/Byqcv26uC.png)\n\n4. \\( q > 0, V = 2 \\) other conditions same as combination 1 \u21d2 Downward shift\n![image](https://hackmd.io/_uploads/S1RqDhadC.png)\n\n5. \\( q > 0, B = 5 \\) other conditions same as combination 1 \u21d2 Upward shift\n![image](https://hackmd.io/_uploads/SJviDn6OR.png)\n\n### Cyber Input Variable Mapping Information:\n\n1. Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n2. Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(1) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\nL = 10  # length of the velocity selector\nd = 0.1  # distance between two plates\nB = 1  # magnetic field\nV = 1  # voltage between two plates\nq = 1  # charge of the particle\nm = 1  # mass of the particle\nv0 = 10  # initial speed of the particle\nsize = 0.005  # size of the particle\ndt = 0.001  # time step size\nE = V/d  # electric field\n\nscene = canvas(width=800, height=800, background=vec(0.5, 0.5, 0))\n\np1 = box(pos=vec(L/2, -d/2, 0), size=vec(L, 0.01*d, L), color=color.blue)  # plate 1\np2 = box(pos=vec(L/2, d/2, 0), size=vec(L, 0.01*d, L), color=color.blue)  # plate 2\nb1 = box(pos=vec(L/2, d/4 + size, 0), size=vec(0.01*L, 0.5*d, L), color=color.gray(0.7))  # baffle 1\nb2 = box(pos=vec(L/2, -d/4 - size, 0), size=vec(0.01*L, 0.5*d, L), color=color.gray(0.7))  # baffle 2\ncharge = sphere(pos=vec(0, -d/4, 0), v=vec(v0, 0, 0), radius=size, color=color.red)  # charged particle\n\nwhile True:\n    rate(1000)\n    if (charge.pos.x + size + b1.length/2 < L/2 and abs(charge.pos.y) < d/2 - p1.height - size) or \\\n       (L/2 < charge.pos.x + size + b1.length/2 < L and abs(charge.pos.y) < 0.1*size):\n        force = q*vec(0, E, 0) + q*cross(charge.v, vec(0, 0, B))  # force on the charged particle\n        charge.v += force/m*dt  # update the velocity of the particle\n        charge.pos += charge.v*dt  # update the position of the particle\n    else:\n        break",
      "mode": "initial",
      "timestamp": "2024-07-24 07:21:55",
      "serial_number": 1
    }
  ]
}