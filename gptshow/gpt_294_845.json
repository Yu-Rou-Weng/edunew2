{
  "session_id": 845,
  "log": [
    {
      "input": "Please write the VPython code for \"Three-dimensional Elastic Collision, m1 = m2\"\n\nFormula for Three-dimensional Elastic Collisions:\n\nThis program mainly references the lecture notes \"VCollision Physics Course for Freshmen: Collision\" by Professor Ming-Feng Shih of the Department of Physics at National Taiwan University, but the code has been rewritten in the Python 3.X format. After completing this program, it can be used to simulate collisions between ideal gas molecules and produce a graph of the distribution of molecular numbers versus velocity. However, as this program is relatively complex, please refer to the VPython example program \"A hard-sphere gas.\"\n\nProgram to be written: Three-dimensional Elastic Collision, m1 = m2, both spheres have equal mass\n\n### Theoretical Derivation\n\nAssume there are two elastic spheres of equal size in space, with masses $m_1$ and $m_2$ respectively, and initial velocities $v_1$ and $v_2$. Derive the formula for the velocities of the spheres after collision. The special case when the masses are equal is known:\n\n$$\nv_1' = v_1 + \\frac{(v_2 - v_1) \\cdot (r_1 - r_2)}{|r_1 - r_2|^2} (r_1 - r_2)\n$$\n\n$$\nv_2' = v_2 + \\frac{(v_1 - v_2) \\cdot (r_2 - r_1)}{|r_2 - r_1|^2} (r_2 - r_1)\n$$\n\nProof:  \nAssuming the change in momentum during the collision between the two spheres is $\\Delta p$, then:\n\n$$\n\\Delta p_1 = \\Delta p \\frac{r_1 - r_2}{|r_1 - r_2|}\n$$\n\n$$\n\\Delta p_2 = - \\Delta p_1 = \\Delta p \\frac{r_2 - r_1}{|r_2 - r_1|}\n$$\n\nThe momenta of the spheres after the collision are:\n\n$$\np_1' = p_1 + \\Delta p_1 \\Rightarrow m_1 v_1' = m_1 v_1 + \\Delta p \\frac{r_1 - r_2}{|r_1 - r_2|}\n$$\n\n$$\np_2' = p_2 + \\Delta p_2 \\Rightarrow m_2 v_2' = m_2 v_2 + \\Delta p \\frac{r_2 - r_1}{|r_2 - r_1|}\n$$\n\nSince the collision is elastic, there is no loss of kinetic energy before and after the collision:\n\n$$\n\\frac{1}{2} m_1 v_1^2 + \\frac{1}{2} m_2 v_2^2 = \\frac{1}{2} m_1 v_1'^2 + \\frac{1}{2} m_2 v_2'^2\n$$\n\nSubstitute $v_1'$ and $v_2'$ into the equation and multiply both sides by 2:\n\n$$\nm_1 v_1^2 + m_2 v_2^2 = m_1 \\left[ v_1 + \\Delta p \\frac{(r_1 - r_2)}{m_1 |r_1 - r_2|} \\right]^2 + m_2 \\left[ v_2 + \\Delta p \\frac{(r_2 - r_1)}{m_2 |r_2 - r_1|} \\right]^2\n$$\n\nSince $(r_1 - r_2)^2 = |r_1 - r_2|^2$, simplify the equation:\n\n$$\n2 \\Delta p \\frac{(v_1 - v_2) \\cdot (r_1 - r_2)}{|r_1 - r_2|} + (\\Delta p)^2 \\left( \\frac{1}{m_1} + \\frac{1}{m_2} \\right) = 0\n$$\n\n$$\n2 \\frac{(v_1 - v_2) \\cdot (r_1 - r_2)}{|r_1 - r_2|} + \\Delta p \\frac{m_1 + m_2}{m_1 m_2} = 0\n$$\n\n$$\n\\Delta p = \\frac{2 m_1 m_2}{m_1 + m_2} \\frac{(v_2 - v_1) \\cdot (r_1 - r_2)}{|r_1 - r_2|}\n$$\n\nSubstituting back into the above equations yields the post-collision velocities:\n\n$$\nv_1' = v_1 + \\frac{2 m_2}{m_1 + m_2} \\frac{(v_2 - v_1) \\cdot (r_1 - r_2)}{|r_1 - r_2|^2} (r_1 - r_2)\n$$\n\n$$\nv_2' = v_2 + \\frac{2 m_1}{m_1 + m_2} \\frac{(v_1 - v_2) \\cdot (r_2 - r_1)}{|r_2 - r_1|^2} (r_2 - r_1)\n$$\n\nScreenshot:\n![image](https://hackmd.io/_uploads/Hyuy9sTdR.png)\n\nParameter Settings\nVariables are set for the radius, mass, color, initial velocity of the spheres, screen size, time, and time interval. Please refer to the variable names in the code.\n\nScreen Setup\nThe code for creating the animation window, spheres, and drawing window has appeared many times in previous animations and will not be detailed here.\n\nCustom Function\nThe custom function af_col_v calculates the velocity after collision. The content of the function is:\n\nv1_prime = v1 + dot((v2 - v1), (x1 - x2)) / mag2(x1 - x2) * (x1 - x2)\nv2_prime = v2 + dot((v1 - v2), (x2 - x1)) / mag2(x2 - x1) * (x2 - x1)\nThis implements the theoretical formula in code, using two vector calculations:\n\ndot(a, b): Takes the dot product of vectors a and b.\nmag2(a) = a.mag2: Calculates the square of the magnitude of vector a.\n\nMotion of Objects\nUpdate the positions of the spheres.\nIf mag(b1.pos - b2.pos) <= r1 + r2 and dot((b1.pos - b2.pos), (b1.v - b2.v)) <=0, it indicates that b1 and b2 have collided. Substitute b1.v, b2.v, b1.pos, b2.pos into the custom function af_col_v to calculate the post-collision velocities, then reassign to b1.v and b2.v.\n\n\nThere is a stationary red ball with radius 0.5 and mass 1 at (0,0,0). A blue ball with a radius of 0.5 and mass 1 starts moving from (-5,0.5,0) with an initial velocity of (8, 0, 0). After colliding with the red ball, the blue ball undergoes the aforementioned three-dimensional elastic collision.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Initialize objects\nball1 = sphere(pos=vec(0, 0, 0), radius=1, color=color.red)\nball2 = sphere(pos=vec(-5, 0.5, 0), radius=1, color=color.blue)\n\n# Set initial conditions\nball1.m = 1\nball2.m = 1\nball1.v = vec(0, 0, 0)\nball2.v = vec(8, 0, 0)\n\n# Create a function to calculate velocities after the collision\ndef af_col_v(v1, v2, x1, x2):\n    v1_prime = v1 + dot((v2 - v1), (x1 - x2)) / mag2(x1 - x2) * (x1 - x2)\n    v2_prime = v2 + dot((v1 - v2), (x2 - x1)) / mag2(x2 - x1) * (x2 - x1)\n    return v1_prime, v2_prime\n\ndt = 0.01\nt = 0\n\nwhile t < 100:\n    rate(100)\n    # Update positions\n    ball1.pos = ball1.pos + ball1.v*dt\n    ball2.pos = ball2.pos + ball2.v*dt\n\n    # Check for collision\n    if mag(ball1.pos - ball2.pos) <= 2 and dot((ball1.pos - ball2.pos), (ball1.v - ball2.v)) <= 0:\n        # Calculate velocities after collision\n        ball1.v, ball2.v = af_col_v(ball1.v, ball2.v, ball1.pos, ball2.pos)\n\n    t = t + dt",
      "mode": "initial",
      "timestamp": "2024-07-26 11:47:13",
      "serial_number": 1
    }
  ]
}