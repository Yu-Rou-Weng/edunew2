{
  "session_id": 1017,
  "log": [
    {
      "input": "1. Screen Settings:</br>Set the canvas width to 700 and height to 400. Do not change the canvas size.</br>2. Object Motion & Parameter Settings:</br>Create a VPython animation to illustrate the following physics experiment:<br><span style=\"color:red;\">This is a simulation of projectile motion with only gravitational force acting on the object. The object is launched horizontally with an initial velocity \\( v_0 \\) from a height \\( h \\). The object accelerates downward due to gravity and bounces off the ground elastically when it hits the ground.</span>\n\n3. Cyber Input Variable Mapping Information:\n    (1) initial_velocity is mapped to the variable named Angle_I with an initial value set to a 1-dimensional value 5\n    (2) When the value of Angle_I changes, let the animation rerun to the starting point and start with the updated initial_velocity.\n    \n\n3. Cyber Input Variable Mapping Information:\n    (1) height is mapped to the variable named Gyroscope_I with an initial value set to a 3-dimensional vector [[0, 0, 4]]\n    (2) When the value of Gyroscope_I changes, let the animation rerun to the starting point and start with the updated height.",
      "output": "```python\nfrom vpython import *\n\n# Screen Settings\nscene.width = 700\nscene.height = 400\n\n# Object Motion & Parameter Settings\nground = box(pos=vector(0, -0.5, 0), size=vector(20, 1, 10), color=color.green)\nball = sphere(pos=vector(0, 0, 0), radius=0.5, color=color.red, make_trail=True)\n\ndef launch_projectile(angle, height):\n    ball.pos = vector(0, height[0][2], 0)\n    ball.velocity = vector(angle[0], 0, 0)\n    \n    dt = 0.01\n    g = vector(0, -9.81, 0)\n    \n    while ball.pos.y >= 0:\n        rate(100)\n        ball.pos = ball.pos + ball.velocity * dt\n        ball.velocity = ball.velocity + g * dt\n        \n        if ball.pos.y <= 0 and ball.velocity.y < 0:\n            ball.velocity.y *= -1\n\n# Cyber Input Variable Mapping Information\nAngle_I = [5]\nGyroscope_I = [[0, 0, 4]]\n\ndef on_change_Angle_I(change):\n    launch_projectile(change['new'], Gyroscope_I)\n\ndef on_change_Gyroscope_I(change):\n    launch_projectile(Angle_I, change['new'])\n\nAngle_I.observe(on_change_Angle_I, names='value')\nGyroscope_I.observe(on_change_Gyroscope_I, names='value')\n\nlaunch_projectile(Angle_I, Gyroscope_I)\n```",
      "mode": "initial",
      "timestamp": "2024-09-12 07:58:17",
      "serial_number": 1
    }
  ]
}