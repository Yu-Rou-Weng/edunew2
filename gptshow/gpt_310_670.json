{
  "session_id": 670,
  "log": [
    {
      "input": "Rutherford scattering, sequentially substituting b = 0, 1, 2, 3, \u2026, 10 with a for-loop\n\nThe Rutherford scattering experiment is key evidence for the existence of atomic nuclei. In this experiment, alpha particles (helium nuclei) are directed towards a gold foil. The electrostatic force between the alpha particles and the gold nuclei is repulsive. Ignoring the effects of gravity and considering that the gold nuclei remain stationary, the electrostatic force passing through the gold nuclei conserves the angular momentum relative to the gold nuclei. In this interaction, only the electrostatic force does work, conserving the mechanical energy of the system.\n\nDiagram of the Rutherford scattering experiment:\n![image](https://hackmd.io/_uploads/BkYh23pOR.png)\n\nThe diagram below represents the Rutherford scattering experiment. When the alpha particle is at infinity, its velocity is directed to the right. The perpendicular distance between the gold nucleus and the direction of velocity is called the impact parameter, usually denoted as b. The objective of this program is to vary b and plot the relationships of the kinetic energy of the alpha particle, the system's potential energy, mechanical energy, and time, to find the upward displacement of the alpha particle.\n\nProgramming Part\nThe program for Rutherford scattering, using a for-loop to sequentially input b = 0, 1, 2, 3, \u2026, 10, is similar to the standard Rutherford scattering program. Only the modifications are described below.\n\nIn the display setup, only generate the gold nucleus at first.\n\nUse a for-loop to sequentially generate the values 0, 1, 2, \u2026, 10 as b, and place the particle generation and the particle motion part of the while-loop inside the for-loop.\n\nWhen the while-loop completes, use arrow_v.visible = False and arrow_a.visible = False to hide the arrows.\n![image](https://hackmd.io/_uploads/SkGyTna_R.png)\n\nPrint the impact parameter b and the vertical displacement value y.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Constants\nK = 8.99E9\nQ1 = 79 * 1.6E-19\nQ2 = 2 * 1.6E-19\nMass = 6.7E-27\ndt = 1E-21\nb = 0\n\nscene = canvas(width=600, height=600, background=vec(0, 0, 0))\n\ngold = sphere(pos=vec(0, 0, 0), radius=1E-14, color=color.yellow)\n\nfor b in range(11):  # for-loop to input b values from 0 to 10\n    alpha = sphere(pos=vec(-5E-14, b*1E-15, 0), radius=Radius_I, color=color.red)\n    alpha.v = vec(2E6, 0, 0)\n    alpha.trail = curve(color=alpha.color)\n    arrow_v = arrow(pos=alpha.pos, axis=alpha.v, color=color.green)\n    arrow_a = arrow(pos=alpha.pos, color=color.blue)\n\n    while alpha.pos.x < 5E-14:\n        rate(10000)\n        r = alpha.pos - gold.pos\n        F = K * Q1 * Q2 * r.hat / mag(r)**2\n        alpha.v += F / Mass * dt\n        alpha.pos += alpha.v * dt\n        alpha.trail.append(pos=alpha.pos)\n        arrow_v.pos = alpha.pos\n        arrow_v.axis = alpha.v / 2E6 * 3E-14\n        arrow_a.pos = alpha.pos\n        arrow_a.axis = -F / mag(F) * 3E-14\n    arrow_v.visible = False\n    arrow_a.visible = False\n    print('b =', b, ' alpha.y =', alpha.pos.y)\n    alpha.clear_trail()",
      "mode": "initial",
      "timestamp": "2024-07-24 07:31:16",
      "serial_number": 1
    },
    {
      "input": "Please update the program by fixing the following error:\nRadius_I is not defined\n\nHere's the current program:\nRadius_I = 1\n# \u4ee5\u4e0a\u8b8a\u6578\u8b80\u53d6\u611f\u6e2c\u5668\u5f8c\u6703\u81ea\u52d5\u66f4\u65b0\n\n\n# \u8acb\u52ff\u4fee\u6539\u4e0a\u65b9\u7a0b\u5f0f\u78bc\n\nfreq = 120        # \u66f4\u65b0\u983b\u7387(Hz)\n\n# \u521d\u59cb\u5316\u5834\u666f\ndef scene_init():\n    global label_info\n    scene = display(width=800, height=700, center=vector(10, 15, 0), background=vector(0.5, 0.5, 0))\n    label_info = label(pos=vec(10, 20, 0), text='')\n\n# \u6bcf\u79d2\u9418\u66f4\u65b0\u986f\u793a\u6578\u64da\ndef update_info():\n    global label_info\n    label_info.text = 'Radius_I: {} \\n'.format(Radius_I)\n\nscene_init()\n\ncnt = 0\nwhile True:\n    rate(freq)\n    cnt = cnt + 1\n    if cnt % (freq // 5) == 0:\n        update_info()",
      "output": "from vpython import *\n\n# Constants\nK = 8.99E9\nQ1 = 79 * 1.6E-19\nQ2 = 2 * 1.6E-19\nMass = 6.7E-27\ndt = 1E-21\nb = 0\nRadius_I = 1\n\nscene = canvas(width=600, height=600, background=vec(0, 0, 0))\n\ngold = sphere(pos=vec(0, 0, 0), radius=1E-14, color=color.yellow)\n\nfor b in range(11):  \n    alpha = sphere(pos=vec(-5E-14, b*1E-15, 0), radius=Radius_I, color=color.red)\n    alpha.v = vec(2E6, 0, 0)\n    alpha.trail = curve(color=alpha.color)\n    arrow_v = arrow(pos=alpha.pos, axis=alpha.v, color=color.green)\n    arrow_a = arrow(pos=alpha.pos, color=color.blue)\n\n    while alpha.pos.x < 5E-14:\n        rate(10000)\n        r = alpha.pos - gold.pos\n        F = K * Q1 * Q2 * r.hat / mag(r)**2\n        alpha.v += F / Mass * dt\n        alpha.pos += alpha.v * dt\n        alpha.trail.append(pos=alpha.pos)\n        arrow_v.pos = alpha.pos\n        arrow_v.axis = alpha.v / 2E6 * 3E-14\n        arrow_a.pos = alpha.pos\n        arrow_a.axis = -F / mag(F) * 3E-14\n    arrow_v.visible = False\n    arrow_a.visible = False\n    print('b =', b, ' alpha.y =', alpha.pos.y)\n    alpha.clear_trail()",
      "mode": "fix_error",
      "timestamp": "2024-07-24 07:31:34",
      "serial_number": 2
    },
    {
      "input": "Please update the program by fixing the following error:\nRadius_I is not defined\n\nHere's the current program:\nfrom vpython import *\n\n# Constants\nK = 8.99E9\nQ1 = 79 * 1.6E-19\nQ2 = 2 * 1.6E-19\nMass = 6.7E-27\ndt = 1E-21\nb = 0\n\nscene = canvas(width=600, height=600, background=vec(0, 0, 0))\n\ngold = sphere(pos=vec(0, 0, 0), radius=1E-14, color=color.yellow)\n\nfor b in range(11):  # for-loop to input b values from 0 to 10\n    alpha = sphere(pos=vec(-5E-14, b*1E-15, 0), radius=Radius_I, color=color.red)\n    alpha.v = vec(2E6, 0, 0)\n    alpha.trail = curve(color=alpha.color)\n    arrow_v = arrow(pos=alpha.pos, axis=alpha.v, color=color.green)\n    arrow_a = arrow(pos=alpha.pos, color=color.blue)\n\n    while alpha.pos.x < 5E-14:\n        rate(10000)\n        r = alpha.pos - gold.pos\n        F = K * Q1 * Q2 * r.hat / mag(r)**2\n        alpha.v += F / Mass * dt\n        alpha.pos += alpha.v * dt\n        alpha.trail.append(pos=alpha.pos)\n        arrow_v.pos = alpha.pos\n        arrow_v.axis = alpha.v / 2E6 * 3E-14\n        arrow_a.pos = alpha.pos\n        arrow_a.axis = -F / mag(F) * 3E-14\n    arrow_v.visible = False\n    arrow_a.visible = False\n    print('b =', b, ' alpha.y =', alpha.pos.y)\n    alpha.clear_trail()",
      "output": "from vpython import *\n\n# Constants\nK = 8.99E9\nQ1 = 79 * 1.6E-19\nQ2 = 2 * 1.6E-19\nMass = 6.7E-27\ndt = 1E-21\nb = 0\nRadius_I = 1E-14  # define Radius_I\n\nscene = canvas(width=600, height=600, background=vec(0, 0, 0))\n\ngold = sphere(pos=vec(0, 0, 0), radius=1E-14, color=color.yellow)\n\nfor b in range(11):  # for-loop to input b values from 0 to 10\n    alpha = sphere(pos=vec(-5E-14, b*1E-15, 0), radius=Radius_I, color=color.red)\n    alpha.v = vec(2E6, 0, 0)\n    alpha.trail = curve(color=alpha.color)\n    arrow_v = arrow(pos=alpha.pos, axis=alpha.v, color=color.green)\n    arrow_a = arrow(pos=alpha.pos, color=color.blue)\n\n    while alpha.pos.x < 5E-14:\n        rate(10000)\n        r = alpha.pos - gold.pos\n        F = K * Q1 * Q2 * r.hat / mag(r)**2\n        alpha.v += F / Mass * dt\n        alpha.pos += alpha.v * dt\n        alpha.trail.append(pos=alpha.pos)\n        arrow_v.pos = alpha.pos\n        arrow_v.axis = alpha.v / 2E6 * 3E-14\n        arrow_a.pos = alpha.pos\n        arrow_a.axis = -F / mag(F) * 3E-14\n    arrow_v.visible = False\n    arrow_a.visible = False\n    print('b =', b, ' alpha.y =', alpha.pos.y)\n    alpha.clear_trail()",
      "mode": "fix_error",
      "timestamp": "2024-07-24 07:31:35",
      "serial_number": 3
    }
  ]
}