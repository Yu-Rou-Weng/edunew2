{
  "session_id": 645,
  "log": [
    {
      "input": "Electric Field, Two Spherical Charged Bodies\n\n# Gravitational Field and Electric Field\n\nIf there is a sphere with mass $M$ uniformly distributed within it in space, and taking the center of the sphere with mass $M$ as the origin, the gravitational field at a position in space with position vector $\\vec{r}$ is given by:\n$$\n\\vec{g} = - \\frac{GM}{r^2} \\hat{r}\n$$\nThe negative sign in the formula indicates that the direction of the gravitational field points towards the center of the sphere. If there are multiple spheres, the $i$-th sphere with mass $M_i$ and center position $\\vec{r}_i$, then the gravitational field is:\n$$\n\\vec{g} = \\sum \\vec{g}_i = -G \\sum \\frac{M_i (\\vec{r} - \\vec{r}_i)}{|\\vec{r} - \\vec{r}_i|^3}\n$$\n\nIt would be nearly impossible to draw the intensity and direction of the gravitational field at each position on a blackboard. Below is a schematic diagram of Earth's gravitational field that I drew.\n\n### Earth's Gravitational Field Schematic\n\nIn the following lessons, we aim to select a point at regular distances in space and represent the gravitational field at that point by the length and direction of an arrow. Thus, in the program \"Use a for loop to generate arrows,\" we practice using a for loop to draw an arrow at regular intervals in space. In the program \"Gravitational Field, can be modified to draw different planets,\" in addition to drawing arrows, we also calculate the gravitational field at that location and then update the length and direction of the arrow. If we can successfully draw the gravitational field of a sphere, in the program \"Gravitational Field, can be modified to draw different planets,\" we further proceed to draw the gravitational fields established by two or even multiple spheres.\n\nAfter completing the drawing of gravitational fields, we can use the same method to draw the electric field established by charged spheres in space, which mathematically is expressed as:\n$$\n\\vec{E} = \\sum \\vec{E}_i = k \\sum \\frac{Q_i (\\vec{r} - \\vec{r}_i)}{|\\vec{r} - \\vec{r}_i|^3}\n$$\nWe only need to slightly modify the program \"Gravitational Field, can be modified to draw different planets\" to draw the electric field established by two charged spheres in space.\n\nProgram to be written: Electric Field, Two Spherical Charged Bodies\n\nThe program \"Electric Field, Two Spherical Charged Bodies\" is almost identical to \"Gravitational Field, can be modified to draw different planets,\" but the differences are explained below:\n\nSignificantly reduce the radius of the spheres and the width of the drawing area. Set the charge of the charged bodies and the electrostatic constant.\nFrom lines 23 to 31, when defining the custom class Ball, do not use inheritance. When creating an object of this class, enter the position pos, radius radius, color color, charge charge to create a sphere, and define a function to calculate the electric field.\nIf the charge of the left sphere is q1 and the right sphere is q2, below are the simulation results for three different combinations.\n\nScreenshots of the program code should be displayed:\n\nSimulation result screenshot for q1 = 1, q2 = -5:\n![image](https://hackmd.io/_uploads/B18ne26uR.png)\n\nSimulation result screenshot for q1 = 5, q2 = -5:\n![image](https://hackmd.io/_uploads/rkX6g36u0.png)\n\nSimulation result screenshot for q1 = 5, q2 = -1:\n![image](https://hackmd.io/_uploads/SJQCeh6uC.png)\n(1) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Define constants\nk = 9e9  # electrostatic constant\nlength = 4  # length of the drawing area\nradius = 0.3  # radius of charged bodies\nd = 2  # distance between the charged bodies\n\n# Define class for charged bodies\nclass Ball:\n    def __init__(self, pos, radius, color, charge):\n        self.sphere = sphere(pos=pos, radius=radius, color=color)\n        self.charge = charge\n\n    def get_field(self, pos):\n        r = pos - self.sphere.pos\n        return k * self.charge * r.norm() / mag2(r)\n\n# Create two charged bodies\nball1 = Ball(vec(-d / 2, 0, 0), radius, color.red, 5)\nball2 = Ball(vec(d / 2, 0, 0), radius, color.blue, -5)\n\n# Create arrows for electric field\narrows = []\nfor x in range(-length, length + 1):\n    for y in range(-length, length + 1):\n        for z in range(-length, length + 1):\n            pos = vec(x, y, z)\n            if mag(pos - ball1.sphere.pos) > 1.2 * radius and mag(pos - ball2.sphere.pos) > 1.2 * radius:\n                arrows.append(arrow(pos=pos, axis=vec(0, 0, 0), color=color.yellow))\n\n# Update direction and length of arrows\nwhile True:\n    rate(10)\n    for arr in arrows:\n        E = ball1.get_field(arr.pos) + ball2.get_field(arr.pos)\n        arr.axis = E / 2e10",
      "mode": "initial",
      "timestamp": "2024-07-24 06:45:41",
      "serial_number": 1
    }
  ]
}