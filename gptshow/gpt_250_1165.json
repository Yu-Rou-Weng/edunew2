{
  "session_id": 1165,
  "log": [
    {
      "input": "A small ball is launched horizontally from a height ( h ) with an initial velocity ( v_0 ). The ball accelerates downward under the influence of gravity and bounces upon hitting the ground.\nOnly the effect of gravity is considered, and the collision between the ball and the ground is elastic.Draw the ball and floor.\nLet the ball move for 3 seconds and then stop.Do not resize the scene.\nThe center point of the canvas needs to be set correctly, so the writing order of Parameter Settings of the program needs to be after Screen Settings.",
      "output": "from vpython import *\n\n# Screen Settings\nscene.center = vector(0, -5, 0)\n\n# Parameter Settings\nh = 10\nv0 = 5\ng = 9.81\nt = 0\ndt = 0.01\n\n# Ball Settings\nball = sphere(pos=vector(0, h, 0), radius=1, color=color.red, make_trail=True)\n\n# Floor Settings\nfloor = box(pos=vector(0, 0, 0), size=vector(20, 0.1, 10), color=color.green)\n\n# Simulation Loop\nwhile t < 3:\n    rate(100)\n    ball.pos.x += v0 * dt\n    ball.pos.y = h - 0.5 * g * t**2\n    if ball.pos.y <= 1:\n        v0 *= -1\n    t += dt",
      "mode": "initial",
      "timestamp": "2024-12-24 13:49:06",
      "serial_number": 1
    },
    {
      "input": "A small ball is launched horizontally from a height ( h ) with an initial velocity ( v_0 ). The ball accelerates downward under the influence of gravity and bounces upon hitting the ground.\nOnly the effect of gravity is considered, and the collision between the ball and the ground is elastic.Draw the ball and floor.\nLet the ball move for 3 seconds and then stop.Do not resize the scene.\nThe center point of the canvas needs to be set correctly, so the writing order of Parameter Settings of the program needs to be after Screen Settings.",
      "output": "from vpython import *\n\nscene.width = 800\nscene.height = 600\nscene.center = vector(0, -5, 0)\n\nh = 10\nv0 = 15\ng = 9.81\nt = 0\ndt = 0.01\n\nfloor = box(pos=vector(0, 0, 0), size=vector(30, 1, 10), color=color.green)\nball = sphere(pos=vector(0, h, 0), radius=1, color=color.red, make_trail=True)\n\nwhile t < 3:\n    rate(100)\n    ball.pos.x += v0 * dt\n    ball.pos.y -= 0.5 * g * (t ** 2)\n    t += dt",
      "mode": "initial",
      "timestamp": "2024-12-25 12:35:30",
      "serial_number": 1
    },
    {
      "input": "1. Screen Settings: Set the canvas width to 700 and height to 400. Do not change the canvas size. 2. Object Motion & Parameter Settings: Create a VPython animation to illustrate the following physics experiment: # Simple Harmonic Motion Caused by Gravity A small mass **m** is initially at rest and positioned at the midpoint of the perpendicular bisector of the line connecting two fixed massive spheres of equal mass **M**. The motion begins from one endpoint of this perpendicular bisector. The mass **m** experiences gravitational forces from the two spheres, which result in a restoring force proportional to its displacement when the displacement is small. This leads to oscillatory motion. The theoretical period of this oscillation is calculated using the following parameters: - Gravitational constant **G** - Masses **m** and **M** - Relevant distances",
      "output": "scene.width = 700\nscene.height = 400\n\nG = 6.67e-11  # Gravitational constant\nm = 1  # Small mass\nM = 10  # Mass of fixed spheres\nd = 5  # Distance from small mass to fixed spheres\n\nf1 = sphere(pos=vector(-d, 0, 0), radius=0.5, color=color.red)\nf2 = sphere(pos=vector(d, 0, 0), radius=0.5, color=color.blue)\nmass = sphere(pos=vector(0, 0, 0), radius=0.3, color=color.green, make_trail=True)\n\nv = vector(0, 0, 0)\ndt = 0.01\n\nwhile True:\n    rate(100)\n    r1 = f1.pos - mass.pos\n    r2 = f2.pos - mass.pos\n    F1 = G * m * M * r1 / mag(r1)**3\n    F2 = G * m * M * r2 / mag(r2)**3\n    F = F1 + F2\n    mass.pos = mass.pos + v * dt\n    v = v + F / m * dt",
      "mode": "initial",
      "timestamp": "2024-12-26 16:46:04",
      "serial_number": 1
    },
    {
      "input": "1. Screen Settings:\nSet the canvas width to 700 and height to 400. Do not change the canvas size.\n\n2. Object Motion & Parameter Settings:\nCreate a VPython animation to illustrate the following physics experiment:\n\n# **Horizontal Projectile Motion**\n\nA small ball is launched horizontally from a height \\( h \\) with an initial velocity \\( v_0 \\). The ball accelerates downward under the influence of gravity and bounces upon hitting the ground.\nOnly the effect of gravity is considered, and the collision between the ball and the ground is elastic.\n\nDraw the ball and floor.\nLet the ball move for 3 seconds and then stop.\n\nDo not resize the scene. \nThe center point of the canvas needs to be set correctly, so the writing order of Parameter Settings of the program needs to be after Screen Settings.",
      "output": "canvas(width=700, height=400)\n\nball = sphere(pos=vector(0, 5, 0), radius=1, color=color.blue)\nfloor = box(pos=vector(0, 0, 0), size=vector(10, 0.5, 10), color=color.green)\n\nv0 = 5\ng = 9.81\nt = 0\ndt = 0.01\n\nwhile t < 3:\n    rate(100)\n    ball.pos.x += v0 * dt\n    ball.pos.y -= 0.5 * g * t**2\n    t += dt\n    if ball.pos.y < ball.radius:\n        v0 *= -0.9\n\nt = 0",
      "mode": "initial",
      "timestamp": "2024-12-27 16:39:38",
      "serial_number": 1
    }
  ]
}