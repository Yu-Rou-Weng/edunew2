{
  "session_id": 121,
  "log": [
    {
      "input": "Simple Pendulum\n\nIf we define the moment of inertia (I) as:\n\n$$\nI = mr^2\n$$\n\nSince the direction of the torque $\\tau$ and the angular acceleration $\\alpha$ are opposite, their relationship is:\n\n$$\n\\tau = -I\\alpha \\Rightarrow rF\\sin\\theta = -mr^2 \\frac{d^2\\theta}{dt^2} \\Rightarrow \\frac{F}{m}r\\sin\\theta = -\\frac{d^2\\theta}{dt^2}\n$$\n\nIf $r = L$ and $F = mg$, and when $\\theta < 5^\\circ$, $\\sin \\theta \\approx \\theta$, then the equation can be rewritten as:\n\n$$\n\\frac{g}{L}\\theta = -\\frac{d^2\\theta}{dt^2}\n$$\n\nFrom this, we can solve:\n\n$$\n\\theta(t) = \\theta_0 \\cos\\left(\\sqrt{\\frac{g}{L}} t\\right) = \\theta_0 \\cos(\\omega t)\n$$\n\nIn the above formula, $\\omega$ is the angular frequency of the swing, hence the period is:\n\n$$\nT = \\frac{2\\pi}{\\omega} = 2\\pi \\sqrt{\\frac{L}{g}}\n$$\n\nProgram to be written:\n\nAn ideal simple pendulum, change the starting swing angle to calculate the motion process and period.\n\n(1) Define and initialize a variable named Length_I as a cyber input variable, set Length_I=10\n(2) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(3) Length_I is the length of the pendulum. When Length_I changes to a new value, the length of the pendulum also changes to that value.\n(4) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(5) Do not import packages that are not supported by VPython such as numpy, math and time",
      "output": "from vpython import *\n\n# Create a 3D display\nscene = canvas(title='Simple Pendulum')\n\n# Define and initialize Length_I and Radius_I\nLength_I = 10\nRadius_I = 1\n\n# Create the pendulum\nball = sphere(pos=vec(Length_I, 0, 0), radius=Radius_I, color=color.red)\nrod = cylinder(pos=vec(0, 0, 0), axis=ball.pos, radius=0.1)\n\n# Define the initial conditions\nball.theta = 0.1\nball.omega = 0\nball.m = 1\ng = 9.8\ndt = 0.01\n\ndef update_pendulum():\n    # Update the angle and angular velocity\n    alpha = -g/Length_I * sin(ball.theta)\n    ball.omega += alpha*dt\n    ball.theta += ball.omega*dt\n\n    # Update the position of the ball\n    ball.pos = vec(Length_I*sin(ball.theta), -Length_I*cos(ball.theta), 0)\n    rod.axis = ball.pos\n\n# Animation loop\nwhile True:\n    rate(100) # Limit the frame rate to 100 frames per second\n    update_pendulum()",
      "mode": "initial",
      "timestamp": "2024-07-09 18:55:46",
      "serial_number": 1
    }
  ]
}