{
  "session_id": 844,
  "log": [
    {
      "input": "1. Screen Settings\nSet the canvas width to 700 and the height to 400. Please draw the trajectory of the small ball. Do not adjust the size of the scene. The center point of the canvas must be set correctly, thus the order of writing the Parameter Settings must be after the Screen Settings.\n\n2. Object Motion & Parameter Settings\nPlease create a VPython animation of a horizontally thrown ball: launch a horizontal small ball that bounces off the floor.\nDraw the ball and the floor. Assume the ball and the ground have an elastic collision, only considering the effect of gravity, that is, the ball accelerates downward under the influence of gravity and bounces up when it hits the ground. Allow the ball to stop moving after 5 seconds.\n\n3. Cyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Speed_I as a network input variable, with an initial value of Speed_I = 5.\n\n(2) Key: Speed_I is the horizontal speed of the ball. During the animation, when Speed_I is assigned a new value, the horizontal speed of the ball should immediately update to this new value. Ensure the program can respond instantly to changes in Speed_I and reflect it in the motion of the ball.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Screen Settings\nscene = canvas(width=700, height=400, center=vector(0,-0.2,0), background=vector(0.5,0.5,0))\n\n# Object Motion & Parameter Settings\nfloor = box(length=4, height=0.005, width=4, color=color.green)\nball = sphere(radius=0.1, color=color.red)\nball.pos = vector(0, 0, 0)\n\n# Parameter Settings\nball.v = vector(5, 0, 0)  # initial horizontal speed\ng = 9.8  # gravity\nt = 0  # time\ndt = 0.01  # time step\n\n# Cyber Input Variable Mapping Information\nSpeed_I = 5  # initial network input variable\n\ndef update_speed(s):\n    global Speed_I\n    Speed_I = s\n\nwhile t < 5:\n    rate(100)  # limit the animation speed to 100 frames per second\n    ball.v.x = Speed_I  # update the horizontal speed\n    ball.v.y = ball.v.y - g*dt  # update the vertical speed\n    ball.pos = ball.pos + ball.v*dt  # update the position\n    \n    # if the ball hits the ground\n    if ball.pos.y < -0.5 + ball.radius:\n        ball.v.y = abs(ball.v.y)  # reverse the vertical speed\n    \n    t = t + dt  # update the time",
      "mode": "initial",
      "timestamp": "2024-08-15 20:57:51",
      "serial_number": 1
    }
  ]
}