{
  "session_id": 140,
  "log": [
    {
      "input": "Simple Pendulum\n\nIf we define the moment of inertia (I) as:\n\n$$\nI = mr^2\n$$\n\nSince the torque $\\tau$ and angular acceleration $\\alpha$ are in opposite directions, their relationship is:\n\n$$\n\\tau = -I\\alpha \\Rightarrow rF\\sin\\theta = -mr^2 \\frac{d^2\\theta}{dt^2} \\Rightarrow \\frac{F}{m}r\\sin\\theta = -\\frac{d^2\\theta}{dt^2}\n$$\n\nIf $r = L$ and $F = mg$, and when $\\theta < 5^\\circ$, $\\sin \\theta \\approx \\theta$, then the equation can be rewritten as:\n\n$$\n\\frac{g}{L}\\theta = -\\frac{d^2\\theta}{dt^2}\n$$\n\nFrom this, we can solve for:\n\n$$\n\\theta(t) = \\theta_0 \\cos\\left(\\sqrt{\\frac{g}{L}} t\\right) = \\theta_0 \\cos(\\omega t)\n$$\n\nIn the above formula, $\\omega$ is the angular frequency of the oscillation, and thus the period is:\n\n$$\nT = \\frac{2\\pi}{\\omega} = 2\\pi \\sqrt{\\frac{L}{g}}\n$$\n\nProgram to be written:\n\nAn ideal simple pendulum, changing the starting angle to calculate the motion process and the period.\n\nParameter settings\nThe variables defined here include `m`, `size`, `L`, `theta0`, `theta`, `g`, `T`, `alpha`, `omega`, `i`, `t`, `dt`, all of which have their uses written in the comments of that line.\n\nObject Motion\n1. Since we move the suspension point of the ball to the origin, and move the ceiling, ball, and rope upward, we calculate `r` as the position of the ball.\n\n```python\nr = ball.pos\n```\nThere are two methods to calculate angular acceleration:\n\n2. If using the mathematical cross product to first calculate torque, since r is in the xy plane and gravity is in the -y axis direction, the torque will be in the z-axis direction. Therefore, in the following code, after calculating the torque using cross, only the z-axis component is taken and then divided by the moment of inertia to obtain the angular acceleration.\n\n```python\nalpha = cross(r, vec(0, -m*g, 0)).z/(m*L**2)\n```\n3. Calculate the torque produced by gravity by multiplying force by the lever arm, then calculate the angular acceleration:\n\n```python\nalpha = -m*g*ball.pos.x / (m*L**2)\n```\n\n4. Then, calculate the angular velocity and angle.\n\n5. Update the position of the ball, its velocity, and the direction and length of the rope.\n\n6. Update the position, direction, and length of the arrow representing velocity.\n\n7. When the ball completes one period, the angular velocity will change from counterclockwise (positive) to clockwise (negative), thereby determining if the ball has completed one period.\n\n8. Finally, remember to update the time.\n\n9. The pendulum should swing back and forth naturally, starting from an initial angle and oscillating under the influence of gravity. The motion should follow the simple harmonic motion equation and not complete a full circle.\n\n(1) Define and initialize a variable named Length_I as a cyber input variable, set Length_I=10\n(2) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(3) Length_I is the length of the pendulum. When Length_I changes to a new value, the length of the pendulum also changes to that value.\n(4) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(5) Do not import packages that are not supported by VPython such as numpy, math and time",
      "output": "from vpython import *\n\n# parameters\nm = 1\nsize = 0.02\nL = 0.5\ntheta0 = 60 * pi / 180\ntheta = theta0\ng = 9.8\nT = 2 * pi * sqrt(L / g)\nalpha = 0\nomega = 0\ni = 0\nt = 0\ndt = 0.001\n\n# objects\nceiling = box(pos=vec(0, 0, 0), size=vec(0.2, 0.01, 0.2), color=color.blue)\nball = sphere(pos=vec(L * sin(theta), -L * cos(theta), 0), radius=size, color=color.red)\nstring = cylinder(pos=ceiling.pos, axis=ball.pos, radius=0.005, color=color.black)\nv_arrow = arrow(pos=ball.pos, axis=m * vec(0, -g, 0), color=color.green)\n\n# motion\nwhile True:\n    rate(1000)\n    r = ball.pos\n    alpha = -m * g * r.x / (m * L**2)\n    omega += alpha * dt\n    theta += omega * dt\n    ball.pos = vec(L * sin(theta), -L * cos(theta), 0)\n    string.axis = ball.pos\n    v_arrow.pos = ball.pos\n    v_arrow.axis = vec(omega, 0, 0)\n\n    if omega * (omega + alpha * dt) < 0 and i == 1:\n        print(\"T =\", t, \"(s)\")\n        i += 1\n    elif i == 0 and omega > 0:\n        i += 1\n\n    t += dt",
      "mode": "initial",
      "timestamp": "2024-07-10 16:00:25",
      "serial_number": 1
    }
  ]
}