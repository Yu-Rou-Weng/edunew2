{
  "session_id": 981,
  "log": [
    {
      "input": "Screen Settings:\nSet the canvas width to 700 and height to 400. Do not change the canvas size.\n\nObject Motion & Parameter Settings:\nCreate a VPython animation to illustrate the following physics experiment:\nHorizontal projectile motion refers to the process in which an object is thrown horizontally from a certain height and moves along a curved path under the influence of gravity. When the ball hit the ground, it bounces back. The ball should stop moving after 6 seconds.\n\n3. Cyber Input Variable Mapping Information:\n\n(1) initial_velocity is mapped to the variable named Velocity_I with an initial value set to 5.\n(2) When the value of Velocity_I changes, let the animation rerun to the starting point and start with the updated initial_velocity.\n",
      "output": "from vpython import *\n\n# Screen Settings\nscene.width = 700\nscene.height = 400\n\n# Object Motion & Parameter Settings\nball = sphere(pos=vector(0, 0, 0), radius=0.5, color=color.red)\nground = box(pos=vector(0, -1, 0), size=vector(10, 0.1, 5), color=color.green)\n\n# Initial Variables\ninitial_velocity = 5\ng = 9.81  # acceleration due to gravity in m/s^2\n\ndef reset_animation():\n    ball.pos = vector(0, 0, 0)\n    ball.velocity = vector(initial_velocity, 0, 0)\n    t = 0\n\ndef update_velocity():\n    reset_animation()\n\ndef update_animation():\n    dt = 0.01\n    t = 0\n    while t <= 6:\n        rate(100)\n        ball.pos.x += ball.velocity.x * dt\n        ball.velocity.y -= g * dt\n        ball.pos.y += ball.velocity.y * dt\n\n        if ball.pos.y < 0:\n            ball.velocity.y *= -0.9  # simulate bounce with energy loss\n\n        t += dt\n\nreset_animation()\nscene.bind('keydown', lambda: update_velocity())\nupdate_animation()",
      "mode": "initial",
      "timestamp": "2024-09-03 18:36:22",
      "serial_number": 1
    }
  ]
}