{
  "session_id": 656,
  "log": [
    {
      "input": "# Speed Selector\n\nThe speed selector is a device used to filter charged particles with specific speeds. Its basic structure is shown in the figure below. Two parallel charged plates create an electric field directed downward, combined with a magnetic field perpendicular to the plane of the paper. If a positively charged particle enters the speed selector from the left side at a horizontal speed \\(v\\), the particle experiences a downward electrostatic force and an upward magnetic force. When the resultant force is zero, the particle moves forward at a constant speed. At this point:\n$$\nqE = qvB \\Rightarrow v = \\frac{E}{B} = \\frac{V}{Bd}\n$$\n\nIf a barrier with only a small hole is added on the right side, only particles moving straight forward can pass through. By changing the values of the electric and magnetic fields, the speed of the particles passing through the device can be controlled. There are two programs:\n\n- Program 20-1: Draws the electric field, magnetic field, parallel charged plates, and the trajectory of the particle. The particle stops moving when it hits the parallel plates.\n- Program 20-2: Based on 20-1, adds a barrier at the exit.\n\nProgram to be written: 20-1: Draw the electric field, magnetic field, parallel charged plates, and the trajectory of the particle. The particle stops moving when it hits the parallel plates.\n\n## Parameter Settings\n\nThe variables are set as size, m, v0, q, V, d, L, B, E_field, B_field, t, dt, with their purposes commented in the corresponding lines. To ensure a smoother animation, the particle's mass is much larger than the actual mass of a nucleus.\n\n## Display Settings\n\nCreate an animation window, parallel charged plates, horizontal lines, and charged particles.\n\nCreate arrows representing velocity and acceleration.\n\nCreate arrows and labels for the electric field and magnetic field. The syntax for labels is:\n\n[label_name] = label(pos=[position vector], text=\"[label content]\", xoffset=[x-direction offset], yoffset=[y-direction offset], color=[color name or RGB value], font=\"[font name]\")\nReplace the contents in [] with the required parameters.\n\nOpen the drawing window, and plot the position, velocity, acceleration, and time relationship of the sphere.\n\n## Object Motion\nTo stop the animation when the charged particle reaches the far right side of the screen or hits the parallel charged plates, the condition in the while loop is set as charge.pos.x < L and abs(charge.pos.y) < d/2 - p1.height - size.\n\nCalculate the net force on the charged particle, as there are electric and magnetic fields only between the parallel plates, and set them to zero outside. The mathematical formula for the net force is:\n$$\n\\vec{F} = q(\\vec{E} + \\vec{v} \\times \\vec{B})\n$$\nThe corresponding code is:\n\nF = q*(E_field + cross(charge.v, B_field))\nUpdate the charged particle\u2019s acceleration, velocity, and position.\n\nUpdate the arrows representing velocity and acceleration, only displaying direction to avoid automatically scaling down the animation.\n\nUpdate time.\n\n## Simulation Results\n\nHere are five different data combinations and test results:\n\n1. v0 = 10, V = 1, d = 0.1, B = 1 \u21d2 Uniform linear motion\n\nScreenshot:\n![image](https://hackmd.io/_uploads/r1w2B2TuC.png)\n\n2. q > 0, v0 = 20 other conditions same as combination 1 \u21d2 Upward shift\n\nScreenshot:\n![image](https://hackmd.io/_uploads/H1oaB26uC.png)\n\n3. q > 0, d = 0.2 other conditions same as combination 1 \u21d2 Upward shift\n\nScreenshot:\n![image](https://hackmd.io/_uploads/SyL1U36OC.png)\n\n4. q > 0, V = 2 other conditions same as combination 1 \u21d2 Downward shift\n\nScreenshot:\n![image](https://hackmd.io/_uploads/ByvlInp_R.png)\n\n5. q > 0, B = 5 other conditions same as combination 1 \u21d2 Upward shift\n\nScreenshot:\n![image](https://hackmd.io/_uploads/Bk1fLna_A.png)\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Parameters\nsize = 0.02 # radius of the charged particle\nm = 0.1 # mass of the particle\nv0 = 10.0 # initial velocity of the particle\nq = 1.0 # charge of the particle\nV = 1.0 # voltage between the plates\nd = 0.1 # distance between the plates\nL = 0.5 # length of the plates\nB = 1.0 # magnetic field\nE_field = vec(0, -V/d, 0) # electric field\nB_field = vec(0, 0, B) # magnetic field\nt = 0 # time\ndt = 0.001 # time step\n\n# Create animation window and objects\nscene = canvas(title='Speed Selector', width=800, height=300, center=vec(L/2, 0, 0), background=vec(0.5, 0.5, 0))\np1 = box(pos=vec(L/2, -d/2, 0), size=vec(L, 0.01, 0.1), color=color.blue) # bottom plate\np2 = box(pos=vec(L/2, d/2, 0), size=vec(L, 0.01, 0.1), color=color.blue) # top plate\ncharge = sphere(pos=vec(0, 0, 0), radius=size, color=color.red, make_trail=True, v=vec(v0, 0, 0)) # charged particle\nv_arrow = arrow(pos=charge.pos, axis=charge.v, color=color.yellow) # velocity vector\na_arrow = arrow(pos=charge.pos, axis=vec(0,0,0), color=color.green) # acceleration vector\nE_arrow = arrow(pos=vec(L/2, 0, 0), axis=E_field, color=color.magenta) # electric field vector\nB_arrow = arrow(pos=vec(L/2, 0, 0), axis=B_field, color=color.cyan) # magnetic field vector\nE_label = label(pos=E_arrow.pos, text='E', xoffset=20, yoffset=-25, color=color.magenta, font=\"serif\") # electric field label\nB_label = label(pos=B_arrow.pos, text='B', xoffset=20, yoffset=-25, color=color.cyan, font=\"serif\") # magnetic field label\n\n# Animation loop\nwhile charge.pos.x < L and abs(charge.pos.y) < d/2 - p1.height - size:\n    rate(1000)\n    if charge.pos.x < L/2 and charge.pos.x > -L/2: # inside the plates\n        F = q * (E_field + cross(charge.v, B_field)) # net force\n    else: # outside the plates\n        F = vec(0, 0, 0)\n    charge.a = F/m # acceleration\n    charge.v += charge.a*dt # velocity\n    charge.pos += charge.v*dt # position\n    v_arrow.pos = charge.pos\n    v_arrow.axis = charge.v\n    a_arrow.pos = charge.pos\n    a_arrow.axis = 1e-3*charge.a # scale down for display\n    t += dt",
      "mode": "initial",
      "timestamp": "2024-07-24 07:22:08",
      "serial_number": 1
    }
  ]
}