{
  "session_id": 242,
  "log": [
    {
      "input": "# Planetary Motion\nWe know that every planet in the universe has its own gravitational force, which varies from one to another. When two planets with different gravities come close, they attract each other. Generally, the gravity of a star is greater than that of a planet. For example, the Sun is a star, and the Earth is a a planet. Therefore, the Earth is attracted to the Sun, causing it to move in an elliptical orbit around the Sun. This is known as planetary motion.\nOn the Animation screen, you can see a red ball (planet) moving in an elliptical orbit around a green ball (star). Please adjust the knob marked 'Gravity' on the left side of the screen to change the green ball\u2019s gravitational pull, and observe if the trajectory of the red ball changes.\nYou can also try adjusting the knob marked 'Speed', which changes the initial speed of the planet. Experiment to see how to properly adjust Gravity and Speed to prevent the planet from colliding with the star.\n\n## Fun Facts About Nature\n* ### Star\nA star is a self-luminous celestial body.\n* ### Planet\nGenerally, a celestial body that does not emit light and orbits around a star is called a planet.\n* ### Kepler's Laws of Planetary Motion\nThe laws of planetary motion were proposed by Johannes Kepler (1571-1630). He asserted that the orbits of planets around stars are elliptical (Kepler's First Law); the area swept out by a line connecting a star and a planet is equal over equal periods of time (Kepler's Second Law);\nThe square of the orbital period of a planet is directly proportional to the cube of the semi-major axis of its elliptical orbit (Kepler's Third Law).\n\n## Programming Tips\n+ ### Object\nObjects are similar to variables in that they are used to store data. However, unlike variables, objects represent a set of data. In other words, an object is a collection of variables and can include other objects. For example, the width 'width' and height 'height' of a piece of paper are two variables, as they each represent a number; however, a piece of paper 'paper' is an object because it contains information about width and height. Another example is a position in space 'pos', which is an object containing three numerical variables x, y, and z; a ball 'ball' is also an object, including a sub-object - a position in space 'pos', and a variable - radius 'radius'. Of course, a ball may also contain many other pieces of data, such as color 'color'.\nTo use a variable of an object, you need to use the '.' symbol. For example, to set the radius of a ball to 5.0, you can do:\n```python3=\nball.radius = 5.0\n```\n\nTo set the ball's color to red, you can do:\n```python3=\nball.color = color.red\n```\n\nTo set the ball's position at x, y, and z coordinates as 1.0, 2.0, and 3.0 respectively, you can do:\n```python3=\nball.pos.x = 1.0\nball.pos.y = 2.0\nball.pos.z = 3.0\n```\n## Life in Programming is Colorful\n+ Click on **Program** at the top of the webpage to view the program.\n+ Let's change the initial position of the ball, check lines 30-32 of the program, and try changing the variables x, y, and z to see if the position of the ball changes.\n+ Then look at lines 33 and 34, try giving the ball different colors!\n(1) Do not import packages that are not supported by VPython such as numpy, math and time",
      "output": "from vpython import *\n\n# Creating the star and the planet\nstar = sphere(pos=vector(0, 0, 0), color=color.green, radius=0.2, mass=1e4, momentum=vector(0, 0, 0), make_trail=True)\nplanet = sphere(pos=vector(1, 0, 0), color=color.red, radius=0.05, mass=1, momentum=vector(0, 30, 0), make_trail=True)\n\nG = 6.7e-11 # Gravitational constant\n\n# Creating the scene\nscene = canvas()\nscene.forward = vector(0, -1, -1)\n\ndt = 0.0001 # Time step\nt = 0 # Time\n\nwhile True:\n    rate(1000) # Maximum number of calculations per \"real-time\" second\n    # Calculating the gravitational force\n    r = star.pos - planet.pos\n    F = G * star.mass * planet.mass * r.hat / mag(r)**2\n    # Updating the momentum and position of the planet\n    planet.momentum = planet.momentum + F*dt\n    planet.pos = planet.pos + (planet.momentum/planet.mass) * dt\n    # Updating the time\n    t = t + dt",
      "mode": "initial",
      "timestamp": "2024-07-14 15:54:01",
      "serial_number": 1
    }
  ]
}