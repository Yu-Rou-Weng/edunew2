{
  "session_id": 907,
  "log": [
    {
      "input": "1. Screen Settings\nSet the width of the canvas to 700 and the height to 400. Please draw the trajectory of the ball's motion. Do not change the size of the canvas.\n\n2. Object Motion & Parameter Settings\nPlease create a VPython animation of a ball being thrown horizontally and bouncing off the floor: A ball is thrown horizontally from mid-air and rebounds upon hitting the floor.\nDraw both the ball and the floor. Assume that the ball has an elastic collision with the ground, and only the effect of gravity is considered, meaning the ball accelerates downward due to gravity and bounces up when it hits the ground. Stop the motion of the ball after 6 seconds.\n\n3. Cyber Input Variable Mapping Information:\n\n(1) Define and initialize a Cyber Input Variable named Speed_I with an initial value set to 1. This variable represents the speed of the ball.\n\n(2) During the animation, whenever the value of the Speed_I variable changes, let the animation rerun to the starting point and start with the updated ball speed.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Screen Settings\nscene = canvas(width = 700, height = 400)\n\n# Cyber Input Variable Mapping Information\nSpeed_I = 1\n\n# Object Motion & Parameter Settings\ndef animate():\n    ball = sphere(pos=vector(0,5,0), radius=1, color=color.red)\n    floor = box(pos=vector(0,0,0), length=30, height=0.5, width=10)\n    ball.velocity = vector(Speed_I,0,0)\n    g = 9.8\n    dt = 0.01\n    t = 0\n\n    while t < 6:\n        rate(100)\n        ball.pos = ball.pos + ball.velocity*dt\n        if ball.pos.y - ball.radius < floor.pos.y + floor.height/2:\n            ball.velocity.y = abs(ball.velocity.y)\n        else:\n            ball.velocity.y -= g*dt\n        t += dt\n\n# Run the animation\nanimate()",
      "mode": "initial",
      "timestamp": "2024-08-16 21:46:12",
      "serial_number": 1
    }
  ]
}