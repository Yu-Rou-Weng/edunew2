{
  "session_id": 692,
  "log": [
    {
      "input": "Magnetic Field Generated by a Current-Carrying Coil\n\nChapter 8 of Elective Physics, \"The Magnetic Effects of Electric Current,\" introduces the Biot-Savart Law, which is used to calculate the magnetic field generated at a point in space by a small segment of a current-carrying conductor. The equation is expressed as:\n$$\nd\\vec{B} = \\frac{\\mu_0}{4\\pi} \\frac{I d\\vec{L} \\times \\hat{r}}{r^2} \\Rightarrow dB = \\frac{\\mu_0}{4\\pi} \\frac{I dL \\sin{\\theta}}{r^2}\n$$\n\nUsing the Biot-Savart Law, the magnetic field magnitude at a perpendicular distance \\( r \\) from a long straight current-carrying conductor can be calculated as:\n$$\nB = \\frac{\\mu_0 I}{2\\pi r}\n$$\n\nThe magnetic field magnitude at the center of a current-carrying coil with radius \\( r \\) is:\n$$\nB = \\frac{\\mu_0 I}{2r}\n$$\n\nFor a solenoid with \\( n \\) turns per unit length carrying current \\( I \\), the magnetic field magnitude at the center is:\n$$\nB = \\mu_0 n I\n$$\n\nMagnetic fields are distributed in space, but the diagrams in the books are typically in two dimensions. Therefore, I want to use VPython to visually represent the strength and direction of the magnetic fields in a three-dimensional space.\n\nProgramming Section\nThe program for the magnetic field generated by a current-carrying coil and that for a long straight current-carrying conductor are very similar. Below are the differences:\n\nVariables set include size, r, n, part, d, mu, current, direct, L, N, Bmax. Since the magnetic field values vary greatly, Bmax is set directly rather than being derived from calculated values.\n\nA ring object is used to generate the coil.\n\nThe spheres that make up the segmented ring start at (r, 0, 0). When looking from the +y axis towards the origin, the placement direction is counterclockwise, hence the position is set as:\n$$\n(r \\cdot \\cos(i \\cdot 2\\pi \\cdot \\text{part}/n), 0, -\\sin(i \\cdot 2\\pi \\cdot \\text{part}/n))\n$$\nIn the custom function, if the current direction is counterclockwise (i.e., direct = True), then \\( dr \\) is set as:\n$$\n\\text{norm}(\\vec{\\text{segment.pos.z}}, 0, -\\text{segment.pos.x})\n$$\nOtherwise, it is set as:\n$$\n\\text{norm}(\\vec{-\\text{segment.pos.z}}, 0, \\text{segment.pos.x})\n$$\n\nDesired Illustration:\n[The image is a graphical representation of the described magnetic fields in a three-dimensional layout using VPython.]\n(1) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Variables\nsize, r, n, part, d, mu, current, direct = 0.02, 0.3, 40, 0.1, 0.003, 4*pi*1E-7, 5, True\nL, N = 5*r, 500\nBmax = 1E-4\n\n# Function to calculate the magnetic field\ndef Bfield(obj, pos):\n    B = vec(0, 0, 0)\n    for segment in obj:\n        dr = pos - segment.pos\n        r = mag(dr)\n        if r != 0:\n            if direct:\n                B += mu * current / (4 * pi * r * r * r) * cross(segment.axis / part, dr)\n            else:\n                B -= mu * current / (4 * pi * r * r * r) * cross(segment.axis / part, dr)\n    return B\n\n# Create coil\ncoil = [ring(pos=vector(r*cos(i*2*pi/n), 0, -r*sin(i*2*pi/n)), axis=vector(-sin(i*2*pi/n), 0, -cos(i*2*pi/n)), radius=d, thickness=d/4) for i in range(n)]\n\n# Create arrows\nB_arrows = [arrow(pos=vector(L*cos(i*2*pi/N), 0, L*sin(i*2*pi/N)), axis=vector(0, 0, 0), shaftwidth=0.8*size, color=color.red) for i in range(N)]\n\n# Animation\nwhile True:\n    rate(100)\n    for B_arrow in B_arrows:\n        B = Bfield(coil, B_arrow.pos)\n        B_arrow.axis = 0.02*B/mag(B)",
      "mode": "initial",
      "timestamp": "2024-07-24 10:56:44",
      "serial_number": 1
    }
  ]
}