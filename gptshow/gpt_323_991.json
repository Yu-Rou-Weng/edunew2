{
  "session_id": 991,
  "log": [
    {
      "input": "Screen Settings:\nSet the canvas width to 700 and height to 400. Do not change the canvas size.\n\nObject Motion & Parameter Settings:\nCreate a VPython animation to illustrate the following physics experiment:\nHorizontal projectile motion refers to the process in which an object is thrown horizontally from a certain height and moves along a curved path under the influence of gravity. When the ball hit the ground, it bounces back. The ball should stop moving after 6 seconds.\n\n3. Cyber Input Variable Mapping Information:\n\n(1) initial_velocity is mapped to the variable named Gyroscope_I with an initial value set to[ [0, 0, 0],].\n(2) When the value of Gyroscope_I changes, let the animation rerun to the starting point and start with the updated initial_velocity.\n\n\n3. Cyber Input Variable Mapping Information:\n\n(1) initial_velocity is mapped to the variable named w with an initial value set to [6,5].\n(2) When the value of w changes, let the animation rerun to the starting point and start with the updated initial_velocity.\n",
      "output": "from vpython import *\n\n# Screen settings\nscene = canvas(width=700, height=400)\n\n# Constants\ng = vector(0, -9.81, 0)  # acceleration due to gravity\n\n# Initial parameters\ninitial_velocity = vector(6, 5, 0)  # initial velocity in x and y directions\nball_radius = 0.5\nfloor_height = 0\n\n# Ball object\nball = sphere(pos=vector(0, ball_radius + floor_height, 0), radius=ball_radius, color=color.blue, make_trail=True)\n\n# Animation loop\ndt = 0.01\nt = 0\n\nwhile t < 6:\n    rate(100)\n    ball.pos.x += initial_velocity.x * dt\n    ball.pos.y += initial_velocity.y * dt + 0.5 * g.y * dt**2\n    \n    if ball.pos.y <= ball_radius + floor_height:  # Check if ball hits the ground\n        initial_velocity.y *= -1  # Reverse the y component of velocity for bouncing\n    \n    initial_velocity += g * dt  # Update velocity due to gravity\n    t += dt",
      "mode": "initial",
      "timestamp": "2024-09-04 08:22:56",
      "serial_number": 1
    },
    {
      "input": "1. Screen Settings:\n  Set the canvas width to 700 and height to 400. Do not change the canvas size.\n\n  2. Object Motion & Parameter Settings:\n  Create a VPython animation to illustrate the following physics experiment:\n  This is a simulation of projectile motion with an elastic collision between the ball and the ground, considering only the effect of gravity. The ball is launched horizontally from a height h with an initial velocity v0.\n        \n\n3. Cyber Input Variable Mapping Information:\n    (1) h is mapped to the variable named Angle_I with an initial value set to a 1-dimensional value 5\n    (2) When the value of Angle_I changes, let the animation rerun to the starting point and start with the updated h.\n    ",
      "output": "from vpython import *\n\n# Screen Settings\nscene.width = 700\nscene.height = 400\n\n# Constants\ng = 9.81  # acceleration due to gravity\n\n# Function to simulate projectile motion\ndef projectile_motion(h, v0):\n    ball = sphere(pos=vector(0, h, 0), radius=0.5, color=color.blue)\n    ground = box(pos=vector(0, 0, 0), size=vector(20, 0.1, 10), color=color.green)\n\n    dt = 0.01\n    t = 0\n    v = vector(v0, 0, 0)\n    \n    while ball.pos.y >= 0:\n        rate(100)\n        ball.pos.x += v.x * dt\n        ball.pos.y = h - 0.5 * g * t**2\n        t += dt\n\n        if ball.pos.y <= 0:  # Elastic Collision with the ground\n            v.y = -v.y\n\n# Initial values\nAngle_I = 5  # Initial height\nv0 = 10  # Initial horizontal velocity\n\n# Function to update the simulation when Angle_I changes\ndef update_simulation():\n    global Angle_I\n    Angle_I = slider.value\n    scene.delete()\n    projectile_motion(Angle_I, v0)\n\n# Create a slider for changing the height\nslider = slider(min=1, max=10, value=Angle_I, length=200, bind=update_simulation)\n\n# Run the simulation\nprojectile_motion(Angle_I, v0)",
      "mode": "initial",
      "timestamp": "2024-09-11 15:23:15",
      "serial_number": 1
    }
  ]
}