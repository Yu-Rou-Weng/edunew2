{
  "session_id": 874,
  "log": [
    {
      "input": "Oblique Projectile Motion, Ball Stops When It Hits the Ground, With Air Resistance\n\nA small ball is launched from the ground with an initial velocity v0 and launch angle \ud835\udf03. The ball accelerates downward due to gravity, and air resistance, along with gravity, are considered with the formula $f = -b v$ where b = 0.1. Simultaneously, the trajectories of the ball considering air resistance and without considering air resistance are plotted.\n\nParameter Settings\nThe program for oblique projectile motion with air resistance is similar to that without air resistance, but it additionally includes the ball's mass m and the air resistance coefficient b. To keep track of the ball's flight time, four new variables, s1, s2, t1, and t2, are introduced.\n\nDisplay Settings\nTo compare with the ideal situation without air resistance, two balls need to be drawn; ball considers air resistance, and ball2 represents the ideal condition. Since ball\u2019s acceleration depends on its velocity, it can be set within a while loop.\n\nObject Motion\nTo ensure that the animation stops only after both balls have touched the ground, the condition set in the while loop is:\n\nball.pos.y - floor.pos.y >= size or ball2.pos.y - floor.pos.y >= size\nSince ball considers air resistance, it includes:\n\nf = -b*ball.v\nball.a = vector(0, -g, 0) + f/m\nThe air resistance is calculated using the current velocity, and then substituted into $F = ma$ to update the acceleration.\n\nTo record the flight time, the statuses s1 and s2 are initially set to False. When the ball touches the ground for the first time, the status is changed to True, and the time t is stored in t1 and t2.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Speed_I as a cyber input variable, set Speed_I=30\n\n(2) Speed_I is the initial velocity of the ball. When Speed_I changes to a new value, the initial velocity of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Parameters\ng = 9.8\nb = 0.1\nsize = 0.25\nm = 0.2\nSpeed_I = 30\nangle = 30\ntheta = radians(angle)\n\n# Scene\nscene = canvas(width=800, height=800, center=vec(0,15,0), background=vec(0.5,0.5,0))\nfloor = box(length=30, height=0.01, width=10, color=color.green)\n\n# Balls\nball = sphere(pos=vec(-15, size, 0), radius=size, color=color.red)\nball2 = sphere(pos=vec(-15, size, 0), radius=size, color=color.blue)\n\n# Initial conditions\nball.v = vec(Speed_I*cos(theta), Speed_I*sin(theta), 0)\nball2.v = vec(Speed_I*cos(theta), Speed_I*sin(theta), 0)\n\n# Status and time\ns1 = False\ns2 = False\nt1 = 0\nt2 = 0\nt = 0\ndt = 0.001\n\nwhile ball.pos.y - floor.pos.y >= size or ball2.pos.y - floor.pos.y >= size:\n    rate(1000)\n    if not(s1):\n        ball.v += vec(0, -g, 0)*dt - (b/m)*ball.v*dt\n        ball.pos += ball.v*dt\n        t += dt\n        if ball.pos.y - floor.pos.y < size:\n            s1 = True\n            t1 = t\n    if not(s2):\n        ball2.v += vec(0, -g, 0)*dt\n        ball2.pos += ball2.v*dt\n        if ball2.pos.y - floor.pos.y < size:\n            s2 = True\n            t2 = t",
      "mode": "initial",
      "timestamp": "2024-07-27 11:47:29",
      "serial_number": 1
    }
  ]
}