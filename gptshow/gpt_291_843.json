{
  "session_id": 843,
  "log": [
    {
      "input": "Please write a \"Block-Spring System Elastic Collision\" VPython animation.\n\nBlock-Spring System Elastic Collision\n\nAssume there are two small balls on a horizontal smooth table, with masses $m_1$ and $m_2$, and velocities $v_1$ and $v_2$, respectively. After the collision, the velocities of the balls are $v_1'$ and $v_2'$. Since the collision process is not influenced by external forces, the system's momentum is conserved:\n$$\nm_1 v_1 + m_2 v_2 = m_1 v_1' + m_2 v_2' \\Rightarrow m_1 (v_1 - v_1') = m_2 (v_2' - v_2) \\quad (1)\n$$\n\nIf no energy is lost during the collision, the total kinetic energy of the two balls before and after the collision is equal:\n$$\n\\frac{1}{2} m_1 v_1^2 + \\frac{1}{2} m_2 v_2^2 = \\frac{1}{2} m_1 v_1'^2 + \\frac{1}{2} m_2 v_2'^2\n$$\n$$\nm_1 (v_1^2 - v_1'^2) = m_2 (v_2'^2 - v_2^2)\n$$\n$$\nm_1 (v_1 + v_1') (v_1 - v_1') = m_2 (v_2' + v_2) (v_2' - v_2) \\quad (2)\n$$\n\nDividing equation (2) by equation (1) gives:\n$$\nv_1 + v_1' = v_2' + v_2 \\Rightarrow\n\\begin{cases}\nv_1' = v_2' + v_2 - v_1 \\quad (3) \\\\\nv_2' = v_1 + v_1' - v_2 \\quad (4)\n\\end{cases}\n$$\n\nSubstituting equation (4) into equation (1) results in:\n$$\nm_1 (v_1 - v_1') = m_2 [(v_1 + v_1' - v_2) - v_2]\n$$\n$$\n(m_1 + m_2) v_1' = (m_1 - m_2) v_1 + 2 m_2 v_2 \\Rightarrow v_1' = \\frac{m_1 - m_2}{m_1 + m_2} v_1 + \\frac{2 m_2}{m_1 + m_2} v_2\n$$\n\nSubstituting equation (3) into equation (1) results in:\n$$\nm_1 [v_1 - (v_2' + v_2 - v_1)] = m_2 (v_2' - v_2)\n$$\n$$\n(m_1 + m_2) v_2' = 2 m_1 v_1 + (m_2 - m_1) v_2 \\Rightarrow v_2' = \\frac{2 m_1}{m_1 + m_2} v_1 + \\frac{m_2 - m_1}{m_1 + m_2} v_2\n$$\n\n![image](https://hackmd.io/_uploads/S1JwHjaOC.png)\n\n![image](https://hackmd.io/_uploads/H1yOHsa_C.png)\n\nProgram should be written to add an ideal spring as a buffer between blocks and illustrate the complete collision process.\n\nProgramming Part\n\nSince the program for \"Block-Spring System Elastic Collision\" and \"One-Dimensional Elastic Collision\" are almost identical, except for the addition of an ideal spring as a buffer, only the differences are described here.\n\nLine 17, set the natural length of the spring L0 = 0.5, and the spring constant k = 5.0.\n\nLine 33, create a spring using the helix object, with the starting position of the spring at the left side of b2, and the axis of the spring as vec(-L0, 0, 0).\n\nLine 58, calculate the distance dx = b2.pos.x - b1.pos.x - d1/2 - d2/2. Line 59, update the starting position of the spring.\n\nLines 62-72: If dx >= L0, which means the spring is not compressed, set the axis of the spring to vec(-L0, 0, 0) and both the restoring force of the spring and the accelerations of b1 and b2 are zero; otherwise, the spring is compressed, set the axis of the spring to vec(-dx, 0, 0), calculate the restoring force of the spring, and the accelerations of b1 and b2.\n\nLines 79-86, calculate the kinetic energy of the blocks, the elastic potential energy of the system, and the mechanical energy.\n\nA 15-length blue floor has a stationary green block at position (0,10,0), and a white spring is tied to its right side. On the floor, 5 units to the right of the green block at position (0,5,0), a red block starts moving with an initial velocity (1,0,0) and collides with the green block, performing the described block-spring system elastic collision.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Speed_I as a cyber input variable, set Speed_I=1\n(2) Speed_I is the Initial velocity of b1. When Speed_I changes to a new value, the initial velocity of b1 also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\nd1, d2 = 1.0, 0.5 # diameters\nm1, m2 = 0.2, 0.1 # masses\nv1, v2 = vector(1, 0, 0), vector(0, 0, 0) # initial velocities\nk, L0 = 5.0, 0.5 # spring constant, natural length\n\nscene = canvas(width=600, height=300, align='left', range=8, background=vector(0.5, 0.5, 0))\nfloor = box(length=15, height=0.01, width=4, color=color.blue)\nb1 = sphere(radius=d1/2, color=color.red, make_trail=True)\nb2 = sphere(radius=d2/2, pos=vector(5, -1, 0), color=color.green)\nspring = helix(radius=0.1, thickness=0.05, pos=b2.pos, axis=vector(-L0, 0, 0))\n\nb1.m, b1.v = m1, v1 # attach mass and velocity to b1\nb2.m, b2.v = m2, v2 # attach mass and velocity to b2\nb1.pos = vector(0, -0.5*d1, 0) # set b1 initial position\n\ndt = 0.001\nt = 0\nwhile t < 10:\n    rate(1/dt)\n    dx = b2.pos.x - b1.pos.x - d1/2 - d2/2\n    spring.pos = vector(b2.pos.x, -1, 0)\n    if dx >= L0: # if the spring is not compressed\n        spring.axis = vector(-L0, 0, 0)\n        F_spring = vector(0, 0, 0)\n        b1.a = vector(0, 0, 0)\n        b2.a = vector(0, 0, 0)\n    else: # if the spring is compressed\n        spring.axis = vector(-dx, 0, 0)\n        F_spring = k * (L0 - dx) * vector(1, 0, 0)\n        b1.a = F_spring / m1\n        b2.a = -F_spring / m2\n    b1.v += b1.a * dt\n    b2.v += b2.a * dt\n    b1.pos += b1.v * dt\n    b2.pos += b2.v * dt\n    t += dt",
      "mode": "initial",
      "timestamp": "2024-07-26 11:37:58",
      "serial_number": 1
    }
  ]
}