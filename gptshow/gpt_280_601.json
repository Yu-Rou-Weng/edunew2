{
  "session_id": 601,
  "log": [
    {
      "input": "# Gravity and Simple Harmonic Motion\n\nThis is a very abstract topic that is sure to come up in the second half of the senior high school physics curriculum:\n\nIn outer space, there are two planets, each with a mass of $M$. The mass of each planet is uniformly distributed and their positions are fixed. The distance between the two planets is $2d$. There is a point mass of mass $m$ located at distance $x$ along the perpendicular bisector between them. If the point mass is initially at rest and only gravity is considered, what is the period of motion of $m$ when $x \\ll d$?\n\n## Analysis:\n\nFirst, draw a force diagram for $m$. The resultant force on $m$ is\n$$\nF_x = -2 \\frac{GMmx}{(d^2 + x^2)^{3/2}} \\approx -2 \\frac{GMm}{d^3} x = -kx\n$$\n\n$$\nT = 2\\pi \\sqrt{\\frac{m}{k}} = 2\\pi \\sqrt{\\frac{d^3}{2GM}}\n$$\n\n### Force diagram for m\n\n### Graph of resultant force on m versus distance x (0 \u2264 x \u2264 100)\n\n### Graph of resultant force on m versus distance x (0 \u2264 x \u2264 8)\n\nAn enhanced version typically replaces the two planets each of mass $m$ with a uniformly distributed ring of total mass $m$ and radius $r$. If the other conditions remain the same, then the resultant force and period of motion for $m$ will be:\n\n$$\nF_x = - \\frac{GMmx}{(r^2 + x^2)^{3/2}} \\approx - \\frac{GMm}{r^3} x = -kx\n$$\n\n$$\nT = 2\\pi \\sqrt{\\frac{m}{k}} = 2\\pi \\sqrt{\\frac{r^3}{GM}}\n$$\n\n### Diagram of m and the ring of mass M\n\nThe goal of this exercise is to plot these two problems.\n\n## Parameter Settings\n\nVariables such as size, m, M, d, h, G, v0, i, t, dt are set, and their purposes are noted in the comments.\n\n## Visualization Settings\n\nSince VPython's default viewpoint is from the positive z-axis looking towards the origin, with the right side of the screen as the positive x-axis and the top as the positive y-axis, the original problem has m moving along the x-axis. In the animation, this is changed to movement along the y-axis.\n\nCreate planets s1 and s2 and a small ball, ball, and set the initial position of the ball to (0, h, 0) with an initial speed of 0. If you want to try launching the ball from different distances later, you can adjust the h parameter.\n\nDraw a line between the planets, indicating the position of the equilibrium point; the starting height is the top point, so the bottom point should be at y = -h.\n\nGenerate arrows representing velocity and acceleration to avoid overlap, placed at distances of 1 and 2 to the right of the ball.\n\nOpen the graphics window to plot the ball's position, velocity, acceleration, and time relationships.\n\n## Object Motion\n\nTo make the animation stop after the ball has traveled back and forth 5 times, set the condition in the while loop to i < 5, and use `if(ball.pos.y > h)` to determine if the ball has returned to the starting point. If it has, print the elapsed time t and the number of times i the ball has returned to the start.\n\nUsing the law of universal gravitation, calculate the force F on the ball, then from F = ma calculate the ball's acceleration, and update velocity and position.\n\nThe program to be written is for simple harmonic motion caused by gravity, starting from the endpoint with an initial velocity of 0.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Parameter Settings\nM = 1e10\nm = 1e3\nG = 1\nd = 1\nh = 0.1 * d\nk = 2 * G * M / d**3\nT = 2 * pi * sqrt(m / k)\nv0 = 0\nt = 0\ndt = T / 5000\ni = 0\n\n# Visualization Settings\ns1 = sphere(pos=vector(-d, 0, 0), radius=0.1 * d, color=color.red)\ns2 = sphere(pos=vector(d, 0, 0), radius=0.1 * d, color=color.red)\nball = sphere(pos=vector(0, h, 0), radius=Radius_I, color=color.green, make_trail=True, trail_type=\"points\", retain=50)\nline = curve(vector(-d, 0, 0), vector(d, 0, 0))\ntop = curve(vector(0, h, 0), vector(0, -h, 0))\nv_arrow = arrow(pos=ball.pos + vector(1, 0, 0), axis=vector(v0, 0, 0), shaftwidth=0.05, color=color.yellow)\na_arrow = arrow(pos=ball.pos + vector(2, 0, 0), axis=vector(0, 0, 0), shaftwidth=0.05, color=color.magenta)\ngd = graph(title=\"y-t plot\", xtitle=\"t\", ytitle=\"y\", fast=False)\nyt = gcurve(graph=gd, color=color.red)\ngd2 = graph(title=\"v-t plot\", xtitle=\"t\", ytitle=\"v\", fast=False)\nvt = gcurve(graph=gd2, color=color.red)\ngd3 = graph(title=\"a-t plot\", xtitle=\"t\", ytitle=\"a\", fast=False)\nat = gcurve(graph=gd3, color=color.red)\n\n# Object Motion\nwhile i < 5:\n    rate(1000)\n    r1 = ball.pos - s1.pos\n    r2 = ball.pos - s2.pos\n    F = - G * M * m * norm(r1) / mag2(r1) - G * M * m * norm(r2) / mag2(r2)\n    a = F / m\n    ball.v += a * dt\n    ball.pos += ball.v * dt\n    t += dt\n    v_arrow.pos = ball.pos + vector(1, 0, 0)\n    v_arrow.axis = ball.v\n    a_arrow.pos = ball.pos + vector(2, 0, 0)\n    a_arrow.axis = a\n    yt.plot(t, ball.pos.y)\n    vt.plot(t, ball.v.y)\n    at.plot(t, a.y)\n    if ball.pos.y > h:\n        i += 1\n        print(\"t = \", t, \", i = \", i)",
      "mode": "initial",
      "timestamp": "2024-07-24 03:25:21",
      "serial_number": 1
    },
    {
      "input": "Please update the program by fixing the following error:\nRadius_I is not defined\n\nHere's the current program:\nfrom vpython import *\n\nM = 2E20\nm = 1E10\nG = 6.7E-11\nd = 8E9\nh = 1E9\nv0 = 1E5\ni = 0\nt = 0\ndt = 1E5\n\nscene = canvas(width=800, height=600, align='left')\ns1 = sphere(pos=vector(-d, 0, 0), radius=1E9, color=color.yellow)\ns2 = sphere(pos=vector(d, 0, 0), radius=1E9, color=color.yellow)\nball = sphere(pos=vector(0, h, 0), radius=1E8, color=color.red, make_trail=True)\nline = curve(pos=[s1.pos, s2.pos])\nline2 = curve(pos=[vector(0, h, 0), vector(0, -h, 0)], color=color.orange)\nv_arrow = arrow(pos=ball.pos + vector(1, 0, 0), axis=vector(0, 0, 0), color=color.green)\na_arrow = arrow(pos=ball.pos + vector(2, 0, 0), axis=vector(0, 0, 0), color=color.blue)\n\nwhile i < 5:\n    rate(1000)\n    F = -G * M * m * ball.pos / mag(ball.pos)**3\n    a = F / m\n    ball.pos = ball.pos + v0 * vector(0, 1, 0) * dt + 0.5 * a * dt**2\n    v0 = v0 + a.y * dt\n    if ball.pos.y <= h:\n        t = 0\n        i += 1\n        v0 = 1E5\n    t += dt\n    v_arrow.pos = ball.pos + vector(1, 0, 0)\n    v_arrow.axis = vector(0, v0 * 1E-7, 0)\n    a_arrow.pos = ball.pos + vector(2, 0, 0)\n    a_arrow.axis = a * 1E-7\n\nscene_init()\n\ncnt = 0\nwhile True:\n    rate(freq)\n    cnt = cnt + 1\n    if cnt % (freq // 5) == 0:\n        update_info()",
      "output": "from vpython import *\n\n# Parameter Settings\nM = 1e10\nm = 1e3\nG = 1\nd = 1\nh = 0.1 * d\nk = 2 * G * M / d**3\nT = 2 * pi * sqrt(m / k)\nv0 = 0\nt = 0\ndt = T / 5000\ni = 0\n\n# Visualization Settings\ns1 = sphere(pos=vector(-d, 0, 0), radius=0.1 * d, color=color.red)\ns2 = sphere(pos=vector(d, 0, 0), radius=0.1 * d, color=color.red)\nball = sphere(pos=vector(0, h, 0), radius=0.1 * d, color=color.green, make_trail=True, trail_type=\"points\", retain=50)\nline = curve(vector(-d, 0, 0), vector(d, 0, 0))\ntop = curve(vector(0, h, 0), vector(0, -h, 0))\nv_arrow = arrow(pos=ball.pos + vector(1, 0, 0), axis=vector(v0, 0, 0), shaftwidth=0.05, color=color.yellow)\na_arrow = arrow(pos=ball.pos + vector(2, 0, 0), axis=vector(0, 0, 0), shaftwidth=0.05, color=color.magenta)\ngd = graph(title=\"y-t plot\", xtitle=\"t\", ytitle=\"y\", fast=False)\nyt = gcurve(graph=gd, color=color.red)\ngd2 = graph(title=\"v-t plot\", xtitle=\"t\", ytitle=\"v\", fast=False)\nvt = gcurve(graph=gd2, color=color.red)\ngd3 = graph(title=\"a-t plot\", xtitle=\"t\", ytitle=\"a\", fast=False)\nat = gcurve(graph=gd3, color=color.red)\n\n# Object Motion\nwhile i < 5:\n    rate(1000)\n    r1 = ball.pos - s1.pos\n    r2 = ball.pos - s2.pos\n    F = - G * M * m * norm(r1) / mag2(r1) - G * M * m * norm(r2) / mag2(r2)\n    a = F / m\n    ball.v += a * dt\n    ball.pos += ball.v * dt\n    t += dt\n    v_arrow.pos = ball.pos + vector(1, 0, 0)\n    v_arrow.axis = ball.v\n    a_arrow.pos = ball.pos + vector(2, 0, 0)\n    a_arrow.axis = a\n    yt.plot(t, ball.pos.y)\n    vt.plot(t, ball.v.y)\n    at.plot(t, a.y)\n    if ball.pos.y > h:\n        i += 1\n        print(\"t = \", t, \", i = \", i)",
      "mode": "fix_error",
      "timestamp": "2024-07-24 03:25:50",
      "serial_number": 2
    },
    {
      "input": "Please update the program by fixing the following error:\nRadius_I is not defined\n\nHere's the current program:\nfrom vpython import *\n\n# Parameter Settings\nM = 1e10\nm = 1e3\nG = 1\nd = 1\nh = 0.1 * d\nk = 2 * G * M / d**3\nT = 2 * pi * sqrt(m / k)\nv0 = 0\nt = 0\ndt = T / 5000\ni = 0\n\n# Visualization Settings\ns1 = sphere(pos=vector(-d, 0, 0), radius=0.1 * d, color=color.red)\ns2 = sphere(pos=vector(d, 0, 0), radius=0.1 * d, color=color.red)\nball = sphere(pos=vector(0, h, 0), radius=Radius_I, color=color.green, make_trail=True, trail_type=\"points\", retain=50)\nline = curve(vector(-d, 0, 0), vector(d, 0, 0))\ntop = curve(vector(0, h, 0), vector(0, -h, 0))\nv_arrow = arrow(pos=ball.pos + vector(1, 0, 0), axis=vector(v0, 0, 0), shaftwidth=0.05, color=color.yellow)\na_arrow = arrow(pos=ball.pos + vector(2, 0, 0), axis=vector(0, 0, 0), shaftwidth=0.05, color=color.magenta)\ngd = graph(title=\"y-t plot\", xtitle=\"t\", ytitle=\"y\", fast=False)\nyt = gcurve(graph=gd, color=color.red)\ngd2 = graph(title=\"v-t plot\", xtitle=\"t\", ytitle=\"v\", fast=False)\nvt = gcurve(graph=gd2, color=color.red)\ngd3 = graph(title=\"a-t plot\", xtitle=\"t\", ytitle=\"a\", fast=False)\nat = gcurve(graph=gd3, color=color.red)\n\n# Object Motion\nwhile i < 5:\n    rate(1000)\n    r1 = ball.pos - s1.pos\n    r2 = ball.pos - s2.pos\n    F = - G * M * m * norm(r1) / mag2(r1) - G * M * m * norm(r2) / mag2(r2)\n    a = F / m\n    ball.v += a * dt\n    ball.pos += ball.v * dt\n    t += dt\n    v_arrow.pos = ball.pos + vector(1, 0, 0)\n    v_arrow.axis = ball.v\n    a_arrow.pos = ball.pos + vector(2, 0, 0)\n    a_arrow.axis = a\n    yt.plot(t, ball.pos.y)\n    vt.plot(t, ball.v.y)\n    at.plot(t, a.y)\n    if ball.pos.y > h:\n        i += 1\n        print(\"t = \", t, \", i = \", i)",
      "output": "from vpython import *\n\n# Parameter Settings\nM = 1e10\nm = 1e3\nG = 1\nd = 1\nh = 0.1 * d\nk = 2 * G * M / d**3\nT = 2 * pi * sqrt(m / k)\nv0 = 0\nt = 0\ndt = T / 5000\ni = 0\nRadius_I = 0.1 * d  # define Radius_I\n\n# Visualization Settings\ns1 = sphere(pos=vector(-d, 0, 0), radius=0.1 * d, color=color.red)\ns2 = sphere(pos=vector(d, 0, 0), radius=0.1 * d, color=color.red)\nball = sphere(pos=vector(0, h, 0), radius=Radius_I, color=color.green, make_trail=True, trail_type=\"points\", retain=50)\nline = curve(vector(-d, 0, 0), vector(d, 0, 0))\ntop = curve(vector(0, h, 0), vector(0, -h, 0))\nv_arrow = arrow(pos=ball.pos + vector(1, 0, 0), axis=vector(v0, 0, 0), shaftwidth=0.05, color=color.yellow)\na_arrow = arrow(pos=ball.pos + vector(2, 0, 0), axis=vector(0, 0, 0), shaftwidth=0.05, color=color.magenta)\ngd = graph(title=\"y-t plot\", xtitle=\"t\", ytitle=\"y\", fast=False)\nyt = gcurve(graph=gd, color=color.red)\ngd2 = graph(title=\"v-t plot\", xtitle=\"t\", ytitle=\"v\", fast=False)\nvt = gcurve(graph=gd2, color=color.red)\ngd3 = graph(title=\"a-t plot\", xtitle=\"t\", ytitle=\"a\", fast=False)\nat = gcurve(graph=gd3, color=color.red)\n\n# Object Motion\nwhile i < 5:\n    rate(1000)\n    r1 = ball.pos - s1.pos\n    r2 = ball.pos - s2.pos\n    F = - G * M * m * norm(r1) / mag2(r1) - G * M * m * norm(r2) / mag2(r2)\n    a = F / m\n    ball.v += a * dt\n    ball.pos += ball.v * dt\n    t += dt\n    v_arrow.pos = ball.pos + vector(1, 0, 0)\n    v_arrow.axis = ball.v\n    a_arrow.pos = ball.pos + vector(2, 0, 0)\n    a_arrow.axis = a\n    yt.plot(t, ball.pos.y)\n    vt.plot(t, ball.v.y)\n    at.plot(t, a.y)\n    if ball.pos.y > h:\n        i += 1\n        print(\"t = \", t, \", i = \", i)",
      "mode": "fix_error",
      "timestamp": "2024-07-24 03:25:51",
      "serial_number": 3
    }
  ]
}