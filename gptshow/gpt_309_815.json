{
  "session_id": 815,
  "log": [
    {
      "input": "Rutherford Scattering\n\nThe Rutherford scattering experiment is critical evidence for the existence of atomic nuclei. By directing alpha particles (helium nuclei) at a gold foil, the electrostatic force between the alpha particles and the gold nuclei is repulsive. Ignoring the effects of gravity, since the gold nuclei remain stationary, the electrostatic force experienced by the alpha particles passes through the gold nuclei, conserving the angular momentum relative to the gold nuclei. Only the electrostatic forces do work between the alpha particles and the gold nuclei, conserving the system's mechanical energy.\n\nSchematic of the Rutherford Scattering Experiment:\n![image](https://hackmd.io/_uploads/H1zf236OC.png)\n\nThe diagram below is a schematic of the Rutherford scattering experiment, where the alpha particle moves to the right from infinity. The perpendicular distance between the gold nucleus and the direction of velocity is called the impact parameter, usually denoted by b. The program's goal is to change b and plot the relationship between the kinetic energy of the alpha particles, the system's potential energy, the mechanical energy, and time, to find the upward displacement of the alpha particles.\n\nParameter Settings\n\nVariables are set as r1, m1, q1, c1, r2, m2, q2, c2, v0, b, L, k, t, dt, with their purposes written in the comments for each line. To simplify numerical settings, the unit of length is nanometers (nm), mass is atomic mass units (amu), charge is elementary charges (e), and time is nanoseconds (ns), assuming the value of k is 1.\n\nScreen Setup\n- Create an animation window.\n- Generate a nucleus.\n- Create arrows representing velocity and acceleration.\n- Generate a plotting window.\n\nObject Motion\n- The animation continues as long as the particle is within -L/2 < x < L/2 and -L/2 < y < L/2, thus the condition in the while loop is set as (abs(alpha.pos.x) < L/2 and abs(alpha.pos.y) < L/2).\n\nCalculate the resultant force on the helium nucleus, update the helium nucleus's acceleration, velocity, and position.\n\nUpdate the arrows representing velocity and acceleration.\n\nCalculate the kinetic energy of the helium nucleus, the system's potential energy, and the mechanical energy and plot them.\n\nUpdate time.\n![image](https://hackmd.io/_uploads/Sk5e6n6dC.png)\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# parameter settings\nr1, m1, q1, c1 = 79., 197., 79., color.yellow # gold nucleus settings\nr2, m2, q2, c2 = 2., 4., 2., color.cyan # alpha particle settings\nv0, b, L, k, t, dt = 0.01, 2., 2000., 1., 0., 0.01 # others\n\n# screen setup\nscene = canvas(width=800, height=800, background=vec(0.5, 0.5, 0))\n\ngold = sphere(pos=vec(0, 0, 0), radius=r1, mass=m1, charge=q1, color=c1)\nalpha = sphere(pos=vec(-L/2, b, 0), radius=r2, mass=m2, charge=q2, color=c2, make_trail=True)\nalpha.v = vec(v0, 0, 0)\n\n# create arrows\nv_alpha = arrow(pos=alpha.pos, axis=mag(alpha.v)*vec(1, 0, 0), color=color.red)\np_alpha = arrow(pos=alpha.pos, axis=mag(alpha.v)*alpha.mass*vec(1, 0, 0), color=color.green)\nF_net_alpha = arrow(pos=alpha.pos, axis=vec(0, 0, 0), color=color.blue)\n\n# generate a plotting window\ngd = graph(width=600, height=450, title='E-t', xtitle='time', ytitle='Energy', foreground=color.black, background=color.white)\nkt = gcurve(graph=gd, color=color.red) # kinetic energy\nut = gcurve(graph=gd, color=color.blue) # potential energy\net = gcurve(graph=gd, color=color.black) # mechanical energy\n\n# object motion\nwhile (abs(alpha.pos.x) < L/2 and abs(alpha.pos.y) < L/2):\n    rate(1000)\n    # calculate force, velocity, and position\n    r = alpha.pos - gold.pos\n    F = k * q1 * q2 / mag(r)**2 * norm(r)\n    alpha.v += F/alpha.mass*dt\n    alpha.pos += alpha.v*dt\n\n    # update arrows\n    v_alpha.pos = alpha.pos\n    v_alpha.axis = mag(alpha.v) * norm(alpha.v)\n    p_alpha.pos = alpha.pos\n    p_alpha.axis = mag(alpha.v) * alpha.mass * norm(alpha.v)\n    F_net_alpha.pos = alpha.pos\n    F_net_alpha.axis = mag(F) * norm(F)\n\n    # calculate kinetic energy, potential energy, and mechanical energy\n    K = 0.5 * alpha.mass * mag(alpha.v)**2\n    U = k * q1 * q2 / mag(r)\n    E = K + U\n\n    # plot energy-time graph\n    kt.plot(pos=(t, K))\n    ut.plot(pos=(t, U))\n    et.plot(pos=(t, E))\n\n    t += dt",
      "mode": "initial",
      "timestamp": "2024-07-26 07:58:39",
      "serial_number": 1
    }
  ]
}