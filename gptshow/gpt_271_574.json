{
  "session_id": 574,
  "log": [
    {
      "input": "### Horizontal Projectile Motion, Considering Gravity and Air Resistance f = -bv\n\nA ball is thrown horizontally from a height h with an initial speed v0. The ball accelerates downward due to gravity while also considering the effects of gravity and air resistance f = -bv.\n\n2. Horizontal Projectile Motion, Coefficient of Restitution e:\nA ball is thrown horizontally from a height h with an initial speed v0. The ball accelerates downward due to gravity. When the ball hits the floor, it bounces back, considering only the effect of gravity. The coefficient of restitution upon hitting the floor is e.\n\nThe code for Horizontal Projectile Motion with Coefficient of Restitution e is almost identical to that of Horizontal Projectile Motion, with the addition of the coefficient of restitution e, and changes when the ball hits the floor to:\n\nif ball.pos.y - floor.pos.y <= size + 0.5*floor.height and ball.v.y < 0:\n    i += 1\n    print(i, t, ball.pos.x + L/2)\n    ball.v.y = -ball.v.y * e\n\n3. \"Horizontal Projectile Motion, Considering Gravity and Air Resistance f = -bv\" Code\nThe code for \"Horizontal Projectile Motion, Considering Gravity and Air With Resistance f = -bv\" is almost identical to that of \"Horizontal Projectile Motion, Coefficient of Restitution e,\" except for:\n\nThe addition of the air resistance coefficient b.\n\nWithin the while loop, add:\n\n    f = -b*ball.v\n    ball.a = vec(0, -g, 0) + f/m\nCalculating the current air resistance and the ball's acceleration.\n\nTo prevent the ball from experiencing excessive resistance and failing to reach the right edge of the floor, an additional condition i < 20 is added to the while loop, stopping the animation after the ball hits the floor 20 times.\n\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Speed_I as a cyber input variable, set Speed_I=5\n(2) Speed_I is the horizontal initial velocity of the ball. When Speed_I changes to a new value, the horizontal initial velocity of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math and time.",
      "output": "from vpython import *\n\n# Variables\nh = 10 # height from which the ball is thrown\ng = 9.8 # gravity acceleration\nL = 20 # length of the floor\nw = 0.2 # width of the floor\nb = 0.1 # air resistance coefficient\nm = 1 # mass of the ball\nsize = 0.2 # radius of the ball\ne = 0.9 # coefficient of restitution\nSpeed_I = 5 # initial speed\n\n# Objects\nfloor = box(length=L, height=0.01, width=w, color=color.blue)\nball = sphere(pos=vec(0, h, 0), radius=size, color=color.red)\nball.v = vec(Speed_I, 0, 0) # initial velocity of the ball\n\n# Animation\nt = 0\ndt = 0.001\ni = 0\nwhile i < 20:\n    rate(1000)\n    if ball.pos.y - floor.pos.y <= size + 0.5*floor.height and ball.v.y < 0:\n        i += 1\n        ball.v.y = -ball.v.y * e\n    else:\n        f = -b*ball.v\n        ball.a = vec(0, -g, 0) + f/m\n        ball.v = ball.v + ball.a*dt\n    ball.pos = ball.pos + ball.v*dt\n    t = t + dt",
      "mode": "initial",
      "timestamp": "2024-07-23 22:18:45",
      "serial_number": 1
    }
  ]
}