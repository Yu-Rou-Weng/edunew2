{
  "session_id": 613,
  "log": [
    {
      "input": "Program to Write: Planetary Motion, Storing Planetary Data in a Dictionary\n\nKepler's Laws of Planetary Motion consist of the following three laws:\n\n1. **First Law (The Law of Orbits)**: The orbit of every planet around the sun is an ellipse, with the sun at one of the foci.\n  \n2. **Second Law (The Law of Equal Areas)**: The line that connects a planet to the sun sweeps out equal areas during equal intervals of time. If the distance between the sun and the planet is \\( r \\), the velocity of the planet is \\( v \\), and the angle between \\( r \\) and \\( v \\) is \\( \\theta \\), then the area swept by the line connecting the planet to the sun in a unit of time is\n   $$\n   \\frac{\\Delta A}{\\Delta t} = \\frac{1}{2} rv \\sin{\\theta} = \\text{constant}\n   $$\n\n3. **Third Law (The Law of Periods)**: The square of the orbital period \\( T \\) of a planet is directly proportional to the cube of the semi-major axis \\( a \\) of its orbit.\n   $$\n   \\frac{a^3}{T^2} = \\text{constant}\n   $$\n\nThe First Law is due to the gravitational force between the sun and the planets, which according to the law of universal gravitation, proves that only an ellipse can be a stable orbit. The Second Law is due to the conservation of angular momentum relative to the sun, as gravity acts through the sun, thus the area swept by the line connecting the planet to the sun is equal in equal times. The Third Law can be derived using the law of gravitation as the centripetal force. Using real data of the planets in the solar system, these three laws can be graphically represented.\n\nParameter Settings\n\nA dictionary is a special data storage format in Python. Assuming a dictionary named data is defined, the syntax is:\n\ndata = {\"key1\": value1, \"key2\": value2, ...}\nQuotes can be either single or double, as long as they are used in pairs. Each key corresponds to a piece of data, which can be of any format, but each key must be unique and not duplicated. To access the data corresponding to key2, the syntax is:\n\ndata[\"key2\"]\nFor example, in the program:\n\nradius = {\"Mercury\": 2439700, \"Venus\": 6051800, \"Earth\": 6371000, \"Mars\": 3389500, \"Sun\": 696392000}\nIf you input radius[\"Sun\"], the system outputs 696392000.\n\nVariables such as G, eps, t, and dt are also set, with their purposes commented in the code.\n\nDisplay Settings\n\nThe display settings are very similar to the program \"Planetary Motion\", but creating planet objects is slightly different. Previously, corresponding variable names were directly input, but now data is handled using the dictionary + name method. For example, setting the position of the Earth at the aphelion is done using pos = vec(d_at_aphelion[\"Earth\"], 0, 0). This approach makes the code used to generate each planet almost identical, only the name of the planet is changed to automatically find the corresponding data.\n\nObject Motion\n\nThe object motion part is very similar to the \"Planetary Motion\" program. Since only two planets are depicted, the code for calculating acceleration, updating velocity, and displacement is written for each planet separately. Additionally, an if statement is used to check if a planet has returned near its starting point, which is used to calculate its period. Although this method is not very precise, it is still functional.\n(1) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Constants\nG = 6.67430E-11 # gravitational constant\nMs = 1.989E30 # mass of the sun\n\n# Define a dictionary to store planetary data\nplanet_data = {\n    \"Mercury\": {\"radius\": 2.4397E6, \"mass\": 0.33011E24, \"d_at_aphelion\": 0.466697E12, \"orbital_speed\": 58980},\n    \"Venus\": {\"radius\": 6.0518E6, \"mass\": 4.867E24, \"d_at_aphelion\": 0.728213E12, \"orbital_speed\": 35260},\n    \"Earth\": {\"radius\": 6.371E6, \"mass\": 5.97219E24, \"d_at_aphelion\": 1.5210E11, \"orbital_speed\": 29290},\n    \"Mars\": {\"radius\": 3.3895E6, \"mass\": 0.64171E24, \"d_at_aphelion\": 0.2492E12, \"orbital_speed\": 21970}\n}\n\nscene = canvas(title=\"Planetary Motion\", width=800, height=800, center=vec(0,0,0), background=color.black)\n\n# Create a sphere representing the sun\nsun = sphere(pos=vec(0,0,0), radius=696392000, color=color.yellow)\n\n# Create a dictionary to store planet objects\nplanets = {}\n\nfor planet, data in planet_data.items():\n    planets[planet] = sphere(pos=vec(data[\"d_at_aphelion\"], 0, 0), radius=data[\"radius\"], color=color.white)\n    planets[planet].v = vec(0, data[\"orbital_speed\"], 0) \n    planets[planet].m = data[\"mass\"]\n\n# Create a dictionary to store trail curves for each planet\ntrails = {planet: curve(color=color.white) for planet in planets}\n\n# Time parameters\nt = 0\ndt = 60*60*24 # one day\n\nwhile True:\n    rate(1000)\n    \n    for planet, obj in planets.items():\n        # Calculate gravitational force\n        F = -G * Ms * obj.m * norm(obj.pos) / mag2(obj.pos)\n        \n        # Update velocity and position\n        obj.v += F/obj.m * dt\n        obj.pos += obj.v * dt\n\n        # Draw the trail\n        trails[planet].append(pos=obj.pos)\n\n    t += dt",
      "mode": "initial",
      "timestamp": "2024-07-24 03:52:02",
      "serial_number": 1
    }
  ]
}