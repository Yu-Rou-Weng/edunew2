{
  "session_id": 718,
  "log": [
    {
      "input": "Magnetic Field Generated by a Current-Carrying Solenoid\n\nIn Chapter 8 of the elective physics course, \"The Magnetic Effect of Current,\" the Biot-Savart law is introduced. This law is used to calculate the magnetic field produced by a small segment of current-carrying wire at a point in space. The equation is as follows:\n$$\nd\\vec{B} = \\frac{\\mu_0}{4\\pi} \\frac{I d\\vec{L} \\times \\hat{r}}{r^2} \\Rightarrow dB = \\frac{\\mu_0}{4\u03c0} \\frac{I dL \\sin{\\theta}}{r^2}\n$$\n\nUsing the Biot-Savart law, the magnetic field magnitude at a perpendicular distance $r$ from a long straight current-carrying wire can be calculated as:\n$$\nB = \\frac{\\mu_0 I}{2\\pi r}\n$$\n\nThe magnetic field magnitude at the center of a current-carrying loop with radius $r$ is:\n$$\nB = \\frac{\\mu_0 I}{2r}\n$$\n\nThe magnetic field magnitude at the center of a solenoid with $n$ turns per unit length is:\n$$\nB = \\mu_0 n I\n$$\n\nMagnetic fields are distributed in space, but the diagrams in textbooks are often flat. Therefore, I want to use VPython to visualize the strength and direction of the magnetic field in space.\n\nProgramming Part\n\nThe program \"Magnetic Field Generated by a Current-Carrying Solenoid\" is based on the \"Magnetic Field Generated by a Current-Carrying Loop,\" with the following modifications:\n\nNew variables include the radius of the small sphere point_size, the radius of the conductor seg_size, the radius of the solenoid r, and the number of turns of the solenoid num.\n\nA for loop is used to arrange 500 small spheres into a helical line, storing the data in the list points.\n\nAnother for loop reads two adjacent small spheres from the list points at a time, calculates the length and direction of the line connecting them, and draws the conductor from the midpoint of the two spheres, storing the data in the list segs.\n\nImage to be drawn:\n![image](https://hackmd.io/_uploads/r1QWA3TuC.png)\n(1) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n# Constants\nmu = 4*pi*1E-7\nI = 1E-1\nnum = 500\n# Scene\nscene = canvas(width=800, height=800, background=vec(0.5, 0.5, 0))\n# Objects\npoints = [sphere(pos=vec(1*cos(2*pi*i/num), 1*sin(2*pi*i/num), 2*pi*i/(3*num)), radius=0.02) for i in range(num+1)]\nsegs = [cylinder(pos=(points[i].pos+points[i+1].pos)/2, axis=points[i+1].pos-points[i].pos, radius=0.01) for i in range(num)]\nB_arrows = [arrow(pos=vec(0, 0, 0), axis=vec(0, 0, 0), color=color.red) for i in range(21)]\n# Animation\nfor B in B_arrows:\n    theta = 2*pi*B_arrows.index(B)/len(B_arrows)\n    B.pos = vec(2*cos(theta), 2*sin(theta), 1)\n    B.axis = vec(0, 0, 0)\n    for seg in segs:\n        r = B.pos-seg.pos\n        if mag(r) < 0.02: continue\n        dB = mu*I*cross(seg.axis, r.hat)/(4*pi*mag(r)**2)\n        B.axis += dB",
      "mode": "initial",
      "timestamp": "2024-07-24 13:37:05",
      "serial_number": 1
    }
  ]
}