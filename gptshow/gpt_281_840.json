{
  "session_id": 840,
  "log": [
    {
      "input": "# Gravity and Simple Harmonic Motion\n\nThis is a necessarily abstract question that appears in the second-year high school curriculum:\n\nIn outer space, there are two planets, each with a mass of $M$. The mass distribution of the planets is uniform, and their positions are fixed. The distance between the two planets is $2d$. On the perpendicular bisector at a distance $x$ from the center, there is a point mass of $m$. Assuming the point mass was initially at rest and only considering the effects of gravity, what is the period of motion of $m$ when $x \\ll d$?\n\n## Analysis:\n\nFirst, draw a force diagram for $m$. The resultant force on $m$ is\n$$\nF_x = -2 \\frac{GMmx}{(d^2 + x^2)^{3/2}} \\approx -2 \\frac{GMm}{d^3} x = -kx\n$$\n\n$$\nT = 2\\pi \\sqrt{\\frac{m}{k}} = 2\\pi \\sqrt{\\frac{d^3}{2GM}}\n$$\n\n### Force diagram for m\n\n### Relationship between the resultant force on m and the distance x (0 \u2264 x \u2264 100)\n\n### Relationship between the resultant force on m and the distance x (0 \u2264 x \u2264 8)\n\nAn enhanced version usually replaces the two planets each with mass $m$ with a uniformly distributed ring with total mass $m$ and radius $r$. If the other conditions remain the same, the resultant force on $m$ and the period of motion are:\n\n$$\nF_x = - \\frac{GMmx}{(r^2 + x^2)^{3/2}} \\approx - \\frac{GMm}{r^3} x = -kx\n$$\n\n$$\nT = 2\\pi \\sqrt{\\frac{m}{k}} = 2\\pi \\sqrt{\\frac{r^3}{GM}}\n$$\n\n### Diagram of m and M as a ring\n\nThe goal now is to draw these two problems.\n\n## Parameter Settings\n\nVariables such as size, m, M, d, h, G, v0, i, t, dt are set here, with their purposes noted in the corresponding comments.\n\n## Screen Settings\n\nSince VPython's default viewpoint is from the +z-axis looking towards the origin, with the right side of the screen being the +x-axis and the top being the +y-axis, the original problem has m moving along the x-axis. In the animation, this is changed to movement along the y-axis.\n\nCreate planets s1, s2, and a small ball ball, setting the initial position of the ball at (0, h, 0) with an initial velocity of 0. If you later want to try launching the ball from a different distance, simply modify the parameter h.\n\nDraw a line between the planets, marking the equilibrium point; the starting height is the top point, so the bottom point should be at y = -h.\n\nGenerate arrows representing velocity and acceleration. To prevent the arrows from overlapping, they are placed at distances 1 and 2 to the right of the ball.\n\nOpen the drawing window to plot the position, velocity, acceleration, and time relationship graph of the ball.\n\n## Object Motion\n\nTo make the animation return to the starting point 5 times, set the condition in the while loop to i < 5, and use `if(ball.pos.y > h)` to check if the ball has returned to the starting point. If it has, print the elapsed time t and the number of returns i.\n\nCalculate the resultant force F on the ball using the universal law of gravitation, then calculate the ball's acceleration from F = ma, and update the velocity and position.\n\nPlease write the \"Simple harmonic motion caused by gravity, starting from rest, from the endpoint\" VPython code.\n\nPlace a blue sphere with a radius of 1 at positions (-10, 0, 0) and (10, 0, 0), each with a mass of 2E13, fixed in place. At position (0, 3, 0) is a small ball with a radius of 0.3 and mass of 1, starting with an initial velocity of (0,5,0), and begins moving under the gravity of the two blue spheres. A yellow line connects the centers of the two blue spheres.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Constants\nG = 6.67E-11\nM = 2E13\nm = 1\nd = 10\nk = 2*G*M*m/d**3\n\n# Objects\ns1 = sphere(pos=vector(-10, 0, 0), radius=1, color=color.blue, mass=M)\ns2 = sphere(pos=vector(10, 0, 0), radius=1, color=color.blue, mass=M)\nball = sphere(pos=vector(0, 3, 0), radius=0.3, color=color.red, mass=m, v=vector(0, 0, 0))\nline = cylinder(pos=s1.pos, axis=s2.pos-s1.pos, radius=0.1, color=color.yellow)\n\n# Variables\nt = 0\ndt = 0.001\ni = 0\n\n# Graphs\ngd = graph(x=0, y=400, width=600, height=450, title='y-t plot', xtitle='t', ytitle='y', xmax=20, xmin=0, ymax=4, ymin=-4)\nf1 = gdots(graph=gd, color=color.red)\n\nwhile i < 5:\n    rate(1000)\n    r1 = ball.pos - s1.pos\n    r2 = ball.pos - s2.pos\n    F1 = -G*m*s1.mass*norm(r1) / mag(r1)**2\n    F2 = -G*m*s2.mass*norm(r2) / mag(r2)**2\n    F_net = F1 + F2\n    ball.v += F_net/ball.mass * dt\n    ball.pos += ball.v * dt\n    f1.plot(t, ball.pos.y)\n    \n    if ball.pos.y > 3:\n        i += 1\n        print(\"i:\", i, \"t:\", t)\n    t += dt",
      "mode": "initial",
      "timestamp": "2024-07-26 11:19:26",
      "serial_number": 1
    }
  ]
}