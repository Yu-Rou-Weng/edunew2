{
  "session_id": 1128,
  "log": [
    {
      "input": "1. Screen Settings:</br>Set the canvas width to 700 and height to 400. Do not change the canvas size.</br>2. Object Motion & Parameter Settings:</br>Create a VPython animation to illustrate the following physics experiment:<br><span style=\"color:red;\">Do NOT Add import time to your code.</br>## Small Ball Pendulum\n\nA small ball is suspended from the ceiling using an ideal string. If the angle between the string and the vertical line (the pendulum angle) is \ud835\udf03\u2080, and the ball is released from rest, then when the pendulum angle is \ud835\udf03, the ball is subjected to gravitational force and the tension in the string. The torque relative to the suspension point is given by:\n\n$$\n\\vec{\\tau} = \\vec{r} \\times \\vec{F} \\quad \\Rightarrow \\quad \\tau = r F \\sin \\theta\n$$\n\nIf the moment of inertia (\ud835\udc3c) is defined as:\n\n$$\nI = m r^2\n$$\n\nSince the torque (\ud835\udf0f) is in the opposite direction of the angular acceleration (\ud835\udefc), the relationship between them is:\n\n$$\n\\tau = -I \\alpha \\quad \\Rightarrow \\quad r F \\sin \\theta = -m r^2 \\frac{d^2 \\theta}{dt^2} \\quad \\Rightarrow \\quad \\frac{F}{m r} \\sin \\theta = - \\frac{d^2 \\theta}{dt^2}\n$$\n\nIf $r = L$ and $F = mg$, and when $\\theta < 5^\\circ$, we can approximate $\\sin \\theta \\approx \\theta$. The above equation can be rewritten as:\n\n$$\n\\frac{g}{L} \\theta = - \\frac{d^2 \\theta}{dt^2}\n$$\n\nThe solution is:\n\n$$\n\\theta(t) = \\theta_0 \\cos \\left( \\sqrt{\\frac{g}{L}} t \\right) = \\theta_0 \\cos(\\omega t)\n$$\n\nIn the above equation, $\\omega$ is the angular frequency of the pendulum\u2019s oscillation, and the period is:\n\n$$\nT = \\frac{2\\pi}{\\omega} = 2\\pi \\sqrt{\\frac{L}{g}}\n$$</span>\n\n3. Cyber Input Variable Mapping Information:\n    (1) mass is mapped to the variable named mass with an initial value set to a 1-dimensional value 5\n    (2) When the value of mass changes, let the animation rerun to the starting point and start with the updated mass.",
      "output": "scene.width = 700\nscene.height = 400\n\ndef update_pendulum():\n    pendulum.theta = pendulum.theta0\n    pendulum.angular_velocity = 0\n\ndef update_mass(m):\n    global mass\n    mass = m\n    update_pendulum()\n\nmass = 5\n\npendulum_length = 1\npendulum_theta0 = 0.1\npendulum_theta = pendulum_theta0\npendulum_angular_velocity = 0\ng = 9.81\n\npendulum = sphere(pos=vector(0, -pendulum_length, 0), radius=0.1, color=color.blue)\nceiling = box(pos=vector(0, 0, 0), size=vector(0.2, 0.2, 0.2), color=color.red)\nstring = cylinder(pos=ceiling.pos, axis=pendulum.pos - ceiling.pos, radius=0.05, color=color.green)\n\nwhile True:\n    rate(100)\n    pendulum_angular_acceleration = -g/pendulum_length * pendulum_theta\n    pendulum_angular_velocity += pendulum_angular_acceleration * 0.01\n    pendulum_theta += pendulum_angular_velocity * 0.01\n    pendulum.pos = vector(pendulum_length*sin(pendulum_theta), -pendulum_length*cos(pendulum_theta), 0)",
      "mode": "initial",
      "timestamp": "2024-11-14 07:44:02",
      "serial_number": 1
    }
  ]
}