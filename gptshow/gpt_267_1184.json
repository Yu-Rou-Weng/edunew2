{
  "session_id": 1184,
  "log": [
    {
      "input": "# Free Fall and Collision of Two Balls## DescriptionWhen two highly elastic balls are stacked vertically with the heavier ball on the bottom, and both are released from a certain height, they accelerate downward due to gravity. After the bottom ball hits the ground and rebounds, a collision occurs between the two balls. This phenomenon, often referred to as the \"Stacked Ball Drop,\" can be observed in various experiments available on platforms like YouTube.The outcome of this event is influenced by the relative masses and initial positions of the two balls:- If the bottom ball is heavier, the upper ball rebounds significantly higher than its original release height.- If the bottom ball is lighter, it bounces repeatedly between the ground and the upper ball.This motion can be effectively simulated using a combination of previously implemented \"Free Fall\" and \"One-Dimensional Elastic Collision\" models.## Observations1. **Initial Setup:**\u00a0 \u00a0- Two balls with different radii and masses are stacked and released from rest.\u00a0 \u00a0- Both balls experience the same gravitational acceleration.2. **Key Dynamics:**\u00a0 \u00a0- The bottom ball rebounds upon hitting the ground.\u00a0 \u00a0- Elastic collision formulas determine the post-collision velocities of the balls.3. **Simulation Insights:**\u00a0 \u00a0- The upper ball may reach heights far exceeding its original release point.\u00a0 \u00a0- The behavior changes based on the mass ratio and radius of the two balls.## ConclusionThis experiment illustrates the dynamics of elastic collisions and energy transfer between objects in motion under gravity. It serves as an engaging example to combine fundamental physics principles with computational simulations.",
      "output": "from vpython import *\n\n# Constants\ng = 9.81  # acceleration due to gravity\n\n# Create scene\nscene = canvas(width=800, height=600)\n\n# Create bottom ball\nbottom_ball = sphere(pos=vector(0, 5, 0), radius=0.5, color=color.blue, make_trail=True)\nbottom_ball.mass = 2\nbottom_ball.velocity = vector(0, 0, 0)\n\n# Create top ball\ntop_ball = sphere(pos=vector(0, 7, 0), radius=0.3, color=color.red, make_trail=True)\ntop_ball.mass = 1\ntop_ball.velocity = vector(0, 0, 0)\n\ndt = 0.001  # time step\nt = 0  # initial time\n\nwhile top_ball.pos.y >= top_ball.radius:\n    rate(1000)\n    \n    # Update positions\n    bottom_ball.pos.y = bottom_ball.pos.y + bottom_ball.velocity.y * dt - 0.5 * g * dt**2\n    top_ball.pos.y = top_ball.pos.y + top_ball.velocity.y * dt - 0.5 * g * dt**2\n    \n    # Update velocities\n    bottom_ball.velocity.y = bottom_ball.velocity.y - g * dt\n    top_ball.velocity.y = top_ball.velocity.y - g * dt\n    \n    t += dt\n    \n    if bottom_ball.pos.y <= bottom_ball.radius:\n        bottom_ball.velocity.y = -bottom_ball.velocity.y\n    \n    if mag(bottom_ball.pos - top_ball.pos) <= bottom_ball.radius + top_ball.radius:\n        v1f = ((bottom_ball.mass - top_ball.mass) * bottom_ball.velocity + 2 * top_ball.mass * top_ball.velocity) / (bottom_ball.mass + top_ball.mass)\n        v2f = ((top_ball.mass - bottom_ball.mass) * top_ball.velocity + 2 * bottom_ball.mass * bottom_ball.velocity) / (bottom_ball.mass + top_ball.mass)\n        \n        bottom_ball.velocity = v1f\n        top_ball.velocity = v2f",
      "mode": "initial",
      "timestamp": "2024-12-26 18:57:16",
      "serial_number": 1
    }
  ]
}