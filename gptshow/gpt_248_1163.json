{
  "session_id": 1163,
  "log": [
    {
      "input": "A small ball is launched horizontally from a height ( h ) with an initial velocity ( v_0 ). The ball accelerates downward under the influence of gravity and bounces upon hitting the ground.\nOnly the effect of gravity is considered, and the collision between the ball and the ground is elastic.Draw the ball and floor.\nLet the ball move for 3 seconds and then stop.Do not resize the scene.\nThe center point of the canvas needs to be set correctly, so the writing order of Parameter Settings of the program needs to be after Screen Settings.",
      "output": "from vpython import *\n\nscene.center = vector(0, -h, 0)\n\nh = 5 # height of launch\nv0 = 10 # initial velocity\n\nball = sphere(pos=vector(0, h, 0), radius=0.5, color=color.red, make_trail=True)\nfloor = box(pos=vector(0, -1, 0), size=vector(20, 0.1, 10), color=color.green)\n\nt = 0\ndt = 0.01\ng = 9.81\n\nwhile t < 3:\n    rate(100)\n    ball.pos.x += v0 * dt\n    ball.pos.y -= 0.5 * g * t**2\n    t += dt\n\nv0 *= -0.8\nt = 0\n\nwhile t < 3:\n    rate(100)\n    ball.pos.x += v0 * dt\n    ball.pos.y -= 0.5 * g * t**2\n    t += dt",
      "mode": "initial",
      "timestamp": "2024-12-24 12:29:15",
      "serial_number": 1
    },
    {
      "input": "A small ball is launched horizontally from a height ( h ) with an initial velocity ( v_0 ). The ball accelerates downward under the influence of gravity and bounces upon hitting the ground.\nOnly the effect of gravity is considered, and the collision between the ball and the ground is elastic.Draw the ball and floor.\nLet the ball move for 3 seconds and then stop.Do not resize the scene.\nThe center point of the canvas needs to be set correctly, so the writing order of Parameter Settings of the program needs to be after Screen Settings.",
      "output": "from vpython import *\n\n# Screen Settings\nscene.width = 800\nscene.height = 400\nscene.center = vector(0, -0.5, 0)\n\n# Parameter Settings\nh = 3.0\nv0 = 5.0\ng = 9.81\nt = 0\ndt = 0.01\n\n# Ball Settings\nball = sphere(pos=vector(0, h, 0), radius=0.1, color=color.red, make_trail=True)\n\n# Floor Settings\nfloor = box(pos=vector(0, 0, 0), size=vector(10, 0.05, 5), color=color.green)\n\nwhile t < 3:\n    rate(100)\n    ball.pos.x += v0 * dt\n    ball.pos.y -= 0.5 * g * t**2\n    t += dt\n\n    if ball.pos.y <= ball.radius:\n        v0 *= -0.9\n\nball.velocity = vector(v0, 0, 0)",
      "mode": "initial",
      "timestamp": "2024-12-25 10:48:16",
      "serial_number": 1
    },
    {
      "input": "A small ball is launched horizontally from a height ( h ) with an initial velocity ( v_0 ). The ball accelerates downward under the influence of gravity and bounces upon hitting the ground.\nOnly the effect of gravity is considered, and the collision between the ball and the ground is elastic.Draw the ball and floor.\nLet the ball move for 3 seconds and then stop.Do not resize the scene.\nThe center point of the canvas needs to be set correctly, so the writing order of Parameter Settings of the program needs to be after Screen Settings.",
      "output": "from vpython import *\n\nscene.width = 800\nscene.height = 600\nscene.center = vector(0, -3, 0)\n\nh = 10\nv0 = 15\ng = 9.81\n\nball = sphere(pos=vector(0, h, 0), radius=1, color=color.red, make_trail=True)\nfloor = box(pos=vector(0, 0, 0), size=vector(30, 0.1, 10), color=color.green)\n\nt = 0\ndt = 0.01\n\nwhile t < 3:\n    rate(100)\n    \n    ball.pos.x += v0 * dt\n    ball.pos.y = h - 0.5 * g * t**2\n    \n    if ball.pos.y <= ball.radius:\n        v0 *= -1\n    \n    t += dt",
      "mode": "initial",
      "timestamp": "2024-12-25 11:27:38",
      "serial_number": 1
    },
    {
      "input": "1. Screen Settings:\nSet the canvas width to 700 and height to 400. Do not change the canvas size.\n\n2. Object Motion & Parameter Settings:\nCreate a VPython animation to illustrate the following physics experiment:\n\n# **Horizontal Projectile Motion**\n\nA small ball is launched horizontally from a height \\( h \\) with an initial velocity \\( v_0 \\). The ball accelerates downward under the influence of gravity and bounces upon hitting the ground.\nOnly the effect of gravity is considered, and the collision between the ball and the ground is elastic.\n\nDraw the ball and floor.\nLet the ball move for 3 seconds and then stop.\n\nDo not resize the scene. \nThe center point of the canvas needs to be set correctly, so the writing order of Parameter Settings of the program needs to be after Screen Settings.</br>3. Cyber Input Variable Mapping Information:</br>\n(1) initial_position is mapped to the variable named Angle_I with an initial value set to a 1-dimensional float [5]</br>\n(2) When the value of Angle_I changes, let the animation rerun to the starting point and start with the updated initial_position.</br>",
      "output": "from vpython import *\n\n# Screen Settings\nscene.width = 700\nscene.height = 400\n\n# Object Motion & Parameter Settings\nfloor = box(pos=vector(0, 0, 0), size=vector(10, 0.1, 5), color=color.green)\nball = sphere(pos=vector(0, 5, 0), radius=0.5, color=color.red, make_trail=True)\n\ninitial_position = 5\n\ndef launch_ball(angle):\n    ball.pos = vector(0, angle, 0)\n    ball.velocity = vector(5, 0, 0)\n\ndef update_angle_I(angle):\n    launch_ball(angle)\n\nupdate_angle_I(initial_position)",
      "mode": "initial",
      "timestamp": "2024-12-26 09:44:32",
      "serial_number": 1
    },
    {
      "input": "# Simple Harmonic Motion Caused by GravityA small mass **m** is initially at rest and positioned at the midpoint of the perpendicular bisector of the line connecting two fixed massive spheres of equal mass **M**.\u00a0The motion begins from one endpoint of this perpendicular bisector. The mass **m** experiences gravitational forces from the two spheres, which result in a restoring force proportional to its displacement when the displacement is small. This leads to oscillatory motion.The theoretical period of this oscillation is calculated using the following parameters:- Gravitational constant **G**- Masses **m** and **M**- Relevant distances",
      "output": "from vpython import *\n\n# Constants\nG = 6.67430e-11  # gravitational constant\nm = 1  # mass of small mass\nM = 10  # mass of massive spheres\nr = 5  # distance from small mass to massive spheres\n\n# Initial conditions\ninitial_displacement = 0.1\ninitial_velocity = 0\n\n# Calculated parameters\nomega = sqrt(2*G*(2*M)*m/(r**3))  # angular frequency\nT = 2*pi/omega  # period\n\n# Objects\nmass = sphere(pos=vector(-r/2, 0, 0), radius=0.5, color=color.red)\nsphere1 = sphere(pos=vector(-r, 0, 0), radius=1, color=color.blue)\nsphere2 = sphere(pos=vector(r, 0, 0), radius=1, color=color.blue)\n\n# Initial conditions\nmass.velocity = vector(initial_velocity, 0, 0)\nmass.pos = vector(-r/2 + initial_displacement, 0, 0)\n\n# Animation\nt = 0\ndt = 0.01\nwhile True:\n    rate(100)\n    \n    r1 = mass.pos - sphere1.pos\n    r2 = mass.pos - sphere2.pos\n    F1 = -G*m*M/(r1.mag**2) * norm(r1)\n    F2 = -G*m*M/(r2.mag**2) * norm(r2)\n    F = F1 + F2\n    mass.velocity += F/m * dt\n    mass.pos += mass.velocity * dt\n    \n    t += dt",
      "mode": "initial",
      "timestamp": "2024-12-26 16:42:13",
      "serial_number": 1
    },
    {
      "input": "1. Screen Settings: Set the canvas width to 700 and height to 400. Do not change the canvas size. 2. Object Motion & Parameter Settings: Create a VPython animation to illustrate the following physics experiment: ## Small Ball Pendulum A small ball is suspended from the ceiling using an ideal string. If the angle between the string and the vertical line (the pendulum angle) is \ud835\udf03\u2080, and the ball is released from rest, then when the pendulum angle is \ud835\udf03, the ball is subjected to gravitational force and the tension in the string. The torque relative to the suspension point is given by: $$ \\vec{\\tau} = \\vec{r} \\times \\vec{F} \\quad \\Rightarrow \\quad \\tau = r F \\sin \\theta $$ If the moment of inertia (\ud835\udc3c) is defined as: $$ I = m r^2 $$ Since the torque (\ud835\udf0f) is in the opposite direction of the angular acceleration (\ud835\udefc), the relationship between them is: $$ \\tau = -I \\alpha \\quad \\Rightarrow \\quad r F \\sin \\theta = -m r^2 \\frac{d^2 \\theta}{dt^2} \\quad \\Rightarrow \\quad \\frac{F}{m r} \\sin \\theta = - \\frac{d^2 \\theta}{dt^2} $$ If $r = L$ and $F = mg$, and when $\\theta < 5^\\circ$, we can approximate $\\sin \\theta \\approx \\theta$. The above equation can be rewritten as: $$ \\frac{g}{L} \\theta = - \\frac{d^2 \\theta}{dt^2} $$ The solution is: $$ \\theta(t) = \\theta_0 \\cos \\left( \\sqrt{\\frac{g}{L}} t \\right) = \\theta_0 \\cos(\\omega t) $$ In the above equation, $\\omega$ is the angular frequency of the pendulum\u2019s oscillation, and the period is: $$ T = \\frac{2\\pi}{\\omega} = 2\\pi \\sqrt{\\frac{L}{g}} $$",
      "output": "scene.width = 700\nscene.height = 400\n\nball = sphere(pos=vector(0, -5, 0), radius=0.5, color=color.red)\nceiling = box(pos=vector(0, 0, 0), size=vector(10, 0.2, 10), color=color.white)\nstring = cylinder(pos=vector(0, 0, 0), axis=ball.pos, radius=0.1, color=color.white)\n\ng = 9.81\nL = 5\ntheta0 = radians(10)\nomega = sqrt(g / L)\n\nt = 0\ndt = 0.01\n\nwhile True:\n    rate(100)\n    theta = theta0 * cos(omega * t)\n    ball.pos = vector(L * sin(theta), -L * cos(theta), 0)\n    string.axis = ball.pos\n    t += dt",
      "mode": "initial",
      "timestamp": "2024-12-27 14:18:56",
      "serial_number": 1
    },
    {
      "input": "1. Screen Settings: Set the canvas width to 700 and height to 400. Do not change the canvas size. 2. Object Motion & Parameter Settings: Create a VPython animation to illustrate the following physics experiment: # **Horizontal Projectile Motion** A small ball is launched horizontally from a height \\( h \\) with an initial velocity \\( v_0 \\). The ball accelerates downward under the influence of gravity and bounces upon hitting the ground. Considering both gravity and air resistance \\( f = -bv \\). Draw the ball and floor. Let the ball move for 3 seconds and then stop. Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time. Do not resize the scene. The center point of the canvas needs to be set correctly, so the writing order of Parameter Settings of the program needs to be after Screen Settings.",
      "output": "scene.width = 700\nscene.height = 400\n\nh = 5\nv0 = 10\ng = 9.81\nb = 0.1\n\nball = sphere(pos=vector(0, h, 0), radius=0.5, color=color.blue, make_trail=True)\nfloor = box(pos=vector(0, 0, 0), size=vector(15, 0.1, 5), color=color.green)\n\nt = 0\ndt = 0.01\n\nwhile t < 3:\n    rate(100)\n    ball.pos.x += v0 * dt\n    ball.pos.y -= 0.5 * g * (dt**2)\n    ball.pos.y = max(ball.pos.y, ball.radius)\n    v = sqrt(v0**2 + 2 * g * h)\n    v0 = v - b * v0 * dt\n    t += dt",
      "mode": "initial",
      "timestamp": "2024-12-27 14:56:54",
      "serial_number": 1
    }
  ]
}