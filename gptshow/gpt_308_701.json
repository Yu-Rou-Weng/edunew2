{
  "session_id": 701,
  "log": [
    {
      "input": "Mass Spectrometer: Automatically Running 5 Types of Particles with a For Loop\n\nFive types of particles enter a uniform magnetic field B at the same velocity and perpendicular to the field. Their trajectories are shown in the diagram below. These five particles are: carbon atom ($^{12}$C), oxygen ion ($^{16}$O$^{2-}$), sodium ion ($^{23}$Na$^+$), magnesium ion ($^{24}$Mg$^{2+}$), and chlorine ion ($^{35}$Cl$^-$). Ignoring gravity, the trajectories marked 1, 2, 3, 4, and 5 in the diagram correspond to which particles?\n\nThis problem is from the 1995 Joint University Entrance Examination in Japan. Although it is quite dated, it can still be found in various reference books. When particles enter the magnetic field from below, positively charged particles experience a magnetic force to the left, negatively charged particles to the right, and neutral particles experience no magnetic force. If the magnetic force acts as a centripetal force, causing the particles to move in a circular path at constant speed, then\n$$\nqvB = m \\cdot \\frac{v^2}{R} \\Rightarrow R = \\frac{mv}{qB} \\propto \\frac{m}{q}\n$$\n\nThus, the answer to this problem is $^{23}$Na$^+$, $^{24}$Mg$^{2+}$, $^{12}$C, $^{16}$O$^{2-}$, $^{35}$Cl$^-$. We will try to use VPython to illustrate the motion of particles in a mass spectrometer.\n\nProgramming Section\nThe program for the mass spectrometer, using a for loop to automatically process the 5 types of particles, is similar to the basic mass spectrometer program, with modifications detailed below.\n\nAdded particle label data, labels, as VPython supports HTML syntax, enabling subscript and superscript effects. Text within tags is superscripted, while text within tags is subscripted.\n\nA for loop is used to read the names of the particles, and the particle generation and motion parts of the while loop are placed inside the for loop. Once the while loop completes, a label for the particle is added.\n\nSimulation Results\nThe following are the results from running Program 23-2, showing that the radius of particle revolution is directly proportional to m/q.\n\nScreenshot of Program 23-2:\n![image](https://hackmd.io/_uploads/HkDwi3aO0.png)\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import sphere, color, label, vector, rate, mag, cross\n\nq = [1, 2, 0, -2, -1]  # charge\nm = [23, 24, 12, 16, 35]  # mass\nlabels = ['<sup>23</sup>Na<sup>+</sup>', '<sup>24</sup>Mg<sup>2+</sup>', '<sup>12</sup>C', '<sup>16</sup>O<sup>2-</sup>', '<sup>35</sup>Cl<sup>-</sup>']\nB = vector(0, 0, 1)  # magnetic field\nv = vector(0, 1, 0)  # initial velocity\nRadius_I = 1  # radius of the ball\n\nfor i in range(5):\n    ball = sphere(pos=vector(Radius_I * m[i] / q[i], 0, 0), radius=0.2, color=color.red, v=v, m=m[i], q=q[i])\n    ball_label = label(pos=ball.pos, text=labels[i], xoffset=20, yoffset=12, space=ball.radius, height=10, border=4, font='sans')\n    t = 0\n    dt = 0.001\n    while t < 10:\n        rate(1000)\n        force = q[i] * cross(v, B)\n        ball.v = ball.v + force / ball.m * dt\n        ball.pos = ball.pos + ball.v * dt\n        ball_label.pos = ball.pos\n        t = t + dt",
      "mode": "initial",
      "timestamp": "2024-07-24 11:40:01",
      "serial_number": 1
    }
  ]
}