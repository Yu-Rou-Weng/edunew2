{
  "session_id": 993,
  "log": [
    {
      "input": "1. Screen Settings:</br>Set the canvas width to 700 and height to 400. Do not change the canvas size.</br>2. Object Motion & Parameter Settings:</br>Create a VPython animation to illustrate the following physics experiment:<br><span style=\"color:red;\">This scenario describes the motion of a projectile undergoing **horizontal projectile motion**. The ball is launched horizontally from a height h with an initial velocity v0, and it is only affected by gravity, accelerating downward. Upon hitting the ground, the ball rebounds elastically.</span>\n\n3. Cyber Input Variable Mapping Information:\n    (1) h is mapped to the variable named Angle_I with an initial value set to a 1-dimensional value 5\n    (2) When the value of Angle_I changes, let the animation rerun to the starting point and start with the updated h.\n    ",
      "output": "from vpython import *\n\n# Screen Settings\nscene = canvas(width=700, height=400)\n\n# Constants\ng = 9.81  # acceleration due to gravity\n\n# Initial Parameters\nh = 5  # initial height\nv0 = sqrt(2 * g * h)  # initial velocity\n\n# Objects\nground = box(pos=vector(0, 0, 0), size=vector(20, 0.1, 10), color=color.green)\nball = sphere(pos=vector(0, h, 0), radius=0.5, color=color.red, make_trail=True)\n\n# Motion Function\ndef projectile_motion():\n    t = 0\n    dt = 0.01\n    ball.pos = vector(0, h, 0)  # reset ball position\n    ball.velocity = vector(v0, 0, 0)\n    \n    while ball.pos.y >= ball.radius:\n        rate(100)\n        ball.pos = ball.pos + ball.velocity * dt\n        ball.velocity.y -= g * dt\n        \n        if ball.pos.y < ball.radius:\n            ball.velocity.y *= -1  # reverse velocity for elastic collision\n\n# Initial Animation\nprojectile_motion()\n\n# Variable Mapping Function\ndef on_change_Angle_I(value):\n    global h, v0\n    h = value\n    v0 = sqrt(2 * g * h)\n    projectile_motion()\n\n# Cyber Input Variable Mapping\nAngle_I = slider(min=1, max=10, value=h, bind=on_change_Angle_I, step=0.5, width=scene.width)",
      "mode": "initial",
      "timestamp": "2024-09-12 07:56:04",
      "serial_number": 1
    }
  ]
}