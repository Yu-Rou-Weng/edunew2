{
  "session_id": 565,
  "log": [
    {
      "input": "Uniform Linear Motion\n\nWe are finally starting to create physics simulation animations, and we'll begin with the simplest one: uniform linear motion. The goal is to draw a block, the floor, and another block.\n\n```python\nfrom vpython import *\n```\nThis line of code is the syntax for importing libraries in Python. By default, the library for physics simulation, vpython, is not included, so we need to add this line of code, which means importing all functions from the vpython library. Alternatively, you can write:\n\n```python\nimport vpython as custom_name\n```\nAssuming the custom name is `vp`, you would need to use `vp.[function_name]` to refer to functions in vpython. If you only write `import vpython`, you must refer to functions with `vpython.[function_name]`. Since we are focusing on animations, the first method is recommended, making it easier to use functions by just naming them.\n\nThe program can be divided into three parts:\n\n1. Parameter Settings\n2. Scene Settings\n3. Object Motion\n\n**Parameter Settings**\nIn the parameter settings section, I prefer to assign some frequently used values in the program to corresponding variables and name these variables with easily understandable names. Although Python 3.X supports Unicode and can use Chinese characters as variable names, it is still recommended to use English letters, numbers, and underscores for variable names. These letters are case-sensitive, variable names cannot start with a number, and system reserved words must not be used. Theoretically, variables can be named according to personal preference, but it is best to use meaningful names. For example, the block size is named `size`.\n\nThe variables I define here are `size`, `L`, `v`, `t`, `dt`, and their uses are written in the comments of each line. The value of the time interval `dt` needs to be adjusted according to actual needs. This is because VPython calculates physical quantities like forces, acceleration, speed, displacement, etc., using numerical methods. If the time length is too long, the numerical results may have significant errors; but if the time length is too short, the overall simulation animation will take longer to execute. The current setting of `0.01` is precise enough for this simulation animation.\n\n**Scene Settings**\nThe functions we will use include `canvas`, `box`, `graph`, `gcurve`, and I'll explain the syntax of these functions below.\n\n**canvas**\n`canvas` translates to canvas or painting canvas in English and is used in VPython to generate the display for animations, currently shown through browsers like Google Chrome, Firefox, or Windows Edge. In VPython 6 and earlier versions, the function name was `display`, and it would open a new window. In this program, I have named the animation window `scene`. Commonly adjusted options include:\n\n- `title`: The title of the scene, displayed at the top left of the screen.\n- `width`: Width of the screen (horizontal direction).\n- `height`: Height of the screen (vertical direction).\n- `x`, `y`: The top-left corner of the screen display in the browser window, though it seems VPython automatically adjusts this based on the existing object's width and height.\n- `center`: Represents the observer's position.\n- `background`: Background color, with the numbers in the vector brackets representing the proportions of the primary colors red, green, and blue, ranging from 0 to 1. Alternatively, you can use named common colors.\n\n**box**\n`box` translates to box in English and is used in VPython to create a cuboid. In this program, both the cube and the floor are created using `box`. Commonly adjusted options include:\n\n- `pos`: Position of the center of the cuboid, given as a vector, `vector(x, y, z)`, which can also be simplified to `vec`.\n- `length`, `height`, `width`: Correspond to the lengths in the x, y, z directions, which can also be simplified as `size=vec(x, y, z)`.\n- `color`: Color of the cuboid.\n\n**Object Motion**\nUsing a `while` loop, the object's state is updated every short interval `dt`. Since I want the program to stop when the block reaches the edge of the floor, the condition set in the while is:\n\n```python\ncube.pos.x <= 0.5*L - 0.5*size\n```\nThe following lines explain the purpose of the code.\n\n`rate(1000)` specifies that the animation updates 1000 times per second.\n`cube.pos.x += v*dt` updates the position of the block. `cube.pos.x` reads the x-coordinate of the cube's position, adds the speed `v` multiplied by a short period `dt`, and reassigns it to the x-coordinate of the cube's position.\n\n`t += dt` updates the time by adding `dt` to `t`, equivalent to `t = t + dt`.\n\n**Conclusion**\nAlthough the effect of this animation is very simple, and one could imagine the object's motion without the animation, it is still an excellent first animation because any deviations from physical principles are easily noticeable. Later, more physical quantities like acceleration, force, angle, etc., will be added to the animation.\n\n**VPython Official Documentation**\n- canvas: http://www.glowscript.org/docs/VPythonDocs/canvas.html\n- color: http://www.glowscript.org/docs/VPythonDocs/color.html\n- box: http://www.glowscript.org/docs/VPythonDocs/box.html\n\n**Cyber Input Variable Mapping Information:**\n\n1. Define and initialize a variable named `Speed_I` as a cyber input variable, set `Length_I=10`\n2. `Speed_I` is the radius of the ball. When `Speed_I` changes to a new value, the radius of the ball also changes to that value.\n(1) Do not import packages that are not supported by VPython such as numpy, math and time.",
      "output": "from vpython import *\n\n# Parameter settings\nsize = 1               # size of the cube\nLength_I = 10          # length of the floor\nSpeed_I = 1            # speed of the cube\nt = 0                  # initial time\ndt = 0.01              # time interval\n\n# Scene settings\nscene = canvas(title=\"Uniform Linear Motion\", width=800, height=300, \n               center=vec(0, 0, 0), background=vec(0.5, 0.5, 0))\n\n# Objects\nfloor = box(pos=vec(0, -0.5*size, 0), length=Length_I, height=0.01, width=3, color=color.blue)\ncube = box(pos=vec(0, 0, 0), size=vec(size, size, size), color=color.red)\n\n# Object motion\nwhile cube.pos.x <= 0.5*Length_I - 0.5*size:\n    rate(1000)\n    cube.pos.x += Speed_I*dt\n    t += dt",
      "mode": "initial",
      "timestamp": "2024-07-23 20:50:13",
      "serial_number": 1
    }
  ]
}