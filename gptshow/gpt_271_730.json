{
  "session_id": 730,
  "log": [
    {
      "input": "### Horizontal Projectile Motion, Considering Gravity and Air Resistance f = -bv\n\nA small ball is thrown horizontally from a height \\( h \\) with an initial speed \\( v_0 \\). The ball accelerates downwards due to gravity, and air resistance is also considered with a force \\( f = -bv \\).\n\n2. Horizontal Projectile Motion with Coefficient of Restitution \\( e \\):\nA small ball is thrown horizontally from a height \\( h \\) with an initial speed \\( v_0 \\). The ball accelerates downwards due to gravity. When the ball hits the ground, it bounces back, considering only the effect of gravity. The coefficient of restitution upon the ball hitting the ground is \\( e \\).\n\nThe program for the horizontal projectile motion with coefficient of restitution \\( e \\) is almost identical to the previous one, with the addition of the coefficient of restitution \\( e \\), and the following change when the ball hits the ground:\n\n```python\nif ball.pos.y - floor.pos.y <= size + 0.5*floor.height and ball.v.y < 0:\n    i += 1\n    print(i, t, ball.pos.x + L/2)\n    ball.v.y = -ball.v.y * e\n```\n\n3. Program for \"Horizontal Projectile Motion, Considering Gravity and Air Resistance f = -bv\"\nThe program for \"Horizontal Projectile Motion, Considering Gravity and Air Resistance f = -bv\" is almost identical to that of \"Horizontal Projectile Motion with Coefficient of Restitution \\( e \\)\", except for:\n\nThe addition of the air resistance coefficient \\( b \\).\n\nDuring the while loop, add:\n\n```python\n    f = -b * ball.v\n    ball.a = vec(0, -g, 0) + f/m\n```\nThis calculates the air resistance and the ball's acceleration at that moment.\n\nTo prevent the ball from not reaching the right edge of the floor due to excessive resistance, the condition in the while loop is supplemented with \\( i < 20 \\), stopping the animation when the ball hits the ground 20 times.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Speed_I as a cyber input variable, and set Speed_I=5\n(2) Speed_I is the horizontal initial velocity of the ball. When Speed_I changes to a new value, the horizontal initial velocity of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Constants\nm = 0.2\ng = 9.8\nb = 0.1\nh = 15.0\nL = 30.0\nsize = 0.5\ntheta = 30.0\ne = 0.9\nSpeed_I = 5\n\n# Scene\nscene = canvas(width = 600, height = 600, center = vec(L/2, h/2, 0), background = vec(0.5, 0.5, 0), range = 18)\n\n# Objects\nfloor = box(length = L, height = 0.01, width = 10, pos = vec(L/2, -0.005/2, 0), color = color.green)\nball = sphere(radius = size, color = color.red)\n\n# Initial Conditions\nball.pos = vec(0, h, 0)\nball.v = vec(Speed_I * cos(theta * pi / 180.0), Speed_I * sin(theta * pi / 180.0), 0)\nball.a = vec(0, -g, 0)\n\n# Motion\ni = 0\ndt = 0.001\nwhile i < 20:\n    rate(1000)\n    f = -b * ball.v\n    ball.a = vec(0, -g, 0) + f/m\n    ball.v += ball.a * dt\n    ball.pos += ball.v * dt\n    if ball.pos.y - floor.pos.y <= size + 0.5*floor.height and ball.v.y < 0:\n        i += 1\n        ball.v.y = -ball.v.y * e",
      "mode": "initial",
      "timestamp": "2024-07-24 14:50:31",
      "serial_number": 1
    }
  ]
}