{
  "session_id": 603,
  "log": [
    {
      "input": "Simple Harmonic Motion Caused by Gravity, Circular Ring, Initial Velocity Zero, Starting from Endpoint\n\nThis is a highly abstract yet essential topic in the second year of high school curriculum:\n\nIn outer space, there are two planets each with mass $M$. These planets are uniformly distributed in mass and fixed in position, with a distance of $2d$ between them. On the perpendicular bisector at a distance $x$ from the midpoint, there is a point mass $m$. If the point mass is initially at rest and only the gravitational force is considered, what is the period of motion of $m$ when $x \\ll d$?\n\n## Analysis:\n\nFirst, draw a force diagram for $m$. The resultant force on $m$ is\n$$\nF_x = -2 \\frac{GMmx}{(d^2 + x^2)^{3/2}} \\approx -2 \\frac{GMm}{d^3} x = -kx\n$$\n\n$$\nT = 2\\pi \\sqrt{\\frac{m}{k}} = 2\\pi \\sqrt{\\frac{d^3}{2GM}}\n$$\n\n### Force Diagram for m\n\n### Relationship Graph between the Resultant Force on m and Distance x (0 \u2264 x \u2264 100)\n\n### Relationship Graph between the Resultant Force on m and Distance x (0 \u2264 x \u2264 8)\n\nThere is also an advanced version of the problem, replacing the two mass $M$ planets with a uniformly distributed ring of total mass $M$ and radius $r$. If the other conditions remain the same, then the resultant force on $m$ and the period of motion are:\n\n$$\nF_x = - \\frac{GMmx}{(r^2 + x^2)^{3/2}} \\approx - \\frac{GMm}{r^3} x = -kx\n$$\n\n$$\nT = 2\\pi \\sqrt{\\frac{m}{k}} = 2\\pi \\sqrt{\\frac{r^3}{GM}}\n$$\n\n### Diagram of m and M Circular Ring\n\nThe goal this time is to illustrate these two problems.\n\n## Parameter Settings\n\nVariables such as size, m, M, d, h, G, v0, i, t, dt are defined and initialized with comments describing their usage.\n\n## Screen Settings\n\nSince VPython's default viewpoint is from the direction of the +z axis looking towards the origin, with the right side of the screen as the +x axis direction and the top as the +y axis direction, in the original problem m moves along the x-axis, but in the animation, it moves along the y-axis.\n\nGenerate planets s1, s2, and a small ball, and set the initial position of the small ball at (0, h, 0) with an initial velocity of 0. If you want to try starting the ball from different distances later, just modify the parameter h.\n\nDraw a line between the planets, indicating the equilibrium position; the starting height is the top endpoint, so the bottom endpoint should be at y = -h.\n\nGenerate arrows representing velocity and acceleration, and to prevent overlapping, place them at distances of 1 and 2 on the right side of the small ball.\n\nOpen the drawing window to plot the position, velocity, acceleration, and time relationship graph of the small ball.\n\n## Object Motion\n\nTo ensure the animation runs for 5 cycles, set the condition in the while loop to i < 5, and use `if(ball.pos.y > h)` to check if the small ball has returned to the starting point. If so, print the elapsed time t and the number of times it has returned to the start.\n\nCalculate the force F acting on the small ball using the law of universal gravitation, then calculate the acceleration from F = ma, and update the velocity and position.\n\n### Program to be Written: Simple Harmonic Motion Caused by Gravity, Circular Ring, Initial Velocity Zero, Starting from Endpoint\n\nProgram Design Section\n\nThis program is based on the program: Simple Harmonic Motion Caused by Gravity, Initial Velocity Zero, Starting from Endpoint, with the following differences:\n\nIn the screen settings section, change s1, s2 to a circular ring, and divide the ring into N small balls, each with a mass of M/N. Use a for loop to evenly place N small balls on the ring, saving the data in a list named stars.\n\nIn the object motion section, use a for loop to take one ball at a time from stars and name it star, calculate the gravitational force f between star and the small ball m, and add f to the total force F on ball.\n(1) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Parameters\nsize = 0.2\nm = 1\nM = 10000\nd = 1\nr = d\nN = 50\nG = 1\nv0 = 0\ni = 0\nt = 0\ndt = 0.001\n\n# Screen settings\nscene = canvas(title=\"Simple Harmonic Motion Caused by Gravity\",\n               width=800, height=800, x=0, y=0, center=vec(0, -0.3, 0),\n               background=vec(0, 0, 0))\n\nstars = [sphere(pos=vec(r*cos(2*pi*i/N), r*sin(2*pi*i/N), 0), radius=size,\n                color=color.yellow, m=M/N) for i in range(N)]\n\nball = sphere(pos=vec(0, r, 0), radius=size, color=color.red, v=vec(0, 0, 0), m=m)\nline = curve(vec(-r, 0, 0), vec(r, 0, 0), color=color.white)\nvel_arrow = arrow(pos=ball.pos+vec(1, 0, 0), axis=ball.v,\n                  shaftwidth=0.1, color=color.green)\nacc_arrow = arrow(pos=ball.pos+vec(2, 0, 0), axis=vec(0, 0, 0),\n                  shaftwidth=0.1, color=color.cyan)\n\n# Graphs\ngd = graph(x=0, y=800, width=600, height=150, title=\"x-t plot\", xtitle=\"t\", ytitle=\"x\",\n           foreground=color.black, background=color.white)\nxt = gcurve(graph=gd, color=color.blue)\ngd2 = graph(x=0, y=650, width=600, height=150, title=\"v-t plot\", xtitle=\"t\", ytitle=\"v\",\n            foreground=color.black, background=color.white)\nvt = gcurve(graph=gd2, color=color.red)\ngd3 = graph(x=0, y=500, width=600, height=150, title=\"a-t plot\", xtitle=\"t\", ytitle=\"a\",\n            foreground=color.black, background=color.white)\nat = gcurve(graph=gd3, color=color.green)\n\n# Object motion\nwhile i < 5:\n    rate(1000)\n    F = vec(0, 0, 0)\n    for star in stars:\n        r = ball.pos - star.pos\n        F += -G*star.m*ball.m*r.hat/mag(r)**2\n    ball.a = F/ball.m\n    ball.v += ball.a*dt\n    ball.pos += ball.v*dt\n\n    if ball.pos.y > r:\n        i += 1\n        print(\"T = \", t)\n\n    vel_arrow.pos = ball.pos + vec(1, 0, 0)\n    vel_arrow.axis = ball.v\n    acc_arrow.pos = ball.pos + vec(2, 0, 0)\n    acc_arrow.axis = ball.a\n\n    xt.plot(pos=(t, ball.pos.y))\n    vt.plot(pos=(t, ball.v.y))\n    at.plot(pos=(t, ball.a.y))\n    t += dt",
      "mode": "initial",
      "timestamp": "2024-07-24 03:28:47",
      "serial_number": 1
    }
  ]
}