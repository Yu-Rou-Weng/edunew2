{
  "session_id": 839,
  "log": [
    {
      "input": "# Gravity and Simple Harmonic Motion\n\nThis is a highly abstract question that is sure to appear in the second half of the Grade 12 curriculum:\n\nIn outer space, there are two planets each with a mass of \\(M\\), uniformly distributed in mass and fixed in position. The distance between the two planets is \\(2d\\). At a distance \\(x\\) along the perpendicular bisector, there is a point mass \\(m\\). Assuming the point mass was initially at rest and only considering the effects of gravity, when \\(x \\ll d\\), what is the period of motion for \\(m\\)?\n\n## Analysis:\n\nFirst, draw a force diagram for \\(m\\), then the resultant force on \\(m\\) is\n$$\nF_x = -2 \\frac{GMmx}{(d^2 + x^2)^{3/2}} \\approx -2 \\frac{GMm}{d^3} x = -kx\n$$\n\n$$\nT = 2\\pi \\sqrt{\\frac{m}{k}} = 2\\pi \\sqrt{\\frac{d^3}{2GM}}\n$$\n\n### Force Diagram for \\(m\\)\n\n### Relationship Graph between Resultant Force on \\(m\\) and Distance \\(x\\) (0 \u2264 x \u2264 100)\n\n### Relationship Graph between Resultant Force on \\(m\\) and Distance \\(x\\) (0 \u2264 x \u2264 8)\n\nThere is usually an advanced version where the two planets each with a mass \\(m\\) are replaced by a uniformly distributed mass ring with total mass \\(m\\) and radius \\(r\\). If the other conditions are the same, then the resultant force on \\(m\\) and the period of motion are:\n\n$$\nF_x = - \\frac{GMmx}{(r^2 + x^2)^{3/2}} \\approx - \\frac{GMm}{r^3} x = -kx\n$$\n\n$$\nT = 2\\pi \\sqrt{\\frac{m}{k}} = 2\\pi \\sqrt{\\frac{r^3}{GM}}\n$$\n\n### Diagram of \\(m\\) and \\(M\\) Ring\n\nThe goal for this time is to illustrate these two problems.\n\n## Parameter Settings\n\nVariables such as size, \\(m\\), \\(M\\), \\(d\\), \\(h\\), \\(G\\), \\(v0\\), \\(i\\), \\(t\\), \\(dt\\) are defined here, with their uses commented in the respective lines.\n\n## Display Settings\n\nSince VPython defaults to viewing from the +z-axis towards the origin, with the right of the screen as the +x-axis, and the top as the +y-axis, the original problem involves \\(m\\) moving along the x-axis, in the animation it is changed to move along the y-axis.\n\nCreate planets \\(s1\\), \\(s2\\) and a small ball, setting the initial position of the ball at (0, h, 0) and initial velocity at 0. If you later want to try launching the ball from different distances, just modify the parameter \\(h\\).\n\nDraw a line between the planets, representing the equilibrium position; the height at the start is the top point, so the bottom point should be at \\(y = -h\\).\n\nGenerate arrows representing velocity and acceleration, positioned at distances 1 and 2 to the right of the ball, to prevent the arrows from overlapping.\n\nOpen the graphics window, plot the ball's position, velocity, acceleration, and their relationship with time.\n\n## Object Motion\n\nTo make the animation loop back and forth 5 times, set the condition in the while loop to \\(i < 5\\), and use `if(ball.pos.y > h)` to determine if the ball has returned to the starting point. If it has, print the elapsed time \\(t\\) and the number of returns \\(i\\).\n\nUsing the law of universal gravitation, calculate the force \\(F\\) acting on the ball, then from \\(F = ma\\) calculate the ball's acceleration, and update the velocity and position.\n\nPlease write the VPython code for \"Simple Harmonic Motion Caused by Gravity, Starting from Endpoint with Initial Velocity 0\", with two blue spheres of radius 1 at positions (-10, 0, 0) and (10, 0, 0) with a mass of 2E13, fixed in position. At (0, 3, 0) there is a small ball of radius 0.3 with a mass of 1, starting with an initial velocity of (0,0,0), beginning to move under the gravity of the two blue spheres. A yellow line connects the centers of the two blue spheres. At (0, 3, 0) and (0, -3, 0) there are two white horizontal lines each of length 5.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Constants\nG = 6.7E-11\nm = 1\nM = 2E13\nd = 10\nh = 3\nv0 = vector(0, 0, 0)\ni = 0\nt = 0\ndt = 0.001\n\n# Objects\ns1 = sphere(pos=vector(-d, 0, 0), radius=1, color=color.blue)\ns2 = sphere(pos=vector(d, 0, 0), radius=1, color=color.blue)\nball = sphere(pos=vector(0, h, 0), radius=0.3, color=color.red)\nline = cylinder(pos=vector(-d, 0, 0), axis=vector(2*d, 0, 0), radius=0.05)\nline2 = cylinder(pos=vector(0, h, 0), axis=vector(5, 0, 0), radius=0.05, color=color.white)\nline3 = cylinder(pos=vector(0, -h, 0), axis=vector(5, 0, 0), radius=0.05, color=color.white)\n\n# Create arrows\nvArrow = arrow(pos=vector(1, ball.pos.y, 0), axis=v0, color=color.green)\naArrow = arrow(pos=vector(2, ball.pos.y, 0), axis=v0, color=color.yellow)\n\n# Create graphs\ngd = graph(title=\"y-t plot\", xtitle=\"t\", ytitle=\"y\", fast=False)\nyt = gcurve(graph=gd, color=color.red)\ngd2 = graph(title=\"v-t plot\", xtitle=\"t\", ytitle=\"v\", fast=False)\nvt = gcurve(graph=gd2, color=color.green)\ngd3 = graph(title=\"a-t plot\", xtitle=\"t\", ytitle=\"a\", fast=False)\nat = gcurve(graph=gd3, color=color.yellow)\n\n# Time evolution\nwhile i < 5:\n    rate(1000)\n    r1 = ball.pos - s1.pos\n    r2 = ball.pos - s2.pos\n    F1 = -G*M*m*norm(r1)/mag(r1)**2\n    F2 = -G*M*m*norm(r2)/mag(r2)**2\n    F = F1 + F2\n    a = F/m\n    ball.velocity = ball.velocity + a*dt\n    ball.pos = ball.pos + ball.velocity*dt\n    vArrow.pos = vector(1, ball.pos.y, 0)\n    vArrow.axis = ball.velocity\n    aArrow.pos = vector(2, ball.pos.y, 0)\n    aArrow.axis = a\n    yt.plot(pos=(t, ball.pos.y))\n    vt.plot(pos=(t, mag(ball.velocity)))\n    at.plot(pos=(t, mag(a)))\n    t = t + dt\n    if ball.pos.y > h:\n        i = i + 1\n        print(\"T = \", t, \"s, i = \", i)",
      "mode": "initial",
      "timestamp": "2024-07-26 11:09:47",
      "serial_number": 1
    },
    {
      "input": "Please update the program by fixing the following error:\nCannot read properties of undefined (reading '+')\n\nHere's the current program:\nfrom vpython import *\n\n# Constants\nG = 6.7E-11\nm = 1\nM = 2E13\nd = 10\nh = 3\nv0 = vector(0, 0, 0)\ni = 0\nt = 0\ndt = 0.001\n\n# Objects\ns1 = sphere(pos=vector(-d, 0, 0), radius=1, color=color.blue)\ns2 = sphere(pos=vector(d, 0, 0), radius=1, color=color.blue)\nball = sphere(pos=vector(0, h, 0), radius=0.3, color=color.red)\nline = cylinder(pos=vector(-d, 0, 0), axis=vector(2*d, 0, 0), radius=0.05)\nline2 = cylinder(pos=vector(0, h, 0), axis=vector(5, 0, 0), radius=0.05, color=color.white)\nline3 = cylinder(pos=vector(0, -h, 0), axis=vector(5, 0, 0), radius=0.05, color=color.white)\n\n# Create arrows\nvArrow = arrow(pos=vector(1, ball.pos.y, 0), axis=v0, color=color.green)\naArrow = arrow(pos=vector(2, ball.pos.y, 0), axis=v0, color=color.yellow)\n\n# Create graphs\ngd = graph(title=\"y-t plot\", xtitle=\"t\", ytitle=\"y\", fast=False)\nyt = gcurve(graph=gd, color=color.red)\ngd2 = graph(title=\"v-t plot\", xtitle=\"t\", ytitle=\"v\", fast=False)\nvt = gcurve(graph=gd2, color=color.green)\ngd3 = graph(title=\"a-t plot\", xtitle=\"t\", ytitle=\"a\", fast=False)\nat = gcurve(graph=gd3, color=color.yellow)\n\n# Time evolution\nwhile i < 5:\n    rate(1000)\n    r1 = ball.pos - s1.pos\n    r2 = ball.pos - s2.pos\n    F1 = -G*M*m*norm(r1)/mag(r1)**2\n    F2 = -G*M*m*norm(r2)/mag(r2)**2\n    F = F1 + F2\n    a = F/m\n    ball.velocity = ball.velocity + a*dt\n    ball.pos = ball.pos + ball.velocity*dt\n    vArrow.pos = vector(1, ball.pos.y, 0)\n    vArrow.axis = ball.velocity\n    aArrow.pos = vector(2, ball.pos.y, 0)\n    aArrow.axis = a\n    yt.plot(pos=(t, ball.pos.y))\n    vt.plot(pos=(t, mag(ball.velocity)))\n    at.plot(pos=(t, mag(a)))\n    t = t + dt\n    if ball.pos.y > h:\n        i = i + 1\n        print(\"T = \", t, \"s, i = \", i)",
      "output": "from vpython import *\n\n# Constants\nG = 6.7E-11\nm = 1\nM = 2E13\nd = 10\nh = 3\nv0 = vector(0, 0, 0)\ni = 0\nt = 0\ndt = 0.001\n\n# Objects\ns1 = sphere(pos=vector(-d, 0, 0), radius=1, color=color.blue)\ns2 = sphere(pos=vector(d, 0, 0), radius=1, color=color.blue)\nball = sphere(pos=vector(0, h, 0), radius=0.3, color=color.red, velocity=v0)\nline = cylinder(pos=vector(-d, 0, 0), axis=vector(2*d, 0, 0), radius=0.05)\nline2 = cylinder(pos=vector(0, h, 0), axis=vector(5, 0, 0), radius=0.05, color=color.white)\nline3 = cylinder(pos=vector(0, -h, 0), axis=vector(5, 0, 0), radius=0.05, color=color.white)\n\n# Create arrows\nvArrow = arrow(pos=vector(1, ball.pos.y, 0), axis=v0, color=color.green)\naArrow = arrow(pos=vector(2, ball.pos.y, 0), axis=v0, color=color.yellow)\n\n# Create graphs\ngd = graph(title=\"y-t plot\", xtitle=\"t\", ytitle=\"y\", fast=False)\nyt = gcurve(graph=gd, color=color.red)\ngd2 = graph(title=\"v-t plot\", xtitle=\"t\", ytitle=\"v\", fast=False)\nvt = gcurve(graph=gd2, color=color.green)\ngd3 = graph(title=\"a-t plot\", xtitle=\"t\", ytitle=\"a\", fast=False)\nat = gcurve(graph=gd3, color=color.yellow)\n\n# Time evolution\nwhile i < 5:\n    rate(1000)\n    r1 = ball.pos - s1.pos\n    r2 = ball.pos - s2.pos\n    F1 = -G*M*m*norm(r1)/mag(r1)**2\n    F2 = -G*M*m*norm(r2)/mag(r2)**2\n    F = F1 + F2\n    a = F/m\n    ball.velocity = ball.velocity + a*dt\n    ball.pos = ball.pos + ball.velocity*dt\n    vArrow.pos = vector(1, ball.pos.y, 0)\n    vArrow.axis = ball.velocity\n    aArrow.pos = vector(2, ball.pos.y, 0)\n    aArrow.axis = a\n    yt.plot(pos=(t, ball.pos.y))\n    vt.plot(pos=(t, mag(ball.velocity)))\n    at.plot(pos=(t, mag(a)))\n    t = t + dt\n    if ball.pos.y > h:\n        i = i + 1\n        print(\"T = \", t, \"s, i = \", i)",
      "mode": "fix_error",
      "timestamp": "2024-07-26 11:11:28",
      "serial_number": 2
    
   }
  ]
}
