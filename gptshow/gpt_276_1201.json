{
  "session_id": 1201,
  "log": [
    {
      "input": "# Electrostatic Force and Simple Harmonic MotionPlease use variable names that differ from VPython class names. For example:- Use `my_ring` instead of `ring`.- Use `my_sphere` instead of `sphere`.\u00a0## Motion Description### Physical PhenomenonIn this setup, the two fixed charged spheres in the previous experiment are replaced by a uniformly charged ring. A movable charged sphere is placed above the center of the ring on its vertical axis. The ring exerts a net electrostatic force on the movable sphere, which acts as a restoring force when the sphere is displaced from its equilibrium position. This results in simple harmonic motion along the vertical axis.### Theoretical Background- The charged ring is divided into infinitesimal segments, each contributing to the net electrostatic force acting on the movable sphere.- The horizontal components of the forces from opposite segments of the ring cancel each other out, leaving only the vertical components, which collectively create the restoring force.- For small displacements from the equilibrium position, the restoring force is approximately proportional to the displacement, leading to simple harmonic motion.- The period of the motion depends on the system's parameters, including the total charge of the ring, the mass of the sphere, and the initial displacement.### Observations- For small displacements, the sphere exhibits simple harmonic motion, with graphs of displacement (`y-t`), velocity (`v-t`), and acceleration (`a-t`) closely resembling cosine, sine, and negative cosine waves, respectively.- For larger displacements, deviations from ideal harmonic behavior occur due to the nonlinearities of Coulomb's force.",
      "output": "from vpython import *\n\n# Constants\nk = 9e9  # Coulomb's constant\nQ_ring = 1e-9  # Total charge of the ring\nm = 0.1  # Mass of the sphere\nradius_ring = 0.5\ninitial_displacement = 0.1\ninitial_velocity = 0\n\n# Objects\nmy_ring = ring(pos=vector(0, 0, 0), axis=vector(0, 1, 0), radius=radius_ring, charge=Q_ring)\nmy_sphere = sphere(pos=vector(0, initial_displacement, 0), radius=0.05, mass=m, charge=1e-9, velocity=vector(0, initial_velocity, 0))\n\n# Time\nt = 0\ndt = 0.01\n\n# Graphs\ngd = graph(x=0, y=400, width=600, height=400, title='Simple Harmonic Motion', xtitle='Time', ytitle='Amplitude')\ndisp_curve = gcurve(color=color.blue)\nvel_curve = gcurve(color=color.red)\naccel_curve = gcurve(color=color.green)\n\n# Main loop\nwhile True:\n    rate(100)\n    \n    # Calculate force and acceleration\n    r = my_sphere.pos - my_ring.pos\n    r_mag = mag(r)\n    r_unit = norm(r)\n    F_net = k * my_sphere.charge * Q_ring / r_mag**2 * r_unit\n    a = F_net / my_sphere.mass\n    \n    # Update position and velocity\n    my_sphere.velocity += a * dt\n    my_sphere.pos += my_sphere.velocity * dt\n    \n    # Update time\n    t += dt\n    \n    # Update graphs\n    disp_curve.plot(t, my_sphere.pos.y)\n    vel_curve.plot(t, my_sphere.velocity.y)\n    accel_curve.plot(t, a.y)",
      "mode": "initial",
      "timestamp": "2024-12-30 12:03:36",
      "serial_number": 1
    }
  ]
}