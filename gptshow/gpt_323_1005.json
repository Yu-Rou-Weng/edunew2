{
  "session_id": 1005,
  "log": [
    {
      "input": "1. Screen Settings:</br>Set the canvas width to 700 and height to 400. Do not change the canvas size.</br>2. Object Motion & Parameter Settings:</br>Create a VPython animation to illustrate the following physics experiment:<br><span style=\"color:red;\">This is a simulation of projectile motion with only gravitational force acting on the object. The object is launched horizontally with an initial velocity \\( v_0 \\) from a height \\( h \\). The object accelerates downward due to gravity and bounces off the ground elastically when it hits the ground.</span>\n\n3. Cyber Input Variable Mapping Information:\n    (1) initial_velocity is mapped to the variable named Angle_I with an initial value set to a 1-dimensional value 5\n    (2) When the value of Angle_I changes, let the animation rerun to the starting point and start with the updated initial_velocity.\n    \n\n3. Cyber Input Variable Mapping Information:\n    (1) height is mapped to the variable named Gyroscope_I with an initial value set to a 3-dimensional vector [[0, 0, 4]]\n    (2) When the value of Gyroscope_I changes, let the animation rerun to the starting point and start with the updated height.",
      "output": "Here is the VPython code for the projectile motion simulation based on the provided experiment description and the Cyber Input Variable Mapping Information:\n\n```python\nfrom vpython import *\nimport numpy as np\n\n# Screen Settings\nscene.width = 700\nscene.height = 400\n\n# Constants\ngravity = vector(0, -9.81, 0)  # Acceleration due to gravity in m/s^2\n\n# Function to reset the simulation based on updated inputs\ndef reset_simulation():\n    ball.pos = vector(0, height[0][1], 0)\n    ball.v = vector(initial_velocity, 0, 0)\n\n# Cyber Input Variable Mapping Information\nAngle_I = 5  # Initial value for initial_velocity\nGyroscope_I = [[0, 0, 4]]  # Initial value for height\n\n# Object creation\nball = sphere(pos=vector(0, Gyroscope_I[0][1], 0), radius=0.5, color=color.blue)\nground = box(pos=vector(0, 0, 0), size=vector(20, 0.2, 10), color=color.green)\n\n# Initial parameters\ninitial_velocity = Angle_I\nheight = Gyroscope_I\n\n# Reset simulation to initial state\nreset_simulation()\n\n# Time parameters\nt = 0\ndt = 0.01\n\nwhile True:\n    rate(100)\n    \n    # Update position\n    ball.pos = ball.pos + ball.v * dt + 0.5 * gravity * dt**2\n    \n    # Update velocity\n    ball.v = ball.v + gravity * dt\n    \n    # Check for collision with ground\n    if ball.pos.y <= 0:\n        ball.v.y = -ball.v.y  # Elastic collision with ground\n    \n    t += dt\n    \n    # Reset simulation if ball goes below the ground level\n    if ball.pos.y < 0:\n        reset_simulation()\n        t = 0\n```\n\nYou can run this code in a VPython environment to visualize the projectile motion simulation with the specified initial conditions and physics experiment.",
      "mode": "initial",
      "timestamp": "2024-09-12 07:57:43",
      "serial_number": 1
    }
  ]
}