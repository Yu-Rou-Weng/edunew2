{
  "session_id": 891,
  "log": [
    {
      "input": "1. Screen Settings\nSet the canvas width to 700 and the height to 400. Please draw the trajectory of the ball's movement. Do not change the size of the canvas.\n\n2. Object Motion & Parameter Settings\nPlease create a VPython animation of a horizontally projected ball: Throw a horizontal ball that bounces off the floor upon impact.\nDraw both the ball and the floor. Assume that the ball has an elastic collision with the floor, only considering the effect of gravity, meaning the ball accelerates downward due to gravity and rebounds upon hitting the floor. Allow the ball to move for 6 seconds before stopping the motion.\n\n3. Cyber Input Variable Mapping Information:\n\n(1) Define and initialize a Cyber Input Variable named Speed_I with an initial value set to 1. This variable represents the speed of the ball.\n\n(2) During the animation, whenever the value of the Speed_I variable changes, let the animation rerun from the starting point and begin with the updated ball speed.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\nSpeed_I = 1\n\n# Create a canvas\nscene = canvas(width=700, height=400, center =vector(0,0,0))\n\n# Create the ball and floor\nball = sphere(pos=vector(-5,0,0), radius=0.5, color=color.cyan, make_trail=True)\nfloor = box(pos=vector(0,-0.5,0), length=30, height=0.05, width=4, color=color.green)\n\nball.velocity = vector(Speed_I,0,0) # initial velocity\ng = vector(0,-9.8,0) # gravity\nt = 0 # time\ndt = 0.01 # time step\n\n# Animation loop\nwhile t < 6:\n    rate(100) # limit the number of loops per second\n    ball.pos = ball.pos + ball.velocity*dt\n    ball.velocity = ball.velocity + g*dt\n    if ball.pos.y <= floor.pos.y + ball.radius: \n        ball.velocity.y = abs(ball.velocity.y) # simulate elastic collision\n    t = t + dt\n\n# Reset animation when Speed_I changes\nwhile True:\n    rate(100)\n    if Speed_I != ball.velocity.x:\n        ball.pos = vector(-5,0,0) # reset position\n        ball.velocity = vector(Speed_I,0,0) # reset velocity\n        t = 0 # reset time\n        ball.clear_trail() # clear trail\n        while t < 6:\n            rate(100)\n            ball.pos = ball.pos + ball.velocity*dt\n            ball.velocity = ball.velocity + g*dt\n            if ball.pos.y <= floor.pos.y + ball.radius: \n                ball.velocity.y = abs(ball.velocity.y)\n            t = t + dt\n        Speed_I = ball.velocity.x",
      "mode": "initial",
      "timestamp": "2024-08-16 19:15:40",
      "serial_number": 1
    }
  ]
}