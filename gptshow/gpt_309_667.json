{
  "session_id": 667,
  "log": [
    {
      "input": "Rutherford Scattering\n\nThe Rutherford scattering experiment is a significant piece of evidence for the existence of the atomic nucleus. Alpha particles (helium nuclei) are fired at a gold foil, and the electrostatic force between the alpha particles and the gold nuclei is repulsive. Ignoring the effects of gravity, since the gold nuclei are fixed in place, the electrostatic force experienced by the alpha particles passing near the gold nuclei conserves the angular momentum relative to the gold nuclei. Only the electrostatic force does work between the alpha particles and the gold nuclei, conserving the mechanical energy of the system.\n\nRutherford Scattering Experiment Diagram:\n![image](https://hackmd.io/_uploads/H1zf236OC.png)\n\nThe diagram above illustrates the Rutherford scattering experiment. When the alpha particles are at infinity, their velocity is directed to the right. The perpendicular distance between the gold nucleus and the direction of velocity is known as the impact parameter, typically denoted as b. The goal of this program is to vary b, plot the relationships between the kinetic energy of the alpha particles, the system\u2019s potential energy, the mechanical energy and time, and determine the displacement of the alpha particles upwards.\n\nParameter Settings\n\nVariables are set as r1, m1, q1, c1, r2, m2, q2, c2, v0, b, L, k, t, dt. Their purposes are noted in the comments of each line. To facilitate numerical settings, the units of length are in nm, mass in amu, charge in e, and time in ns. The value of k is assumed to be 1.\n\nDisplay Settings\nGenerate the animation window.\nCreate the nucleus.\nCreate arrows representing velocity and acceleration.\nProduce the plotting window.\n\nObject Motion\nThe animation continues as long as the particle is within the range -L/2 < x < L/2 and -L/2 < y < L/2, thus the condition in the while loop is set as (abs(alpha.pos.x) < L/2 and abs(alpha.pos.y) < L/2).\n\nCalculate the net force on the helium nucleus, update its acceleration, velocity, and position.\n\nUpdate the arrows representing velocity and acceleration.\n\nCalculate and plot the helium nucleus's kinetic energy, the system's potential energy, and mechanical energy.\n\nUpdate time.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# parameter settings\nr1, m1, q1, c1 = Radius_I, 4, 2, color.red # helium nucleus, c1 is color\nr2, m2, q2, c2 = 10, 197, 79, color.yellow # gold nucleus, c2 is color\nv0, b = 0.01, 100 # initial velocity & impact parameter\nL = 4000 # side length of the animation window\nk = 1 # k = 1/(4*pi*epsilon0), value is 1 in natural units\nt, dt = 0, 0.1 # initial time & time step\n\n# create animation window\nscene = canvas(title=\"Rutherford Scattering\", width=600, height=600, \n               center=vector(0,0,0), range=L/2, background=color.black)\n# create nucleus\nalpha = sphere(pos=vector(-L/2,b,0), radius=r1, m=m1, q=q1, v=vector(v0,0,0), a=vector(0,0,0), color=c1)\ngold = sphere(pos=vector(0,0,0), radius=r2, color=c2)\n\n# create arrows representing velocity and acceleration\nvarr = arrow(pos=alpha.pos, axis=alpha.v, shaftwidth=2, color=color.green)\naarr = arrow(pos=alpha.pos, axis=alpha.a, shaftwidth=2, color=color.blue)\n\n# create the plotting window\ngd = graph(title='Kinetic & Potential & Mechanical Energy', xtitle='time', ytitle='Energy', fast=False)\nket = gcurve(graph=gd, color=color.red) # kinetic energy of alpha particle\npet = gcurve(graph=gd, color=color.cyan) # potential energy of the system\nmet = gcurve(graph=gd, color=color.white) # mechanical energy of the system\n\n# object motion\nwhile (abs(alpha.pos.x) < L/2 and abs(alpha.pos.y) < L/2):\n    rate(1000)\n    # calculate the net force on the helium nucleus\n    r = alpha.pos - gold.pos\n    F = k * alpha.q * gold.q * r.norm() / mag(r)**2\n    # update acceleration, velocity and position\n    alpha.a = F / alpha.m\n    alpha.v += alpha.a * dt\n    alpha.pos += alpha.v * dt\n    # update arrows representing velocity and acceleration\n    varr.pos, varr.axis = alpha.pos, alpha.v\n    aarr.pos, aarr.axis = alpha.pos, alpha.a\n    # calculate and plot energies\n    pe = - k * alpha.q * gold.q / mag(r)\n    ke = 0.5 * alpha.m * mag(alpha.v)**2\n    me = pe + ke\n    ket.plot(pos=(t, ke))\n    pet.plot(pos=(t, pe))\n    met.plot(pos=(t, me))\n    # update time\n    t += dt",
      "mode": "initial",
      "timestamp": "2024-07-24 07:28:48",
      "serial_number": 1
    }
  ]
}