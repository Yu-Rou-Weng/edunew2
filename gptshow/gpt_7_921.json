{
  "session_id": 921,
  "log": [
    {
      "input": "1. Screen Settings\nSet the canvas width to 700 and the height to 400. Please draw the trajectory of the ball's movement. Do not change the size of the canvas.\n\n2. Object Motion & Parameter Settings\nPlease create a VPython animation for horizontal projectile motion: launch a ball horizontally from mid-air, which bounces off the ground upon impact.\nDraw both the ball and the ground. Assume that the ball undergoes an elastic collision with the ground, considering only the effect of gravity, meaning the ball accelerates downward due to gravity and bounces upon hitting the ground. Let the ball's motion stop after 6 seconds.\n\n3. Cyber Input Variable Mapping Information:\n\n(1) Define and initialize a Cyber Input Variable named Speed_I with an initial value set to 1. This variable represents the speed of the ball.\n\n(2) During the animation, whenever the value of the Speed_I variable changes, allow the animation to rerun from the starting point and start with the updated ball speed.\n\n(3) Define and initialize a Cyber Input Variable named Height_I with an initial value set to 15. This variable represents the height of the ball above the ground.\n\n(4) During the animation, whenever the value of the Height_I variable changes, allow the animation to rerun from the starting point and start with the updated height of the ball above the ground.\n(5) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\nSpeed_I = 1\nHeight_I = 15\n\nscene = canvas(width=700, height=400)\n\ndef create_ball_trajectory(speed, height):\n    ball = sphere(pos=vector(0, height, 0), radius=0.5, color=color.red)\n    ground = box(pos=vector(0, 0, 0), size=vector(40, 0.2, 40), color=color.green)\n    ball.velocity = vector(speed, 0, 0)\n    dt = 0.01\n    t = 0\n    g = -9.8\n    while t < 6:\n        rate(100)\n        ball.velocity.y = ball.velocity.y + g*dt\n        ball.pos = ball.pos + ball.velocity*dt\n        if ball.pos.y <= ground.pos.y + ball.radius:\n            ball.velocity.y = -ball.velocity.y\n        t = t + dt\n    return ball\n\nwhile True:\n    create_ball_trajectory(Speed_I, Height_I)\n    Speed_I = scene.waitfor('keydown').key == 's'\n    Height_I = scene.waitfor('keydown').key == 'h'",
      "mode": "initial",
      "timestamp": "2024-08-18 19:39:45",
      "serial_number": 1
    }
  ]
}