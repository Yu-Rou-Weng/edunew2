{
  "session_id": 867,
  "log": [
    {
      "input": "Please write a \"Wood Block Spring System Elastic Collision\" VPython animation\n\n# One-Dimensional Elastic Collision\n\nAssume there are two blocks on a horizontal smooth surface, with masses $m_1$ and $m_2$, and velocities $v_1$ and $v_2$, respectively. The velocities of the blocks after the collision are $v_1'$ and $v_2'$. Since the collision process of the two blocks is free from external forces, the system conserves momentum:\n$$\nm_1 v_1 + m_2 v_2 = m_1 v_1' + m_2 v_2' \\Rightarrow m_1 (v_1 - v_1') = m_2 (v_2' - v_2) \\quad (1)\n$$\n\nIf there is no energy loss during the collision, the total kinetic energy of the two blocks before and after the collision remains equal:\n$$\n\\frac{1}{2} m_1 v_1^2 + \\frac{1}{2} m_2 v_2^2 = \\frac{1}{2} m_1 v_1'^2 + \\frac{1}{2} m_2 v_2'^2\n$$\n$$\nm_1 (v_1^2 - v_1'^2) = m_2 (v_2'^2 - v_2^2)\n$$\n$$\nm_1 (v_1 + v_1') (v_1 - v_1') = m_2 (v_2' + v_2) (v_2' - v_2) \\quad (2)\n$$\n\nDividing equation (2) by equation (1) we get:\n$$\nv_1 + v_1' = v_2' + v_2 \\Rightarrow\n\\begin{cases}\nv_1' = v_2' + v_2 - v_1 \\quad (3) \\\\\nv_2' = v_1 + v_1' - v_2 \\quad (4)\n\\end{cases}\n$$\n\nSubstituting equation (4) into equation (1) we get:\n$$\nm_1 (v_1 - v_1') = m_2 [(v_1 + v_1' - v_2) - v_2]\n$$\n$$\n(m_1 + m_2) v_1' = (m_1 - m_2) v_1 + 2 m_2 v_2 \\Rightarrow v_1' = \\frac{m_1 - m_2}{m_1 + m_2} v_1 + \\frac{2 m_2}{m_1 + m_2} v_2\n$$\n\nSubstituting equation (3) into equation (1) we get:\n$$\nm_1 [v_1 - (v_2' + v_2 - v_1)] = m_2 (v_2' - v_2)\n$$\n$$\n(m_1 + m_2) v_2' = 2 m_1 v_1 + (m_2 - m_1) v_2 \\Rightarrow v_2' = \\frac{2 m_1}{m_1 + m_2} v_1 + \\frac{m_2 - m_1}{m_1 + m_2} v_2\n$$\n\n\nProgram to be written: Direct substitution of post-collision velocity formulas.\n\n![image](https://hackmd.io/_uploads/S1x8VjadA.png)\n\n![image](https://hackmd.io/_uploads/H14w4jpOC.png)\nScreenshot of the one-dimensional elastic collision program\n\nParameter Settings\n\nHere, variables are set for block width, mass, initial velocity, color, x-axis range, time, and time interval. The time interval dt is set to 0.0005, because setting it to 0.001 would create larger errors when calculating block energy, thus a smaller value is chosen. A 3 cm white spring tied to the right side of the green block serves as a buffer for collisions. There will be a floor.\n\nScreen Setup\n\nThe code for generating the animation window, floor, blocks, and plotting window has appeared several times in previous animations and will not be repeated here.\n\nCustom Functions\n\nLines 36 to 39 of the code define a function named af_col_v, which accepts parameters (m1, m2, v1, v2) and returns the velocities v1_prime, v2_prime after the collision. We call this function on line 58 of the code:\n\nb1.v.x, b2.v.x = af_col_v(m1, m2, b1.v.x, b2.v.x)\nSince the function returns two values, the program assigns the first return value to b1.v.x and the second to b2.v.x.\n\nObject Movement\n\nThe animation stops when the blocks reach the edge, so the while loop condition is set as:\n\nb2.pos.x <= xmax - d2/2 and b1.pos.x >= xmin + d1/2\nIf the distance between the centers of the two blocks is less than (d1 + d2) / 2, it indicates a collision between the blocks, and the custom function af_col_v is called to calculate the post-collision velocities.\n\nUpdate the position of the blocks.\n\nThe widths of the red and green blocks are both 0.1. The green block has a 2-meter spring tied to its right side, and the spring is not connected to the red block. Make the spring thicker and denser. When the red block collides with the spring, the spring and the green block undergo the aforementioned wood block spring system elastic collision, and the red block moves in its original direction.\n\nSpecial note: The left side of the green block should have a 3 cm spring tied to it, which is tied to the green block and moves together with it without separating. The spring is connected only to the green block, not to the red block.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Speed_I as a cyber input variable, set Speed_I=1\n(2) Speed_I is the Initial velocity of b1. When Speed_I changes to a new value, the initial velocity of b1 also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Define function for post-collision velocities\ndef af_col_v(m1, m2, v1, v2):\n    v1_prime = (m1-m2)*v1/(m1+m2) + 2*m2*v2/(m1+m2)\n    v2_prime = 2*m1*v1/(m1+m2) - (m1-m2)*v2/(m1+m2)\n    return v1_prime, v2_prime\n\n# Parameter settings\nd1, m1, v1 = 0.1, 0.1, 1\nd2, m2, v2 = 0.1, 0.1, 0\nx1, x2 = -0.5, 0.5\ncolor1, color2 = color.red, color.green\nxmax, xmin = 0.6, -0.6\nt, dt = 0, 0.0005\n\n# Animation screen setup\nscene = canvas(title='Blocks and Spring Collision', width=800, height=300, center=vec((xmax+xmin)/2, 0, 0), background=vec(0.5, 0.5, 0))\nfloor = box(pos=vec((xmax+xmin)/2, -0.005, 0), length=xmax-xmin, height=0.01, width=0.8, color=color.blue)\nb1 = box(pos=vec(x1, 0, 0), length=d1, height=0.06, width=0.06, color=color1, m=m1, v=vec(v1, 0, 0))\nb2 = box(pos=vec(x2, 0, 0), length=d2, height=0.06, width=0.06, color=color2, m=m2, v=vec(v2, 0, 0))\n\n# Object movement loop\nwhile b2.pos.x <= xmax - d2/2 and b1.pos.x >= xmin + d1/2:\n    rate(1000)\n    if abs(b2.pos.x - b1.pos.x) <= (d1 + d2) / 2:\n        b1.v.x, b2.v.x = af_col_v(m1, m2, b1.v.x, b2.v.x)\n    b1.pos.x += b1.v.x*dt\n    b2.pos.x += b2.v.x*dt\n    t += dt",
      "mode": "initial",
      "timestamp": "2024-07-26 12:34:48",
      "serial_number": 1
    }
  ]
}