{
  "session_id": 720,
  "log": [
    {
      "input": "Magnetic Field Generated by a Long Straight Current-Carrying Conductor\n\nChapter 8 of the elective physics course introduces the magnetic effects of electric current, including the Biot-Savart law, which is used to calculate the magnetic field at a point in space due to a small segment of current-carrying wire. The equation is given by:\n$$\nd\\vec{B} = \\frac{\\mu_0}{4\\pi} \\frac{I d\\vec{L} \\times \\hat{r}}{r^2} \\Rightarrow dB = \\frac{\\mu_0}{4\\pi} \\frac{I dL \\sin{\\theta}}{r^2}\n$$\n\nUsing the Biot-Savart law, we can calculate the magnitude of the magnetic field at a perpendicular distance \\( r \\) from a long straight current-carrying conductor as:\n$$\nB = \\frac{\\mu_0 I}{2\\pi r}\n$$\n\nThe magnetic field magnitude at the center of a current-carrying loop with radius \\( r \\) is:\n$$\nB = \\frac{\\mu_0 I}{2r}\n$$\n\nThe magnetic field magnitude at the center of a solenoid with \\( n \\) turns per unit length carrying current is:\n$$\nB = \\mu_0 n I\n$$\n\nMagnetic fields are distributed in space, but the diagrams in the textbook are all in plane form. Therefore, I want to use VPython to visualize the magnetic field strength and direction in space.\n\n**Parameter Settings**\n\nVariables are set as size, n, L, d, mu, current, direct, N, with comments explaining their purposes. To make the arrow lengths more noticeable by increasing the magnetic field strength, the current value set is extremely high.\n\n**Display Settings**\nCreate an animation window and the conductor.\n\nCreate an empty list `segs`, and use a for loop to generate small spheres that represent segments of the conductor, which are then added to the list `segs`. The two methods shown below achieve the same effect; the first method is more verbose but easier to understand, while the second method is more concise but harder to comprehend.\n\n```python\nsegs = []\nfor i in range(n+1):\n    segs.append(sphere(pos=line.pos + vec(i*d, 0, 0), radius=size, color=color.cyan))\nsegs = [sphere(pos=line.pos + vec(i*d, 0, 0), radius=size, color=color.cyan) for i in range(n+1)]\n```\n\nCreate an empty list `locations`, and use a three-layer for loop to calculate positions for drawing arrows, which are then added to the list `locations`.\n\n```python\nfields = []\nfor location in locations:\n    fields.append(arrow(pos=location, axis=vec(0, 0, 0), color=color.green))\nfields = [arrow(pos=location, axis=vec(0, 0, 0), color=color.green) for location in locations]\n```\n\nCustom function `magnetic`, which takes the position coordinates `loc` as input and a list `segments` storing segmented conductor data, uses the Biot-Savart law to calculate the magnetic field.\n\nSequentially read elements from the list `locations` to generate arrows at corresponding positions.\n\nUpdate the arrow's length and direction, record the maximum magnetic field strength \\( B_{max} \\), with arrows colored closer to red for values near \\( B_{max} \\) and closer to green for values near zero.\n\n**Desired Diagram:**\n![image](https://hackmd.io/_uploads/H1fL6hp_R.png)\n(1) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Parameters\nmu = 1.25663706E-6\nI = 1E20\nsize, n, L = 0.02, 50, 1.0  # Radius of sphere, number of spheres, length of the conductor\nd = L/n  # Distance between spheres\nR = 0.3  # Distance from the conductor\nN, B_max = 100, 0\n\n# Animation window and conductor\nscene = canvas(title=\"Magnetic Fields\", width=600, height=600, background=vec(0.5, 0.5, 0))\nobs = [vec(R*cos(2*pi/N*i), R*sin(2*pi/N*i), 0) for i in range(N)]\nline = curve(pos=[vec(-L/2, 0, 0), vec(L/2, 0, 0)], radius=size/2)\nsegs = [sphere(pos=line.pos + vec(i*d, 0, 0), radius=size, color=color.cyan) for i in range(n+1)]\n\n# Arrow positions\nlocations = [obs[i] + vec(0, 0, j*2*R/(N-1) - R) for j in range(N) for i in range(N)]\nfields = [arrow(pos=location, axis=vec(0, 0, 0), color=color.green) for location in locations]\n\n# Biot-Savart Law\ndef magnetic(loc, segs):\n    B = vec(0, 0, 0)\n    for seg in segs:\n        r = loc - seg.pos\n        dB = mu / (4 * pi) * I * cross(d * seg.axis, norm(r)) / mag2(r)\n        B += dB\n    return B\n\n# Draw arrows\nfor i in range(len(locations)):\n    B = magnetic(locations[i], segs)\n    if mag(B) > B_max:\n        B_max = mag(B)\n    fields[i].axis = B * 0.03\n    fields[i].color = vec(mag(B) / B_max, sqrt(1 - (mag(B) / B_max)**2), 0)",
      "mode": "initial",
      "timestamp": "2024-07-24 13:37:22",
      "serial_number": 1
    }
  ]
}