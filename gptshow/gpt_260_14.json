{
  "session_id": 14,
  "log": [
    {
      "input": "Simple Pendulum\n\nIf we define the moment of inertia (I) as:\n\n$$\nI = mr^2\n$$\n\nSince the direction of torque $\\tau$ and angular acceleration $\\alpha$ are opposite, their relationship is:\n\n$$\n\\tau = -I\\alpha \\Rightarrow rF\\sin\\theta = -mr^2 \\frac{d^2\\theta}{dt^2} \\Rightarrow \\frac{F}{m}r\\sin\\theta = -\\frac{d^2\\theta}{dt^2}\n$$\n\nIf $r = L$ and $F = mg$, when $\\theta < 5^\\circ$, $\\sin\\theta \\approx \\theta$, then the equation can be rewritten as:\n\n$$\n\\frac{g}{L}\\theta = -\\frac{d^2\\theta}{dt^2}\n$$\n\nFrom this, we can solve for:\n\n$$\n\\theta(t) = \\theta_0 \\cos\\left(\\sqrt{\\frac{g}{L}} t\\right) = \\theta_0 \\cos(\\omega t)\n$$\n\nIn the above formula, $\\omega$ is the angular frequency of the oscillation, hence the period is:\n\n$$\nT = \\frac{2\\pi}{\\omega} = 2\\pi \\sqrt{\\frac{L}{g}}\n$$\n\nThere are two programs below:\n\n1. Ideal simple pendulum, changing the initial swing angle to calculate the motion process and period.\n2. Simple pendulum considering air resistance.\n\n(1) Define and initialize a variable named Length_I as a cyber input variable, set Length_I=10\n(2) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(3) Length_I is the length of the pendulum. When Length_I changes to a new value, the length of the pendulum also changes to that value.\n(4) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(5) Do not import packages that are not supported by VPython such as numpy, math and time",
      "output": "from vpython import *\n\n# Constants\ng = 9.81 # m/s^2\n\n# Initial conditions\nLength_I = 10 # m\nRadius_I = 1 # m\ntheta_init = radians(5) # rad\nomega_init = 0 # rad/s\n\n# Create objects\nceiling = box(length=0.2, height=0.01, width=0.2, color=color.blue)\nball = sphere(pos=vector(Length_I*sin(theta_init), -Length_I*cos(theta_init), 0), radius=Radius_I, color=color.red)\nrod = cylinder(pos=ceiling.pos, axis=ball.pos-ceiling.pos, radius=0.01, color=color.gray(0.7))\n\n# Create an arrow to show the force acting on the ball\nforce_arrow = arrow(pos=ball.pos, axis=-ball.pos*5, color=color.green, visible=False)\n\n# Initialize values\ntheta = theta_init\nomega = omega_init\nball.m = 1 # kg\nball.v = vector(0, 0, 0) # m/s\nt = 0\ndt = 0.01\n\n# Animation\nwhile True:\n    rate(100)\n    # Calculate forces\n    F_gravity = vector(0, -ball.m*g, 0)\n    F_net = F_gravity\n    # Update velocity and position\n    ball.v += (F_net/ball.m)*dt\n    ball.pos += ball.v*dt\n    rod.axis = ball.pos - rod.pos\n    # Update angle and angular velocity\n    theta = acos(dot(rod.axis, vector(0, -1, 0))/mag(rod.axis))\n    omega += (-g/Length_I)*theta*dt\n    t += dt\n    # Update force arrow\n    force_arrow.pos = ball.pos\n    force_arrow.axis = F_net*5",
      "mode": "initial",
      "timestamp": "2024-07-08 10:40:58",
      "serial_number": 1
    }
  ]
}