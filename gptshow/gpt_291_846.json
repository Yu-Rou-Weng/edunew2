{
  "session_id": 846,
  "log": [
    {
      "input": "Please write a \"Wood Block Spring System Elastic Collision\" VPython animation.\n\n# One-Dimensional Elastic Collision\n\nSuppose there are two wooden blocks on a horizontal frictionless surface, with masses $m_1$ and $m_2$, and velocities $v_1$ and $v_2$, respectively. The velocities of the blocks after the collision are $v_1'$ and $v_2'$. Since the collision process is free from external forces, the system's momentum is conserved:\n$$\nm_1 v_1 + m_2 v_2 = m_1 v_1' + m_2 v_2' \\Rightarrow m_1 (v_1 - v_1') = m_2 (v_2' - v_2) \\quad (1)\n$$\n\nIf there is no energy loss during the collision, the total kinetic energy of the blocks before and after the collision is equal:\n$$\n\\frac{1}{2} m_1 v_1^2 + \\frac{1}{2} m_2 v_2^2 = \\frac{1}{2} m_1 v_1'^2 + \\frac{1}{2} m_2 v_2'^2\n$$\n$$\nm_1 (v_1^2 - v_1'^2) = m_2 (v_2'^2 - v_2^2)\n$$\n$$\nm_1 (v_1 + v_1') (v_1 - v_1') = m_2 (v_2' + v_2) (v_2' - v_2) \\quad (2)\n$$\n\nDividing equation (2) by equation (1) results in:\n$$\nv_1 + v_1' = v_2' + v_2 \\Rightarrow\n\\begin{cases}\nv_1' = v_2' + v_2 - v_1 \\quad (3) \\\\\nv_2' = v_1 + v_1' - v_2 \\quad (4)\n\\end{cases}\n$$\n\nSubstituting equation (4) into equation (1) yields:\n$$\nm_1 (v_1 - v_1') = m_2 [(v_1 + v_1' - v_2) - v_2]\n$$\n$$\n(m_1 + m_2) v_1' = (m_1 - m_2) v_1 + 2 m_2 v_2 \\Rightarrow v_1' = \\frac{m_1 - m_2}{m_1 + m_2} v_1 + \\frac{2 m_2}{m_1 + m_2} v_2\n$$\n\nSubstituting equation (3) into equation (1) yields:\n$$\nm_1 [v_1 - (v_2' + v_2 - v_1)] = m_2 (v_2' - v_2)\n$$\n$$\n(m_1 + m_2) v_2' = 2 m_1 v_1 + (m_2 - m_1) v_2 \\Rightarrow v_2' = \\frac{2 m_1}{m_1 + m_2} v_1 + \\frac{m_2 - m_1}{m_1 + m_2} v_2\n$$\n\nWrite a program: Directly substitute the formulas for velocities after the collision.\n\n![image](https://hackmd.io/_uploads/S1x8VjadA.png)\n\n![image](https://hackmd.io/_uploads/H14w4jpOC.png)\nScreenshot of the program for one-dimensional elastic collision.\n\nParameter Settings\n\nSet variables for the width, mass, initial velocity, color of the blocks, the range of the x-axis, time, and time interval, where the time interval dt is set to 0.0005 due to larger energy calculation errors when set to 0.001, thus choosing a smaller value. A white spring is attached to the side where the green and red blocks collide to act as a buffer.\n\nScreen Setup\nThe code for generating the animation window, floor, blocks, and plotting window has appeared many times in previous animations and will not be elaborated here.\n\nCustom Function\nLines 36 to 39 set a function named af_col_v, which takes parameters (m1, m2, v1, v2) and substitutes them into the one-dimensional elastic collision velocity formulas, returning the post-collision velocities v1_prime, v2_prime. We call this function in line 58 of the code:\n\nb1.v.x, b2.v.x = af_col_v(m1, m2, b1.v.x, b2.v.x)\nAs the function returns two values, the program assigns the first return value to b1.v.x and the second return value to b2.v.x.\n\nObject Motion\nThe animation stops when a block reaches the edge, hence the while loop condition is set as:\n\nb2.pos.x <= xmax - d2/2 and b1.pos.x >= xmin + d1/2\nIf the distance between the centers of the two blocks is less than (d1 + d2) / 2, a collision occurs, and the custom function af_col_v is called to calculate the post-collision velocity.\n\nUpdate the position of the blocks.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Speed_I as a cyber input variable, set Speed_I=1\n(2) Speed_I is the Initial velocity of b1. When Speed_I changes to a new value, the initial velocity of b1 also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Function to calculate post-collision velocity\ndef af_col_v(m1, m2, v1, v2):\n    v1_prime = (m1 - m2) * v1 / (m1 + m2) + (2 * m2 * v2) / (m1 + m2)\n    v2_prime = (2 * m1 * v1) / (m1 + m2) - (m1 - m2) * v2 / (m1 + m2)\n    return v1_prime, v2_prime\n\n# Initial settings\nd1, d2 = 0.2, 0.2\nr1, r2 = 0.5*d1, 0.5*d2\nm1, m2 = 0.2, 0.2\nxmin, xmax = -1., 1.\nSpeed_I = 1 # Cyber input variable\nv1, v2 = vector(Speed_I, 0, 0), vector(0, 0, 0)\ndt = 0.0005\nb1 = box(pos=vector(-0.2, 0, 0), size=vector(d1, d1, d1), color=color.green, v=v1, m=m1)\nb2 = box(pos=vector( 0.2, 0, 0), size=vector(d2, d2, d2), color=color.red, v=v2, m=m2)\nspring = helix(pos=b1.pos, axis=b2.pos-b1.pos, radius=0.1, coils=20, color=color.white)\n\n# Animation\nwhile b2.pos.x <= xmax - d2/2 and b1.pos.x >= xmin + d1/2:\n    rate(1000)\n    if abs(b1.pos.x - b2.pos.x) <= (d1 + d2) / 2:\n        b1.v.x, b2.v.x = af_col_v(m1, m2, b1.v.x, b2.v.x)\n        b1.color, b2.color = b2.color, b1.color \n    b1.pos += b1.v * dt\n    b2.pos += b2.v * dt\n    spring.axis = b2.pos - b1.pos",
      "mode": "initial",
      "timestamp": "2024-07-26 11:48:39",
      "serial_number": 1
    }
  ]
}