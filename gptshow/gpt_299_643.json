{
  "session_id": 643,
  "log": [
    {
      "input": "Electric Field, Two Spherical Charged Bodies\n\n# Gravitational Field and Electric Field\n\nIf there is a sphere in space with a mass $M$ and a uniformly distributed mass, and taking the center of mass $M$ as the origin, the gravitational field at a position vector $\\vec{r}$ in space is given by:\n$$\n\\vec{g} = - \\frac{GM}{r^2} \\hat{r}\n$$\nThe negative sign in the equation indicates that the direction of the gravitational field points towards the center of the sphere. If there are multiple spheres, for the $i$-th sphere with mass $M_i$ and center at $\\vec{r}_i$, the gravitational field is:\n$$\n\\vec{g} = \\sum \\vec{g}_i = -G \\sum \\frac{M_i (\\vec{r} - \\vec{r}_i)}{|\\vec{r} - \\vec{r}_i|^3}\n$$\n\nIt would be nearly impossible to draw the intensity and direction of the gravitational field at each location on a blackboard. The image below is a diagram I drew of the Earth's gravitational field.\n\n### Earth's Gravitational Field Diagram\n\nIn the following course, we aim to take a point at regular intervals in space and represent the gravitational field at that point with the length and direction of an arrow. Hence, we first practice using a for loop in the program \"Use for loop to generate arrows\" to draw an arrow at regular intervals in space. In the program \"Gravitational field, can be modified to draw different planets\", in addition to drawing arrows, we also calculate the gravitational field at that location and update the length and direction of the arrow. If we can successfully depict the gravitational field of a sphere, in the program \"Gravitational field, can be modified to draw different planets\" we further draw the gravitational fields established by two or multiple spheres.\n\nAfter completing the drawings of gravitational fields, we can use the same method to depict the electric field established by charged spheres in space, whose mathematical form is:\n$$\n\\vec{E} = \\sum \\vec{E}_i = k \\sum \\frac{Q_i (\\vec{r} - \\vec{r}_i)}{|\\vec{r} - \\vec{r}_i|^3}\n$$\nBy slightly modifying the program \"Gravitational field, can be modified to draw different planets\", we can draw the electric field created by two charged spheres in space.\n\nProgram to be written: Electric Field, Two Spherical Charged Bodies\n\nThe program \"Electric Field, Two Spherical Charged Bodies\" is almost identical to \"Gravitational field, can be modified to draw different planets\", with the following differences explained:\n\nReduce the radius of the spheres and the width of the drawing significantly, and set the charge of the charged bodies and the electrostatic constant.\nIn lines 23 to 31, do not use inheritance when customizing the class Ball. When creating an instance of this class, input position pos, radius radius, color color, and charge charge to create a sphere, and customize a function for calculating the electric field `electric`.\nFor a left small sphere with charge q1 and a right small sphere with charge q2, here are the simulation results for three different combinations.\n\nScreenshots of the code should be drawn:\n\n\nScreenshot of simulation results for q1 = 1, q2 = -5:\n![image](https://hackmd.io/_uploads/B18ne26uR.png)\n\n\nScreenshot of simulation results for q1 = 5, q2 = -5:\n![image](https://hackmd.io/_uploads/rkX6g36u0.png)\n\n\nScreenshot of simulation results for q1 = 5, q2 = -1:\n![image](https://hackmd.io/_uploads/SJQCeh6uC.png)\n(1) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\nscene = canvas(width=800, height=800, background=vector(0.5,0.5,0))\nG = 1\nk = 1\ncharges = []\n\nclass Ball(sphere):\n    def __init__(self, pos, radius, color, charge):\n        sphere.__init__(self, pos=pos, radius=radius, color=color)\n        self.charge = charge\n        charges.append(self)\n        \n    def electric(self, pos):\n        return k*self.charge*norm(self.pos-pos)/mag2(self.pos-pos)\n\nb1 = Ball(pos=vector(-1,0,0), radius=0.2, color=color.red, charge=1)\nb2 = Ball(pos=vector(1,0,0), radius=0.2, color=color.blue, charge=-5)\n\nfor x in range(-5, 6, 2):\n    for y in range(-5, 6, 2):\n        for z in range(-5, 6, 2):\n            pos = vector(x,y,z)\n            E = vector(0,0,0)\n            for b in charges:\n                E += b.electric(pos)\n            arrow(pos=pos, axis=E, color=color.yellow)",
      "mode": "initial",
      "timestamp": "2024-07-24 06:42:22",
      "serial_number": 1
    }
  ]
}