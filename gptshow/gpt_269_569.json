{
  "session_id": 569,
  "log": [
    {
      "input": "Horizontal Projectile Motion\n\nA small ball is thrown horizontally from a height \\( h \\) with an initial speed \\( v_0 \\). The ball accelerates downwards due to gravity and bounces upon hitting the floor. This scenario only considers the effect of gravity and assumes that the collision between the ball and the floor is elastic.\n\nParameter Settings\nVariables defined here include size, \\( v_0 \\), \\( h \\), \\( L \\), \\( g \\), \\( i \\), \\( t \\), and \\( dt \\), with their purposes already noted in the comments of each line.\n\nDisplay Settings\nIn this instance, no color (color) is set for the sphere and box objects; instead, textures are set. The syntax is:\n\\[ \\text{texture = textures.[texture name]} \\]\n\nVPython 7 currently supports the following 12 textures:\n\nnames = [\"flower\", \"granite\", \"gravel\", \"metal\", \"rock\", \"rough\",\n         \"rug\", \"stones\", \"stucco\", \"wood\", \"wood_old\", \"earth\"]\ntex = [textures.flower, textures.granite, textures.gravel, textures.metal, textures.rock, textures.rough,\n            textures.rug, textures.stones, textures.stucco, textures.wood, textures.wood_old, textures.earth]\n\nSupported Colors in VPython 7\n\nnames = [\"red\", \"green\", \"blue\", \"purple\", \"yellow\", \"orange\", \"cyan\",\n         \"magenta\", \"black\", \"white\", \"gray\", \"custom\"]\ncolors = [color.red, color.green, color.blue, color.purple, color.yellow,\n          color.orange, color.cyan, color.magenta, color.black, color.white, color.gray(0.5), vec(0, 0.6, 0.6)]\n\nCustom textures using online images can also be used by appending the image URL to the texture property, enclosed in quotes, for example with a Jupiter image:\n\njupiter = sphere(pos=vec(0, 0, 0), radius=1, \n                 texture=\"https://upload.wikimedia.org/wikipedia/commons/c/c1/Jupiter_New_Horizons.jpg\")\n\nUsing Online Images for Custom Textures:\n```python\nscene = canvas(title=\"Jupiter\", width=600, height=600, color=color.black, range=1.5)\njupiter = sphere(pos=vec(0, 0, 0), radius=1, texture=\"https://upload.wikimedia.org/wikipedia/commons/c/c1/Jupiter_New_Horizons.jpg\")\nwhile True: \n    rate(1000)\n    jupiter.rotate(angle=2*pi/(24*60*60), axis=vec(0, 1, 0))\n```\n\nBuilt-in Earth Texture\n```python\nscene = canvas(title=\"Earth\", width=600, height=600, color=color.black, range=1.5)\nearth = sphere(pos=vec(0, 0, 0), radius=1, texture=textures.earth)\nwhile True: \n    rate(1000)\n    earth.rotate(angle=2*pi/(24*60*60), axis=vec(0, 1, 0))\n```\nA sphere named ball can be created with initial velocity and acceleration set simultaneously, or they can be set later as follows:\n\nball.v = vec(v0, 0, 0)\nball.a = vec(0, -g, 0)\n\nObject Motion\nThe condition set in the while loop is:\n\nball.pos.x < L/2\nThus, the animation continues until the ball reaches the right edge of the floor.\n\nWhen the ball hits the floor, increment the collision count \\( i \\), print the collision count \\( i \\), elapsed time \\( t \\), and the horizontal range (ball.pos.x + L/2). Therefore, add the following code:\n\nif ball.pos.y - floor.pos.y <= size + 0.5*floor.height and ball.v.y < 0:\n    i += 1\n    print(i, t, ball.pos.x + L/2)\n    ball.v.y = -ball.v.y\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Length_I as a cyber input variable, set Length_I=10\n(2) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(3) Length_I is the length of the pendulum. When Length_I changes to a new value, the length of the pendulum also changes to that value.\n(4) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(5) Do not import packages that are not supported by VPython such as numpy, math and time.",
      "output": "from vpython import *\n\n# Parameter Settings\nsize = 0.05\nv0 = 1\nh = 15\nL = 30\ng = 9.8\ni = 0\nt = 0\ndt = 0.001\n\n# Display Settings\nscene = canvas(width=800, height=800, background=vec(0.5, 0.5, 0))\nfloor = box(length=L, height=0.01, width=10, texture=textures.stones)\nball = sphere(radius=size, color=color.red, make_trail=True, texture=textures.earth)\nball.pos = vec(-L/2 + size, h, 0)\nball.v = vec(v0, 0, 0)\nball.a = vec(0, -g, 0)\n\n# Object Motion\nwhile ball.pos.x < L/2:\n    rate(1000)\n    ball.pos += ball.v*dt + 0.5*ball.a*dt**2\n    ball.v += ball.a*dt\n    if ball.pos.y - floor.pos.y <= size + 0.5*floor.height and ball.v.y < 0:\n        i += 1\n        print(i, t, ball.pos.x + L/2)\n        ball.v.y = -ball.v.y\n    t += dt",
      "mode": "initial",
      "timestamp": "2024-07-23 21:35:09",
      "serial_number": 1
    }
  ]
}