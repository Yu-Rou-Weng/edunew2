{
  "session_id": 659,
  "log": [
    {
      "input": "Mass Spectrometer: Automatically running a loop for 5 types of particles\n\nFive particles enter a uniform magnetic field B at the same speed and at a perpendicular angle, with their trajectories as shown in the figure below. These five particles are: carbon atom ($^{12}$C), oxygen ion ($^{16}$O$^{2-}$), sodium ion ($^{23}$Na$^+$), magnesium ion ($^{24}$Mg$^{2+}$), and chlorine ion ($^{35}$Cl$^-$). Disregarding the effects of gravity, the trajectories labeled 1, 2, 3, 4, and 5 in the figure respectively represent which particles?\n\nThis question is from the 1995 Joint University Entrance Examination in Japan. Although it is from a long time ago, this question can still be found in various reference books. When the particles move upward into the magnetic field, positively charged particles experience a magnetic force to the left and negatively charged particles to the right, while electrically neutral particles are unaffected by the magnetic force. If we consider the magnetic force as the centripetal force for uniform circular motion in the magnetic field, then:\n$$\nqvB = m \\cdot \\frac{v^2}{R} \\Rightarrow R = \\frac{mv}{qB} \\propto \\frac{m}{q}\n$$\n\nTherefore, the answer to this question is $^{23}$Na$^+$, $^{24}$Mg$^{2+}$, $^{12}$C, $^{16}$O$^{2-}$, $^{35}$Cl$^-$. Next, let\u2019s try to use VPython to illustrate the motion of these particles in a mass spectrometer.\n\nProgramming Part\nThe program for the mass spectrometer, which uses a for loop to automatically process 5 types of particles, is similar to the standard mass spectrometer program, with only the modifications described below.\n\nParticle labels data, \"labels,\" is added. Since VPython supports HTML syntax in labels, it can display superscripts and subscripts. Text between <sup> and </sup> is displayed as a superscript, text between <sub> and </sub> as a subscript.\n\nA for loop is used to read the names of the particles, and the code block for generating particles and the particle movement part of the while loop are placed inside the for loop. A label for each particle is added after the completion of the while loop.\n\nSimulation Results\nBelow are the results from running program 23-2, showing that the radius of gyration of the particles is directly proportional to m/q.\n\nScreenshot of program 23-2:\n[Image not displayed]\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, setting Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Constants\nB = vector(0, 0, 1)  # Magnetic field\nv = vector(0, 1, 0)  # Initial speed of particles\nparticles = [('C', 12, 0), ('O', 16, -2), ('Na', 23, 1), ('Mg', 24, 2), ('Cl', 35, -1)]  # Name, mass, charge\n\n# Scene\nscene = canvas(title=\"Mass Spectrometer\", width=600, height=600, center=vector(0, 0, 0), background=color.white)\n# Create particles and their trajectories\nfor particle in particles:\n    name, m, q = particle\n    ball = sphere(pos=vector(-5, 0, 0), radius=1, color=color.red, make_trail=True)\n    ball.m = m\n    ball.q = q\n    ball.v = v\n    ball.trail_color = color.blue\n    # Particle motion\n    while ball.pos.y >= 0:\n        rate(1000)\n        F = q * cross(ball.v, B)  # Lorentz force\n        ball.v = ball.v + F / ball.m\n        ball.pos = ball.pos + ball.v\n    # Label each particle after its motion\n    label(pos=ball.pos, text=name, box=False)",
      "mode": "initial",
      "timestamp": "2024-07-24 07:24:26",
      "serial_number": 1
    }
  ]
}