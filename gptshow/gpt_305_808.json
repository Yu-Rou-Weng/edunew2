{
  "session_id": 808,
  "log": [
    {
      "input": "# Electron Charge-to-Mass Ratio\n\nThe experimental setup diagram for measuring the electron charge-to-mass ratio is shown below. Its appearance and velocity selector are very similar, hence we can slightly modify the \"velocity selector\" program to create an animation for the electron charge-to-mass ratio experiment.\n### Schematic Diagram of Experimental Setup\n![image](https://hackmd.io/_uploads/SkTFu36OR.png)\n\n## Theoretical Analysis\n\nReferring to the diagram above, the particle has a mass $m$ and charge $q$, and enters a downward uniform electric field $E$ with a horizontal velocity $v_0$ to the right. The length of the parallel charged plates is $L$, and the distance from the right side of the charged plates to the screen is $D$. Considering only the electrostatic force, the particle's acceleration upward in the electric field is\n$$\na = \\frac{qE}{m}\n$$\n\nThere are no external forces horizontally, thus it moves at a constant speed, and the time spent in the electric field is\n$$\nt_1 = \\frac{L}{v_0}\n$$\n\nThe upward displacement is\n$$\ny_1 = \\frac{1}{2} a t_1^2 = \\frac{1}{2} \\left( \\frac{qE}{m} \\right) \\left( \\frac{L}{v_0} \\right)^2\n$$\n\nThe upward velocity of the particle as it leaves the electric field is\n$$\nv_{y1} = a t_1 = \\frac{qEL}{mv_0}\n$$\n\nOutside the electric field, the particle is not subjected to any external forces and continues in straight-line motion at a constant speed. The time spent moving outside the field is\n$$\nt_2 = \\frac{D}{v_0}\n$$\n\nThe upward displacement outside the field is\n$$\ny_2 = v_{y1} t_2 = \\left( \\frac{qEL}{mv_0} \\right) \\left( \\frac{D}{v_0} \\right) = \\frac{qELD}{mv_0^2}\n$$\n\nThe total upward displacement is\n$$\ny = y_1 + y_2 = \\frac{qE}{2m} \\left( \\frac{L^2}{v_0^2} \\right) + \\frac{qELD}{mv_0^2} = \\frac{qEL(L + 2D)}{2mv_0^2}\n$$\n\nThe charge-to-mass ratio of the charged particle is\n$$\n\\frac{q}{m} = \\frac{2yv_0^2}{E L (L + 2D)}\n$$\n\nThe value of the electric field can be determined from the voltage and distance between the parallel charged plates, and the particle's initial velocity $v_0$ can be controlled by the velocity selector. Thus, all data except for the charge-to-mass ratio can be measured experimentally.\n\nElectron charge-to-mass ratio force formula:\n    if(-L <= charge.pos.x <= 0): F = q*E_field\n    else: F = vec(0, 0, 0)\n\nPlease write a Vpython program for \"Electron Charge-to-Mass Ratio\":\n\nAt (0,5,0) and (0,-5,0), there are two horizontal and parallel blue charged plates, each 10 cm long. At (10,0,0) there is a blue charged plate that is 10 cm high and 5 cm wide along the z-axis. A green arrow representing the electric field points from (-5,5,0) to (-5,-5,0) and is labeled \"E\". The electric field exists only between the two parallel blue charged plates.\n\nA red particle starts from (0,0,0). This particle is a red ball with a radius of 0.005 m, and it moves horizontally following the formula for the electron charge-to-mass ratio, affected by the electric field between the two parallel blue charged plates. The motion stops when it hits the charged blue plate. Please draw the trajectory of the red particle as it moves through the gap between the two baffles and stops at the position (7,0,0).\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not scale down the scene.\n(4) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Constants\nq = 1.6e-19\nm = 9.11e-31\nL = 0.1\nD = 0.1\nE_field = vec(0, -200, 0)\nv0 = 1e6\nRadius_I = 1\n\n# Scene\nscene = canvas(width=800, height=800, background=vec(0.5,0.5,0))\n\n# Objects\nupper_plate = box(pos=vec(-L/2, 5, 0), size=vec(L, 0.2, 10), color=color.blue)\nlower_plate = box(pos=vec(-L/2, -5, 0), size=vec(L, 0.2, 10), color=color.blue)\nscreen = box(pos=vec(D, 0, 0), size=vec(0.2, 10, 5), color=color.blue)\nE_arrow = arrow(pos=vec(-5, 5, 0), axis=vec(0, -10, 0), color=color.green)\nE_label = label(pos=vec(-5, 5, 0), text='E', space=scene.width/4, height=10, color=color.green, box=False)\n\n# Electron\nelectron = sphere(pos=vec(0, 0, 0), radius=0.005*Radius_I, color=color.red, make_trail=True)\nelectron.v = vec(v0, 0, 0)\n\n# Time variables\ndt = 1e-11\nt1 = L/v0\nt2 = D/v0\n\n# Animation loop\nwhile electron.pos.x < D:\n    rate(1000)\n    \n    if -L <= electron.pos.x <= 0:\n        F = q*E_field\n    else:\n        F = vec(0, 0, 0)\n        \n    electron.v = electron.v + F/m*dt\n    electron.pos = electron.pos + electron.v*dt",
      "mode": "initial",
      "timestamp": "2024-07-26 02:07:32",
      "serial_number": 1
    }
  ]
}