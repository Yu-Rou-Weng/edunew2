{
  "session_id": 872,
  "log": [
    {
      "input": "1. Screen Settings\nSet the canvas width to 700 and the height to 400. Please draw the trajectory of the ball's movement. The center point of the canvas needs to be correctly set, therefore the sequence of writing the Parameter Settings must follow after the Screen Settings.\n\n2. Object Motion & Parameter Settings\nPlease create a horizontal projectile motion animation using VPython: Launch a horizontal ball, which bounces off the ground upon impact.\nDraw both the ball and the ground. Assume that the ball undergoes an elastic collision with the ground, only considering the effect of gravity. This means the ball accelerates downward under the influence of gravity and bounces up upon hitting the ground. Stop the motion of the ball after 6 seconds.\n\n3. Cyber Input Variable Mapping Information:\n\n(1) Define and initialize a Cyber Input Variable named `Speed_I` with an initial value set to 1. This variable represents the speed of the ball.\n\n(2) During the animation, if the value of the Speed_I variable changes, let the animation rerun with the updated ball speed.\n\n(3) Do not resize the scene.\n(4) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Screen Settings\nscene = canvas(width=700, height=400, center=vector(0, 0, 0), resizable=False)\n\n# Parameter Settings\ng = vector(0, -9.8, 0)    # Gravity\nt = 0    # Time\ndt = 0.01    # Time step\nspeed_I = 1    # Initial speed\nball = sphere(pos=vector(-5, 0, 0), radius=0.5, color=color.red)    # Ball\nfloor = box(pos=vector(0, -10, 0), size=vector(20, 0.5, 10), color=color.green)    # Floor\nball.velocity = vector(speed_I, 0, 0)    # Ball's initial velocity\n\n# Object Motion\nwhile t < 6:\n    rate(100)    # 100 frames per second\n    ball.velocity = ball.velocity + g*dt    # Update velocity\n    ball.pos = ball.pos + ball.velocity*dt    # Update position\n    \n    # If the ball hits the ground, reverse its y velocity (elastic collision)\n    if ball.pos.y - ball.radius <= floor.pos.y + floor.size.y/2:\n        ball.velocity.y = -ball.velocity.y\n    \n    # If the Cyber Input Variable `Speed_I` changes, rerun the animation\n    if speed_I != ball.velocity.x:\n        ball.velocity.x = speed_I\n        ball.pos = vector(-5, 0, 0)    # Reset ball's position\n        t = 0    # Reset time\n    \n    t += dt    # Update time",
      "mode": "initial",
      "timestamp": "2024-08-16 18:27:07",
      "serial_number": 1
    }
  ]
}