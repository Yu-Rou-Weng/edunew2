{
  "session_id": 1016,
  "log": [
    {
      "input": "1. Screen Settings:</br>Set the canvas width to 700 and height to 400. Do not change the canvas size.</br>2. Object Motion & Parameter Settings:</br>Create a VPython animation to illustrate the following physics experiment:<br><span style=\"color:red;\">This is a simulation of projectile motion with only gravitational force acting on the object. The object is launched horizontally with an initial velocity \\( v_0 \\) from a height \\( h \\). The object accelerates downward due to gravity and bounces off the ground elastically when it hits the ground.</span>\n\n3. Cyber Input Variable Mapping Information:\n    (1) initial_velocity is mapped to the variable named Angle_I with an initial value set to a 1-dimensional value 5\n    (2) When the value of Angle_I changes, let the animation rerun to the starting point and start with the updated initial_velocity.\n    \n\n3. Cyber Input Variable Mapping Information:\n    (1) height is mapped to the variable named Gyroscope_I with an initial value set to a 3-dimensional vector [[0, 0, 4]]\n    (2) When the value of Gyroscope_I changes, let the animation rerun to the starting point and start with the updated height.",
      "output": "```python\nfrom vpython import *\n\n# Screen Settings\nscene.width = 700\nscene.height = 400\n\n# Parameters\ng = 9.81  # acceleration due to gravity in m/s^2\ndt = 0.01  # time step in seconds\n\n# Initialize Object\nball = sphere(pos=vector(0, 0, 0), radius=0.1, color=color.blue)\nground = box(pos=vector(0, -1, 0), size=vector(4, 0.1, 4), color=color.green)\n\n# Cyber Input Variable Mapping\ndef update_animation():\n    ball.pos = vector(0, 0, height[0][2])\n    ball.velocity = vector(initial_velocity, 0, 0)\n\ndef update_height():\n    global height\n    update_animation()\n\ndef update_initial_velocity():\n    global initial_velocity\n    update_animation()\n\n# Initial values\ninitial_velocity = 5\nheight = [[0, 0, 4]]\n\nupdate_animation()\n\nwhile True:\n    rate(100)\n    ball.velocity.y -= g * dt\n    ball.pos += ball.velocity * dt\n\n    if ball.pos.y < ball.radius:\n        ball.velocity.y = -ball.velocity.y\n\n    if ball.pos.y < ground.pos.y + ball.radius:\n        ball.pos.y = ground.pos.y + ball.radius\n        ball.velocity.y = -ball.velocity.y\n```",
      "mode": "initial",
      "timestamp": "2024-09-12 07:58:14",
      "serial_number": 1
    }
  ]
}