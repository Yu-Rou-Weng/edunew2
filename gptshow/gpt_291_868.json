{
  "session_id": 868,
  "log": [
    {
      "input": "Please write a \"Block-Spring System Elastic Collision\" VPython animation\n\n# One-Dimensional Elastic Collision\n\nAssume there are two blocks on a horizontal frictionless table, with masses $m_1$ and $m_2$, and velocities $v_1$ and $v_2$, respectively. After the collision, the velocities of the blocks become $v_1'$ and $v_2'$. Since the collision process is isolated from external forces, the system conserves momentum:\n$$\nm_1 v_1 + m_2 v_2 = m_1 v_1' + m_2 v_2' \\Rightarrow m_1 (v_1 - v_1') = m_2 (v_2' - v_2) \\quad (1)\n$$\n\nIf no energy is lost during the collision, the total kinetic energy before and after the collision remains equal:\n$$\n\\frac{1}{2} m_1 v_1^2 + \\frac{1}{2} m_2 v_2^2 = \\frac{1}{2} m_1 v_1'^2 + \\frac{1}{2} m_2 v_2'^2\n$$\n$$\nm_1 (v_1^2 - v_1'^2) = m_2 (v_2'^2 - v_2^2)\n$$\n$$\nm_1 (v_1 + v_1') (v_1 - v_1') = m_2 (v_2' + v_2) (v_2' - v_2) \\quad (2)\n$$\n\nDividing equation (2) by equation (1) we obtain:\n$$\nv_1 + v_1' = v_2' + v_2 \\Rightarrow\n\\begin{cases}\nv_1' = v_2' + v_2 - v_1 \\quad (3) \\\\\nv_2' = v_1 + v_1' - v_2 \\quad (4)\n\\end{cases}\n$$\n\nSubstituting equation (4) into equation (1) yields:\n$$\nm_1 (v_1 - v_1') = m_2 [(v_1 + v_1' - v_2) - v_2]\n$$\n$$\n(m_1 + m_2) v_1' = (m_1 - m_2) v_1 + 2 m_2 v_2 \\Rightarrow v_1' = \\frac{m_1 - m_2}{m_1 + m_2} v_1 + \\frac{2 m_2}{m_1 + m_2} v_2\n$$\n\nSubstituting equation (3) into equation (1) yields:\n$$\nm_1 [v_1 - (v_2' + v_2 - v_1)] = m_2 (v_2' - v_2)\n$$\n$$\n(m_1 + m_2) v_2' = 2 m_1 v_1 + (m_2 - m_1) v_2 \\Rightarrow v_2' = \\frac{2 m_1}{m_1 + m_2} v_1 + \\frac{m_2 - m_1}{m_1 + m_2} v_2\n$$\n\nProgram should be written: directly substituting the post-collision velocity formulas\n\n![image](https://hackmd.io/_uploads/S1x8VjadA.png)\n\n![image](https://hackmd.io/_uploads/H14w4jpOC.png)\nScreenshot of the one-dimensional elastic collision program\n\nParameter Settings\n\nHere, variables are set for the block's width, mass, initial velocity, color, x-axis range, time, and time interval. The time interval dt is set to 0.0005, as setting it to 0.001 would result in larger errors when calculating block energy, thus a smaller value is chosen. A white spring 3 cm in width is attached to the right side of the green block to act as a buffer during collisions. There will be a floor.\n\nScreen Setup\n\nThe code for generating the animation window, floor, blocks, and graphing window has appeared many times in previous animations and will not be repeated here.\n\nCustom Functions\n\nLines 36 to 39 of the code define a function named af_col_v, which accepts parameters (m1, m2, v1, v2) and returns the velocities v1_prime, v2_prime after the collision. This function is called on line 58 of the code:\n\nb1.v.x, b2.v.x = af_col_v(m1, m2, b1.v.x, b2.v.x)\nAs the function returns two values, the program assigns the first return value to b1.v.x and the second to b2.v.x.\n\nObject Movement\n\nThe animation stops when the blocks reach the edge, so the while loop condition is set as:\n\nb2.pos.x <= xmax - d2/2 and b1.pos.x >= xmin + d1/2\nIf the distance between the centers of the two blocks is less than (d1 + d2) / 2, it indicates that a collision has occurred between the blocks, and the custom function af_col_v is called to calculate the post-collision velocities.\n\nUpdate block positions.\n\nBoth the red and green blocks have a width of 0.1. A spring with a length of 2 is tied to the right side of the green block. The spring is not connected to the red block; make the spring thicker and denser. When the red block hits the spring, the block-spring system undergoes the aforementioned elastic collision, and the red block moves back in its original direction.\n\nSpecial note: A 3 cm spring should be tied to the left side of the green block, attached to the green block, and will only move with the green block, not separating. The spring will only connect to the green block, not to the red block.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Speed_I as a cyber input variable, set Speed_I=1\n(2) Speed_I is the Initial velocity of b1. When Speed_I changes to a new value, the Initial velocity of b1 also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Function to calculate post-collision velocities\ndef af_col_v(m1, m2, v1, v2):\n    v1_prime = ((m1 - m2) * v1 + 2 * m2 * v2) / (m1 + m2)\n    v2_prime = ((m2 - m1) * v2 + 2 * m1 * v1) / (m1 + m2)\n    return v1_prime, v2_prime\n\n# Parameter settings\nm1, m2 = 0.1, 0.2\nv1, v2 = 1, 0\nd1, d2 = 0.1, 0.1\nxmax, xmin = 0.5, -0.5\nt, dt = 0, 0.0005\n\n# Screen setup\nscene = canvas(title=\"Block-Spring System Elastic Collision\", width=600, height=300, x=0, y=0, center=vector(0,0,0), background=vector(0.5,0.5,0))\nfloor = box(pos=vector(0,-0.005,0), length=1, height=0.01, width=0.1)\nb1 = box(pos=vector(xmin+d1/2,0,0), length=d1, height=d1, width=d1, color=color.red, v=vector(v1,0,0), m=m1)\nb2 = box(pos=vector(xmax-d2/2,0,0), length=d2, height=d2, width=d2, color=color.green, v=vector(v2,0,0), m=m2)\nspring = helix(pos=b2.pos, axis=vector(-0.03,0,0), radius=d2/4, thickness=d2/10, coils=10)\n\n# Object movement\nwhile b2.pos.x <= xmax - d2/2 and b1.pos.x >= xmin + d1/2:\n    rate(1000)\n    if abs(b1.pos.x - b2.pos.x) <= (d1 + d2) / 2:\n        b1.v.x, b2.v.x = af_col_v(m1, m2, b1.v.x, b2.v.x)\n    b1.pos.x += b1.v.x * dt\n    b2.pos.x += b2.v.x * dt\n    spring.pos = b2.pos",
      "mode": "initial",
      "timestamp": "2024-07-26 12:36:30",
      "serial_number": 1
    }
  ]
}