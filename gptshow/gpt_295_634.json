{
  "session_id": 634,
  "log": [
    {
      "input": "Three-Dimensional Elastic Collision, m1 \u2260 m2\n\nThis program primarily references the lecture notes \"VPhysics Freshman Course: Collision\" by Professor Ming-Feng Shih from the Department of Physics at National Taiwan University, but the code has been rewritten in Python 3.X format. After completing this program, it can be used to simulate collisions between ideal gas molecules, producing a graph of molecule number distribution versus speed. However, as this program is complex, please refer to the VPython example program \"A hard-sphere gas.\"\n\n### Program to be written: Three-Dimensional Elastic Collision, m1 \u2260 m2, with separately settable masses for both spheres\n\n### Theoretical Derivation\n\nAssuming there are two elastic spheres of equal size in space, with masses $m_1$ and $m_2$ and initial velocities $v_1$ and $v_2$, derive the formula for the velocities of the spheres after collision. The known special case when the masses are equal is:\n\n$$\nv_1' = v_1 + \\frac{(v_2 - v_1) \\cdot (r_1 - r_2)}{|r_1 - r_2|^2} (r_1 - r_2)\n$$\n\n$$\nv_2' = v_2 + \\frac{(v_1 - v_2) \\cdot (r_2 - r_1)}{|r_2 - r_1|^2} (r_2 - r_1)\n$$\n\nProof:\nAssume that the change in momentum of the spheres at the moment of collision is $\\Delta p$, then:\n\n$$\n\\Delta p_1 = \\Delta p \\frac{r_1 - r_2}{|r_1 - r_2|}\n$$\n\n$$\n\\Delta p_2 = - \\Delta p_1 = \\Delta p \\frac{r_2 - r_1}{|r_2 - r_1|}\n$$\n\nThe momenta of the spheres after the collision are:\n\n$$\np_1' = p_1 + \\Delta p_1 \\Rightarrow m_1 v_1' = m_1 v_1 + \\Delta p \\frac{r_1 - r_2}{|r_1 - r_2|}\n$$\n\n$$\np_2' = p_2 + \\Delta p_2 \\Rightarrow m_2 v_2' = m_2 v_2 + \\Delta p \\frac{r_2 - r_1}{|r_2 - r_1|}\n$$\n\nSince the collision is elastic, there is no loss of kinetic energy before and after the collision:\n\n$$\n\\frac{1}{2} m_1 v_1^2 + \\frac{1}{2} m_2 v_2^2 = \\frac{1}{2} m_1 v_1'^2 + \\frac{1}{2} m_2 v_2'^2\n$$\n\nSubstituting $v_1'$ and $v_2'$ into the equation and multiplying by 2 gives:\n\n$$\nm_1 v_1^2 + m_2 v_2^2 = m_1 \\left[ v_1 + \\Delta p \\frac{(r_1 - r_2)}{m_1 |r_1 - r_2|} \\right]^2 + m_2 \\left[ v_2 + \\Delta p \\frac{(r_2 - r_1)}{m_2 |r_2 - r_1|} \\right]^2\n$$\n\nSince $(r_1 - r_2)^2 = |r_1 - r_2|^2$, the equation simplifies to:\n\n$$\n2 \\Delta p \\frac{(v_1 - v_2) \\cdot (r_1 - r_2)}{|r_1 - r_2|} + (\\Delta p)^2 \\left( \\frac{1}{m_1} + \\frac{1}{m_2} \\right) = 0\n$$\n\n$$\n\\Delta p = \\frac{2 m_1 m_2}{m_1 + m_2} \\frac{(v_2 - v_1) \\cdot (r_1 - r_2)}{|r_1 - r_2|}\n$$\n\nSubstituting back into the formulas above gives the post-collision velocities:\n\n$$\nv_1' = v_1 + \\frac{2 m_2}{m_1 + m_2} \\frac{(v_2 - v_1) \\cdot (r_1 - r_2)}{|r_1 - r_2|^2} (r_1 - r_2)\n$$\n\n$$\nv_2' = v_2 + \\frac{2 m_1}{m_1 + m_2} \\frac{(v_1 - v_2) \\cdot (r_2 - r_1)}{|r_2 - r_1|^2} (r_2 - r_1)\n$$\n\nScreenshot:\n![image](https://hackmd.io/_uploads/BkrN9s6O0.png)\n\n### Program Design\n\nThree-Dimensional Elastic Collision, m1 = m2:\nParameter settings\nSet variables for the sphere's radius, mass, color, initial velocity, screen dimensions, time, and time intervals. Refer to the variable names in the code.\n\nScreen Setup\nCode for generating the animation window, spheres, and drawing window has appeared many times before and is not detailed here.\n\nCustom Function\nThe custom function af_col_v calculates the post-collision velocity, where:\n\nv1_prime = v1 + dot((v2 - v1), (x1 - x2)) / mag2(x1 - x2) * (x1 - x2)\nv2_prime = v2 + dot((v1 - v2), (x2 - x1)) / mag2(x2 - x1) * (x2 - x1)\n\nThis function applies two vector calculations:\n\ndot(a, b): computes the dot product of vectors a and b\nmag2(a) = a.mag2: calculates the square of the magnitude of vector a\n\nObject Motion\nUpdates the positions of the spheres.\nIf mag(b1.pos - b2.pos) <= r1 + r2 and dot((b1.pos - b2.pos), (b1.v - b2.v)) <=0, it indicates a collision between b1 and b2. Insert b1.v, b2.v, b1.pos, and b2.pos into the custom function af_col_v to calculate the post-collision velocity, then reassign to b1.v and b2.v.\n\nThe program for Three-Dimensional Elastic Collision, m1 \u2260 m2, is almost identical to that for m1 = m2, except that the formula for calculating the post-collision velocity is modified for differing masses.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\nRadius_I = 1\nb1 = sphere(pos=vector(-2, 0, 0), radius=Radius_I, color=color.red)\nb2 = sphere(pos=vector(2, 0, 0), radius=Radius_I, color=color.green)\nb1.m = 2\nb2.m = 1\nb1.v = vector(0.1, 0.1, 0)\nb2.v = vector(-0.1, 0, 0)\n\ndef af_col_v(m1, m2, v1, v2, x1, x2): \n    v1f = v1 + 2*m2/(m1+m2)*dot(v2-v1, x1-x2)/mag2(x1-x2)*(x1-x2)\n    v2f = v2 + 2*m1/(m1+m2)*dot(v1-v2, x2-x1)/mag2(x2-x1)*(x2-x1)\n    return v1f, v2f\n\ndt = 0.01\nwhile True:\n    rate(100)\n    b1.pos = b1.pos + b1.v*dt\n    b2.pos = b2.pos + b2.v*dt\n    if mag(b1.pos - b2.pos) <= Radius_I * 2 and dot((b1.pos - b2.pos), (b1.v - b2.v)) <= 0:\n        b1.v, b2.v = af_col_v(b1.m, b2.m, b1.v, b2.v, b1.pos, b2.pos)",
      "mode": "initial",
      "timestamp": "2024-07-24 06:23:00",
      "serial_number": 1
    }
  ]
}