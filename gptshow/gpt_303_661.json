{
  "session_id": 661,
  "log": [
    {
      "input": "Speed Selector with Added Baffle at the Exit\n\n# Speed Selector\n\nA speed selector is a device used to filter charged particles with specific speeds. The basic structure is shown in the diagram below. Two parallel charged plates create a downward electric field, combined with a magnetic field perpendicular to the plane of the paper. If a positively charged particle enters the speed selector from the left side at a horizontal speed \\(v\\), the particle will experience a downward electrostatic force and an upward magnetic force. When the resultant force is zero, the particle moves forward at a constant speed. At this point:\n$$\nqE = qvB \\Rightarrow v = \\frac{E}{B} = \\frac{V}{Bd}\n$$\n\nIf a baffle with only a small hole is added on the right side, only particles moving straight right can pass through. By changing the magnitude of the electric and magnetic fields, the speed of the particles passing through the device can be controlled. There are two programs:\n\n- Program 20-1: Draws the electric field, magnetic field, parallel charged plates, and particle trajectories. The particle stops moving after hitting the parallel charged plates.\n- Program 20-2: Based on 20-1, adds a baffle at the exit.\n\nProgram to be written: 20-2: Based on 20-1, with a baffle added at the exit.\n\n### Program Design\n\nOnly three modifications were made:\n\nAdding a baffle at the exit:\n```python\nb1 = box(pos=vec(L/2, d/4 + size, 0), size=vec(0.01*L, 0.5*d, L), color=color.gray(0.7))\nb2 = box(pos=vec(L/2, -d/4 - size, 0), size=vec(0.01*L, 0.5*d, L), color=color.gray(0.7))\n```\nModification of the while loop conditions:\n```python\n(charge.pos.x + size + b1.length/2 < L/2 and abs(charge.pos.y) < d/2 - p1.height - size) or \\\n(L/2 < charge.pos.x + size + b1.length/2 < L and abs(charge.pos.y) < 0.1*size)\n```\n(a) First part's effect: Animation continues as long as the particle is between the parallel charged plates and hasn't hit them yet.\n(b) Second part's effect: Animation continues as long as the particle hasn't reached the edge of the screen or hit the baffle.\n\n### Simulation Results\n\nBelow are five different data combinations and their results:\n\n1. \\(v0 = 10\\), \\(V = 1\\), \\(d = 0.1\\), \\(B = 1\\) \u21d2 Uniform straight-line motion\n![image](https://hackmd.io/_uploads/Hk0Ywhp_A.png)\n\n2. \\(q > 0\\), \\(v0 = 20\\) other conditions same as combination 1 \u21d2 Upward shift\n![image](https://hackmd.io/_uploads/SyQcD3puR.png)\n\n3. \\(q > 0\\), \\(d = 0.2\\) other conditions same as combination 1 \u21d2 Upward shift\n![image](https://hackmd.io/_uploads/Byqcv26uC.png)\n\n4. \\(q > 0\\), \\(V = 2\\) other conditions same as combination 1 \u21d2 Downward shift\n![image](https://hackmd.io/_uploads/S1RqDhadC.png)\n\n5. \\(q > 0\\), \\(B = 5\\) other conditions same as combination 1 \u21d2 Upward shift\n![image](https://hackmd.io/_uploads/SJviDn6OR.png)\n\n### Cyber Input Variable Mapping Information:\n\n1. Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n2. Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(1) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Constants\nL = 1  # length of the box\nd = 0.1  # distance between 2 plates\nsize = 0.01  # size of the ball\nq = 1  # charge of the ball\nV = 1  # potential difference between 2 plates\nB = 1  # magnetic field\n\n# Objects\nscene = canvas(width=600, height=600, background=vec(0.5, 0.5, 0))\nbox_bottom = box(pos=vec(L/2, -d/4, 0), size=vec(L, d/2, L), color=color.blue)\nbox_top = box(pos=vec(L/2, d/4, 0), size=vec(L, d/2, L), color=color.red)\nball = sphere(pos=vec(0, 0, 0), radius=size, color=color.yellow, v=vec(V/d, 0, 0))\nb1 = box(pos=vec(L/2, d/4 + size, 0), size=vec(0.01*L, 0.5*d, L), color=color.gray(0.7))\nb2 = box(pos=vec(L/2, -d/4 - size, 0), size=vec(0.01*L, 0.5*d, L), color=color.gray(0.7))\n\n# Animation\ndt = 0.001\nwhile True:\n    rate(1000)\n    ball.pos += ball.v*dt\n    ball.v.y += (q*V/d - q*ball.v.x*B)*dt\n    if (ball.pos.x + size + b1.length/2 < L/2 and abs(ball.pos.y) < d/2 - box_bottom.height - size) or \\\n    (L/2 < ball.pos.x + size + b1.length/2 < L and abs(ball.pos.y) < 0.1*size):\n        break",
      "mode": "initial",
      "timestamp": "2024-07-24 07:26:09",
      "serial_number": 1
    }
  ]
}