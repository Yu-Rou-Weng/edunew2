{
  "session_id": 810,
  "log": [
    {
      "input": "# Electron Charge-to-Mass Ratio\n\nThe experimental setup for measuring the electron charge-to-mass ratio is shown below, resembling the appearance of a velocity selector. Hence, by making slight modifications to the \"Velocity Selector\" program, we can create an animation for the electron charge-to-mass ratio experiment.\n\n### Schematic Diagram of the Experimental Setup\n![image](https://hackmd.io/_uploads/SkTFu36OR.png)\n\n## Theoretical Analysis\n\nRefer to the above diagram, where the particle has a mass $m$ and a charge $q$, entering a downward uniform electric field $E$ with a horizontal velocity $v_0$ to the right. The length of the parallel charged plates is $L$, and the distance from the right side of the plates to the screen is $D$. Considering only the effect of the electrostatic force, the acceleration of the particle upward in the electric field is\n$$\na = \\frac{qE}{m}\n$$\n\nThere is no external force horizontally, so it moves at a constant speed, hence the time spent in the electric field is\n$$\nt_1 = \\frac{L}{v_0}\n$$\n\nThe upward displacement is\n$$\ny_1 = \\frac{1}{2} a t_1^2 = \\frac{1}{2} \\left( \\frac{qE}{m} \\right) \\left( \\frac{L}{v_0} \\right)^2\n$$\n\nThe upward velocity of the particle on leaving the electric field is\n$$\nv_{y1} = a t_1 = \\frac{qEL}{mv_0}\n$$\n\nOutside the electric field, the particle moves in a straight line at constant speed. The time spent moving outside the field is\n$$\nt_2 = \\frac{D}{v_0}\n$$\n\nThe upward displacement is\n$$\ny_2 = v_{y1} t_2 = \\left( \\frac{qEL}{mv_0} \\right) \\left( \\frac{D}{v_0} \\right) = \\frac{qELD}{mv_0^2}\n$$\n\nThe total upward displacement is\n$$\ny = y_1 + y_2 = \\frac{qE}{2m} \\left( \\frac{L^2}{v_0^2} \\right) + \\frac{qELD}{mv_0^2} = \\frac{qEL(L + 2D)}{2mv_0^2}\n$$\n\nThe charge-to-mass ratio of the charged particle is\n$$\n\\frac{q}{m} = \\frac{2yv_0^2}{E L (L + 2D)}\n$$\n\nThe magnitude of the electric field can be determined by the voltage and distance between the parallel charged plates, and the initial velocity $v_0$ can be controlled by the velocity selector. Therefore, in the experiment, all data except the charge-to-mass ratio can be measured.\n\nElectron charge-to-mass ratio force formula:\n    if(-L <= charge.pos.x <= 0): F = q*E_field\n    else: F = vec(0, 0, 0)\n\nWrite a Vpython program for \"Electron Charge-to-Mass Ratio\":\n\nAt (0,5,0) and (0,-5,0), there are two horizontal, parallel blue charged plates extending 5 cm in the Z-axis direction, each plate being 10 cm long. At (10,0,0), there is a blue charged plate that is 10 cm high and 5 cm wide along the z-axis. A green arrow represents the electric field, pointing from (-5,5,0) to (-5,-5,0), labeled as \"E\". The electric field exists only between the two parallel blue charged plates.\n\nA red particle starts from (0,0,0). This particle is a red sphere with a radius of 0.005, influenced by the electric field between the two parallel blue charged plates, it begins its motion according to the electron charge-to-mass ratio force law, stopping when it hits the charged blue plate. Please plot the trajectory of the red particle's movement. The red particle stops its motion when it reaches the position at (7,0,0), passing through the gap between the two baffles.\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not scale down the scene.\n(4) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Constants\nL = 0.1  # length of the electric field region \nD = 0.1  # distance between the electric field region and the screen\nE = 1e4  # electric field strength\nv0 = 1e6  # initial speed of the electron\nq = 1.6e-19  # charge of the electron\nm = 9.1e-31  # mass of the electron\nRadius_I = 1  # radius of the electron\n\n# Scene\nscene = canvas(width=800, height=800, center=vec(0.05,0,0), background=vec(0.5,0.5,0))\nscene.camera.pos = vec(-0.5,0,0)\nscene.camera.axis = vec(1,0,0)\nscene.camera.up = vec(0,0,1)\nscene.fov = 0.01\nscene.range = 0.07\nscene.userspin = False\nscene.userzoom = False\n\n# Objects\nupper_plate = box(pos=vec(-L/2, 0.05, 0), size=vec(L, 0.001, 0.05), color=color.blue)\nlower_plate = box(pos=vec(-L/2, -0.05, 0), size=vec(L, 0.001, 0.05), color=color.blue)\nscreen = box(pos=vec(L+D, 0, 0), size=vec(0.001, 0.1, 0.05), color=color.blue)\nE_arrow = arrow(pos=vec(-L/2, 0.05, 0), axis=vec(0, -0.1, 0), color=color.green, shaftwidth=0.005)\nE_label = label(pos=vec(-L/2, 0.05, 0), text='E', xoffset=20, yoffset=-20, space=30, height=16, border=4, font='sans')\nelectron = sphere(pos=vec(0, 0, 0), radius=Radius_I*0.005, color=color.red, make_trail=True, v=vec(v0, 0, 0), a=vec(0, q*E/m, 0))\n\n# Animation\ndt = 1e-10\nwhile electron.pos.x < L+D:\n    rate(1e4)\n    if electron.pos.x < L:\n        electron.a = vec(0, q*E/m, 0)\n    else:\n        electron.a = vec(0, 0, 0)\n    electron.v += electron.a*dt\n    electron.pos += electron.v*dt",
      "mode": "initial",
      "timestamp": "2024-07-26 02:23:39",
      "serial_number": 1
    }
  ]
}