{
  "session_id": 633,
  "log": [
    {
      "input": "# Three-Dimensional Elastic Collision, m1 = m2\n\nThis program is mainly based on the lecture notes \"VPhysics Freshman Course: Collision\" from Professor Ming-Feng Shih of the National Taiwan University Department of Physics. However, the code within has been rewritten into the Python 3.X format. After completing this program, it can be used to simulate collisions between ideal gas molecules and produce a graph of molecule quantity versus velocity distribution. However, since this program is quite complex, please refer to the VPython example program \"A hard-sphere gas.\"\n\nProgram to be written: Three-dimensional elastic collision, m1 = m2, both spheres have equal mass.\n\n### Theoretical Derivation\n\nAssume there are two elastic spheres of equal size in space, with masses $m_1$ and $m_2$ and initial velocities $v_1$ and $v_2$ respectively. Derive the formula for the velocities of the spheres after collision. The special case when masses are equal is given by:\n\n$$\nv_1' = v_1 + \\frac{(v_2 - v_1) \\cdot (r_1 - r_2)}{|r_1 - r_2|^2} (r_1 - r_2)\n$$\n\n$$\nv_2' = v_2 + \\frac{(v_1 - v_2) \\cdot (r_2 - r_1)}{|r_2 - r_1|^2} (r_2 - r_1)\n$$\n\nProof:  \nAssuming the change in momentum during the collision for the two spheres is $\\Delta p$, then\n\n$$\n\\Delta p_1 = \\Delta p \\frac{r_1 - r_2}{|r_1 - r_2|}\n$$\n\n$$\n\\Delta p_2 = - \\Delta p_1 = \\Delta p \\frac{r_2 - r_1}{|r_2 - r_1|}\n$$\n\nThe momenta of the spheres after the collision are:\n\n$$\np_1' = p_1 + \\Delta p_1 \\Rightarrow m_1 v_1' = m_1 v_1 + \\Delta p \\frac{r_1 - r_2}{|r_1 - r_2|}\n$$\n\n$$\np_2' = p_2 + \\Delta p_2 \\Rightarrow m_2 v_2' = m_2 v_2 + \\Delta p \\frac{r_2 - r_1}{|r_2 - r_1|}\n$$\n\nSince the collision is elastic, there is no loss of kinetic energy before and after the collision:\n\n$$\n\\frac{1}{2} m_1 v_1^2 + \\frac{1}{2} m_2 v_2^2 = \\frac{1}{2} m_1 v_1'^2 + \\frac{1}{2} m_2 v_2'^2\n$$\n\nSubstituting $v_1'$ and $v_2'$ into the equation and multiplying by 2:\n\n$$\nm_1 v_1^2 + m_2 v_2^2 = m_1 \\left[ v_1 + \\Delta p \\frac{(r_1 - r_2)}{m_1 |r_1 - r_2|} \\right]^2 + m_2 \\left[ v_2 + \\Delta p \\frac{(r_2 - r_1)}{m_2 |r_2 - r_1|} \\right]^2\n$$\n\nSince $(r_1 - r_2)^2 = |r_1 - r_2|^2$, the equation simplifies to:\n\n$$\n2 \\Delta p \\frac{(v_1 - v_2) \\cdot (r_1 - r_2)}{|r_1 - r_2|} + (\\Delta p)^2 \\left( \\frac{1}{m_1} + \\frac{1}{m_2} \\right) = 0\n$$\n\n$$\n2 \\frac{(v_1 - v_2) \\cdot (r_1 - r_2)}{|r_1 - r_2|} + \\Delta p \\frac{m_1 + m_2}{m_1 m_2} = 0\n$$\n\n$$\n\\Delta p = \\frac{2 m_1 m_2}{m_1 + m_2} \\frac{(v_2 - v_1) \\cdot (r_1 - r_2)}{|r_1 - r_2|}\n$$\n\nSubstituting into the top two formulas yields the post-collision velocities:\n\n$$\nv_1' = v_1 + \\frac{2 m_2}{m_1 + m_2} \\frac{(v_2 - v_1) \\cdot (r_1 - r_2)}{|r_1 - r_2|^2} (r_1 - r_2)\n$$\n\n$$\nv_2' = v_2 + \\frac{2 m_1}{m_1 + m_2} \\frac{(v_1 - v_2) \\cdot (r_2 - r_1)}{|r_2 - r_1|^2} (r_2 - r_1)\n$$\n\nScreenshot:\n![image](https://hackmd.io/_uploads/Hyuy9sTdR.png)\n\nParameter Settings\nSet variables for the radius, mass, color, initial velocity of the ball, screen size, time, and time interval. Refer to the variable names in the code.\n\nScreen Settings\nCode for creating the animation window, ball, and drawing window has been frequently used in previous animations and will not be repeated here.\n\nCustom Function\nThe custom function af_col_v calculates the velocity after collision. In this function:\n\nv1_prime = v1 + dot((v2 - v1), (x1 - x2)) / mag2(x1 - x2) * (x1 - x2)\nv2_prime = v2 + dot((v1 - v2), (x2 - x1)) / mag2(x2 - x1) * (x2 - x1)\nThese formulas from the theoretical derivation are implemented in the code, utilizing two vector calculations:\n\ndot(a, b): Takes the dot product of vectors a and b\nmag2(a) = a.mag2: Calculates the square of the magnitude of vector a\n\nObject Motion\nUpdate the position of the balls. If mag(b1.pos - b2.pos) <= r1 + r2 and dot((b1.pos - b2.pos), (b1.v - b2.v)) <= 0, it indicates that b1 and b2 have collided. Substitute b1.v, b2.v, b1.pos, and b2.pos into the custom function af_col_v to calculate the velocity after collision, then reassign to b1.v and b2.v.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Parameter Settings\nRadius_I = 1\nm1 = 1\nm2 = 1\nv1 = vector(0.5, 0, 0)\nv2 = vector(-0.5, 0, 0)\nr1 = Radius_I\nr2 = Radius_I\n\n# Screen Settings\nscene = canvas(width=800, height=800, background=vector(1,1,1))\nball1 = sphere(radius=r1, color=color.red, pos=vector(-3,0,0))\nball2 = sphere(radius=r2, color=color.blue, pos=vector(3,0,0))\nball1.m = m1\nball2.m = m2\nball1.v = v1\nball2.v = v2\ndt = 0.001\n\n# Custom Function for Calculating the Velocity After Collision\ndef af_col_v(v1, v2, x1, x2):\n    v1_prime = v1 + dot((v2 - v1), (x1 - x2)) / mag2(x1 - x2) * (x1 - x2)\n    v2_prime = v2 + dot((v1 - v2), (x2 - x1)) / mag2(x2 - x1) * (x2 - x1)\n    return v1_prime, v2_prime\n\n# Object Motion\nwhile True:\n    rate(1000)\n    ball1.pos = ball1.pos + ball1.v * dt\n    ball2.pos = ball2.pos + ball2.v * dt\n    if mag(ball1.pos - ball2.pos) <= r1 + r2 and dot((ball1.pos - ball2.pos), (ball1.v - ball2.v)) <= 0:\n        ball1.v, ball2.v = af_col_v(ball1.v, ball2.v, ball1.pos, ball2.pos)",
      "mode": "initial",
      "timestamp": "2024-07-24 06:21:58",
      "serial_number": 1
    }
  ]
}