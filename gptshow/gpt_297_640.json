{
  "session_id": 640,
  "log": [
    {
      "input": "Gravitational Field: Could be Modified to Illustrate Different Planets\n\n# Gravitational Field and Electric Field\n\nConsider a sphere with mass $M$ and uniform mass distribution in space. If the center of the sphere with mass $M$ is taken as the origin, and the position vector at point $\\vec{r}$ in space, the gravitational field is given by:\n$$\n\\vec{g} = - \\frac{GM}{r^2} \\hat{r}\n$$\nThe negative sign in the formula indicates that the direction of the gravitational field points towards the center of the sphere. If there are multiple spheres, and the $i$-th sphere has mass $M_i$ and center at position $\\vec{r}_i$, then the gravitational field is:\n$$\n\\vec{g} = \\sum \\vec{g}_i = -G \\sum \\frac{M_i (\\vec{r} - \\vec{r}_i)}{|\\vec{r} - \\vec{r}_i|^3}\n$$\n\nIt is almost impossible to draw the intensity and direction of the gravitational field at each point on a blackboard. Below is a schematic diagram of Earth's gravitational field that I drew.\n\n### Earth's Gravitational Field Schematic\n\nIn the following lessons, we aim to take points at regular intervals in space and use the length and direction of arrows to represent the gravitational field at those points. Hence, we first practice using a for loop in the program \"Generating Arrows with a For Loop\" to draw an arrow at regular intervals in space. In the program \"Gravitational Field, Can Be Modified to Draw Different Planets,\" in addition to drawing arrows, we also calculate the gravitational field at that location and update the arrow\u2019s length and direction. If we can successfully display the gravitational field of a sphere, then in the program \"Gravitational Field, Can Be Modified to Draw Different Planets,\" we proceed further to illustrate the gravitational fields created by two or even multiple spheres.\n\nAfter drawing the gravitational fields, we can use the same method to illustrate the electric fields created by charged spheres in space, mathematically expressed as:\n$$\n\\vec{E} = \\sum \\vec{E}_i = k \\sum \\frac{Q_i (\\vec{r} - \\vec{r}_i)}{|\\vec{r} - \\vec{r}_i|^3}\n$$\nBy slightly modifying the program \"Gravitational Field, Can Be Modified to Draw Different Planets,\" we can illustrate the electric fields created by two charged spheres in space.\n\nProgram to be written: \"Gravitational Field, Can Be Modified to Draw Different Planets\"\n\nSince we have already collected a lot of planetary data in our previous course \"Planetary Motion,\" and learned how to use classes to create custom object types in the program \"Planetary Motion,\" we can combine \"Generating Arrows with a For Loop\" and \"Planetary Motion\" to develop the program \"Gravitational Field, Can Be Modified to Draw Different Planets.\" The main steps include:\n\n- Parameter settings.\n- Custom class Planet, adding a custom method g to return the gravitational field generated by this object at the input position pos.\n- Create an animation window, Earth.\n- Compute positions for drawing arrows. If not within Earth, add to the list locations.\n- Sequentially read elements from the list locations, generating arrows at corresponding positions.\n- Lines 49 to 55: Sequentially read the positions of arrows, compute the gravitational field at that location, and update the arrow\u2019s length and direction. Since the magnitude of the gravitational field is too small compared to the width of the display, it is necessary to scale the gravitational field by 1 \u00d7 106 to visualize the arrows on the screen. The maximum value in the gravitational field values is recorded as fmax, with larger values making the arrow color closer to red and smaller values making the color closer to green.\n\nScreenshot of the program \"Gravitational Field, Can Be Modified to Draw Different Planets\":\n![image](https://hackmd.io/_uploads/Bkf9y3adR.png)\n(1) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Constants\nG = 6.674e-11 # gravitational constant\nM = 6e24 # Earth's Mass\nR = 6.4e6 # Earth's radius\n\n# Define the class for a planet\nclass Planet:\n    def __init__(self, pos, mass):\n        self.pos = vec(pos[0], pos[1], pos[2])\n        self.mass = mass\n    def g(self, rpos):\n        r = rpos - self.pos\n        return -G * self.mass * r.hat / mag2(r)\n\n# Create Earth\nearth = Planet([0, 0, 0], M)\n\n# Create a list of locations for the arrows\nlocations = []\nfor x in range(-2, 3):\n    for y in range(-2, 3):\n        for z in range(-2, 3):\n            pos = vec(x, y, z) * R\n            if mag(pos) > R:\n                locations.append(pos)\n\n# Create the arrows at the locations\narrows = []\nfor pos in locations:\n    arrows.append(arrow(pos=pos, axis=vec(0,0,0), color=color.green))\n\n# Set the scale for the arrows\nscale = 1e6\nfmax = 0.0\n\n# Calculate the gravitational field at each arrow\nfor arr in arrows:\n    g = earth.g(arr.pos)\n    f = mag(g)\n    if f > fmax:\n        fmax = f\n    arr.axis = scale * g\n\n# Update the color of the arrows based on the magnitude of the field\nfor arr in arrows:\n    arr.color = vec(1, (fmax - mag(earth.g(arr.pos))) / fmax, 0)",
      "mode": "initial",
      "timestamp": "2024-07-24 06:35:15",
      "serial_number": 1
    }
  ]
}