{
  "session_id": 700,
  "log": [
    {
      "input": "Rutherford Scattering\n\nThe Rutherford scattering experiment is a significant piece of evidence for the existence of the atomic nucleus. In this experiment, alpha particles (helium nuclei) are directed toward a gold foil. The electrostatic force between the alpha particles and the gold nuclei is repulsive. Ignoring the effects of gravity, as the gold nuclei remain stationary, the electrostatic force experienced by the alpha particles as they pass by the gold nuclei conserves the angular momentum relative to the gold nuclei. Only the electrostatic force performs work between the alpha particles and the gold nuclei, conserving the mechanical energy of the system.\n\nRutherford Scattering Experiment Schematic:\n![image](https://hackmd.io/_uploads/H1zf236OC.png)\n\nThe diagram below is a schematic of the Rutherford scattering experiment. When the alpha particle is at an infinite distance, its velocity is directed to the right. The perpendicular distance between the gold nucleus and the direction of velocity is called the impact parameter, usually denoted by b. The goal of this program is to vary b, plot the relationship of the alpha particle's kinetic energy, system potential energy, mechanical energy with time, and find the value of the alpha particle's upward displacement.\n\nParameter Settings\n\nVariables are set as r1, m1, q1, c1, r2, m2, q2, c2, v0, b, L, k, t, dt, with their purposes written in the comments of each line. To facilitate numerical settings, the units of length are nanometers (nm), mass in atomic mass units (amu), charge in elementary charges (e), and time in nanoseconds (ns), with k assumed to be 1.\n\nScreen Setup\n- Create the animation window.\n- Generate the nucleus.\n- Produce arrows representing velocity and acceleration.\n- Create the plotting window.\n\nObject Motion\n- The animation continues while the particle is within -L/2 < x < L/2 and -L/2 < y < L/2, thus the condition in the while loop is set to (abs(alpha.pos.x) < L/2 and abs(alpha.pos.y) < L/2).\n- Calculate the net force on the helium nucleus, update the helium nucleus's acceleration, velocity, and position.\n- Update the arrows representing velocity and acceleration.\n- Calculate the helium nucleus's kinetic energy, system potential energy, mechanical energy and plot them.\n- Update time.\n![image](https://hackmd.io/_uploads/Sk5e6n6dC.png)\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Parameters\nr1, m1, q1, c1 = 1E-2, 4, 2, color.yellow  # alpha particle\nr2, m2, q2, c2 = 5E-2, 197, 79, color.yellow  # gold nucleus\nv0, b, L, k, t, dt = 2E-2, 0.5E-1, 3, 8.99E9, 0, 1E-3  # miscellaneous\n\n# Animation window\nscene = canvas(title=\"Rutherford Scattering\", width=600, height=600, center=vec(0, 0, 0), background=color.black)\n\n# Alpha particle\nalpha = sphere(pos=vec(-L/2, b, 0), radius=r1, color=c1, make_trail=True)\nalpha.m = m1\nalpha.q = q1\nalpha.v = vec(v0, 0, 0)\n\n# Gold nucleus\ngold = sphere(pos=vec(0, 0, 0), radius=r2, color=c2)\ngold.m = m2\ngold.q = q2\n\n# Arrows\nalpha.vel = arrow(pos=alpha.pos, axis=alpha.v, color=color.green)\nalpha.acc = arrow(pos=alpha.pos, axis=vec(0, 0, 0), color=color.red)\n\n# Plotting window\ngd = graph(title='Energy', xtitle='time', ytitle='Energy', width=600, height=600, background=color.white)\nk_energy = gcurve(graph=gd, color=color.red)\np_energy = gcurve(graph=gd, color=color.green)\nm_energy = gcurve(graph=gd, color=color.blue)\n\n# Object motion\nwhile (abs(alpha.pos.x) < L/2) and (abs(alpha.pos.y) < L/2):\n    rate(1000)\n    r = alpha.pos - gold.pos\n    F = k*alpha.q*gold.q*r.hat/r.mag2\n    alpha.v += F/alpha.m*dt\n    alpha.pos += alpha.v*dt\n    alpha.vel.pos = alpha.pos\n    alpha.vel.axis = alpha.v\n    alpha.acc.pos = alpha.pos\n    alpha.acc.axis = F/alpha.m\n    K = 0.5*alpha.m*alpha.v.mag2\n    U = k*alpha.q*gold.q/r.mag\n    E = K + U\n    k_energy.plot(pos=(t, K))\n    p_energy.plot(pos=(t, U))\n    m_energy.plot(pos=(t, E))\n    t += dt\n\n# Cyber input variable\nRadius_I = 1  # initialize Radius_I\nalpha.radius = Radius_I  # set the radius of the alpha particle to Radius_I",
      "mode": "initial",
      "timestamp": "2024-07-24 11:39:52",
      "serial_number": 1
    }
  ]
}