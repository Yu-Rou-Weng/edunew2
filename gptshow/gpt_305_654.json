{
  "session_id": 654,
  "log": [
    {
      "input": "# Electron Charge-to-Mass Ratio\n\nThe experimental setup used to measure the electron charge-to-mass ratio is illustrated below. Its appearance and the velocity selector are very similar, so by slightly modifying the <Velocity Selector> program, we can create an animation for the electron charge-to-mass ratio experiment.\n\n### Experimental Setup Diagram\n![image](https://hackmd.io/_uploads/SkTFu36OR.png)\n\n## Theoretical Analysis\n\nRefer to the diagram above, where the particle's mass is $m$, charge is $q$, and it enters a uniform downward electric field $E$ with a horizontal velocity $v_0$ to the right. The length of the charged parallel plates is $L$, and the distance from the right side of the parallel plates to the screen is $D$. Considering only the effect of the electrostatic force, the acceleration of the particle in the electric field is upward and given by:\n$$\na = \\frac{qE}{m}\n$$\n\nThere are no external forces horizontally, hence the particle moves at a constant speed. Thus, the time spent moving in the electric field is:\n$$\nt_1 = \\frac{L}{v_0}\n$$\n\nThe upward displacement is:\n$$\ny_1 = \\frac{1}{2} a t_1^2 = \\frac{1}{2} \\left( \\frac{qE}{m} \\right) \\left( \\frac{L}{v_0} \\right)^2\n$$\n\nThe upwards velocity of the particle upon leaving the electric field is:\n$$\nv_{y1} = a t_1 = \\frac{qEL}{mv_0}\n$$\n\nOutside the electric field, the particle moves in a straight line at constant speed. The time spent moving outside the electric field is:\n$$\nt_2 = \\frac{D}{v_0}\n$$\n\nThe upward displacement is:\n$$\ny_2 = v_{y1} t_2 = \\left( \\frac{qEL}{mv_0} \\right) \\left( \\frac{D}{v_0} \\right) = \\frac{qELD}{mv_0^2}\n$$\n\nThe total upward displacement is:\n$$\ny = y_1 + y_2 = \\frac{qE}{2m} \\left( \\frac{L^2}{v_0^2} \\right) + \\frac{qELD}{mv_0^2} = \\frac{qEL(L + 2D)}{2mv_0^2}\n$$\n\nThe charge-to-mass ratio of the charged particle is:\n$$\n\\frac{q}{m} = \\frac{2yv_0^2}{E L (L + 2D)}\n$$\n\nThe electric field strength can be calculated from the voltage and distance between the parallel charged plates, and the initial velocity $v_0$ can be controlled by the velocity selector. Thus, all data except for the charge-to-mass ratio can be measured in the experiment.\n\n### Parameter Configuration\n\nIn this configuration, variables such as size, m, v0, q, V, d, L, E_field, t, and dt are set, with their purposes described in the comments. To make the animation smoother, the particle's charge and mass are significantly increased.\n\n### Display Settings\nCreate an animation window, parallel charged plates, a horizontal line, and a charged particle. The parallel charged plates are positioned between -L < x < 0.\n\nGenerate arrows and labels representing the electric and magnetic fields.\n\nGenerate arrows representing velocity and acceleration.\n\n### Object Motion\nTo stop the animation when the charged particle reaches the screen or hits the parallel charged plate, set the condition in the while loop as: 0 < charge.pos.x < screen.pos.x - screen.length/2 - size or (charge.pos.x < 0 and abs(charge.pos.y) < d/2 - p1.height - size)\n(a) The first set of conditions: The animation continues while the particle is between the electric field and the screen.\n(b) The second set of conditions: The animation continues while the particle is in the electric field and does not hit the parallel charged plates.\n\nCalculate the net force on the charged particle, which is zero outside the area between the parallel charged plates.\n\nUpdate the particle's acceleration, velocity, and position.\n\nUpdate the arrows representing velocity and acceleration, drawing only their directions to avoid automatic resizing of the animation.\n\nTo draw a horizontal line when the charged particle leaves the parallel charged plates, define variables xp (the particle's position at the previous moment) and xc (the particle's current position). If xp < 0 and xc > 0, it indicates that the particle has just left the parallel charged plates. Use the cylinder command to draw a parallel line.\n\nUpdate the time.\n\n### Simulation Results\n\nBelow are six different data combinations and their test results:\n\n1. v0 = 20, q = -2 \u00d7 10^-9, V = 1, d = 0.1 \u21d2 Hits the parallel charged plate upwards.\n![image](https://hackmd.io/_uploads/B1w6O2TdR.png)\n\n2. q = -1 \u00d7 10^-9 Other conditions same as combination 1 \u21d2 Moves upwards without hitting the parallel charged plate.\n![image](https://hackmd.io/_uploads/Bkoa_naOC.png)\n\n3. v0 = 25 Other conditions same as combination 1 \u21d2 Moves upwards without hitting the parallel charged plate.\n![image](https://hackmd.io/_uploads/S11AunauA.png)\n\n4. q = 2 \u00d7 10^-9 Other conditions same as combination 1 \u21d2 Hits the parallel charged plate downwards.\n![image](https://hackmd.io/_uploads/S1NROhpO0.png)\n\n5. q = 1 \u00d7 10^-9 Other conditions same as combination 1 \u21d2 Moves downwards without hitting the parallel charged plate.\n![image](https://hackmd.io/_uploads/ryY0OnTu0.png)\n\n6. v0 = 25, q = 2 \u00d7 10^-9 Other conditions same as combination 1 \u21d2 Moves downwards without hitting the parallel charged plate.\n![image](https://hackmd.io/_uploads/rJpRO3TO0.png)\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Parameter Configuration\np1 = vec(0, -0.5, 0)  # The position of the bottom plate\np2 = vec(0, 0.5, 0)  # The position of the top plate\nL = 1  # The length of the parallel charged plates\nD = 0.5  # The distance from the right side of the parallel plates to the screen\nV = 100  # Voltage between the parallel charged plates\nd = abs(p2.y - p1.y)  # Distance between the parallel charged plates\nE_field = vec(0, -V/d, 0)  # Electric field vector\nv0 = 5  # Initial velocity of the charged particle\nm = 2E-3  # Mass of the charged particle\nq = -1E-5  # Charge of the charged particle\nR = 2E-2  # Radius of the charged particle\ndt = 1E-3  # Time step\nt = 0  # Initial time\n\n# Display Settings\nscene = canvas(x=0, y=0, width=800, height=800, center=vec(D/2, 0, 0), background=vec(0.5, 0.5, 0))\nplate1 = box(pos=p1, length=L, height=0.01, width=1, color=color.yellow)\nplate2 = box(pos=p2, length=L, height=0.01, width=1, color=color.yellow)\nscreen = box(pos=vec(L+D, 0, 0), length=0.01, height=1, width=1, color=color.green)\ncharge = sphere(pos=vec(-L/2, 0, 0), radius=R, color=color.red, v=vec(v0, 0, 0), a=vec(0, 0, 0), m=m, q=q)\ncharge.trail = curve(color=charge.color, radius=0.1*R)\nv_arrow = arrow(pos=charge.pos, axis=charge.v, shaftwidth=0.2*R, color=color.cyan)\na_arrow = arrow(pos=charge.pos, axis=charge.a, shaftwidth=0.2*R, color=color.magenta)\n\n# Object Motion\nxp = charge.pos.x  # The particle's position at the previous moment\nwhile xp > 0 or (charge.pos.x < 0 and abs(charge.pos.y) < d/2 - plate1.height - R):\n    charge.f = charge.q * E_field if charge.pos.x < 0 else vec(0, 0, 0)\n    charge.a = charge.f / charge.m\n    charge.v += charge.a * dt\n    charge.pos += charge.v * dt\n    v_arrow.pos = a_arrow.pos = charge.pos\n    v_arrow.axis = charge.v\n    a_arrow.axis = charge.a\n    t += dt\n    xc = charge.pos.x  # The particle's current position\n    if xp < 0 and xc >= 0:\n        cylinder(pos=charge.pos, axis=vec(0, 0, -1), radius=0.1*R)\n    xp = xc",
      "mode": "initial",
      "timestamp": "2024-07-24 07:18:54",
      "serial_number": 1
    }
  ]
}