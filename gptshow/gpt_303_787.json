{
  "session_id": 787,
  "log": [
    {
      "input": "Speed Selector with an Exit Baffle\n\n# Speed Selector\n\nA speed selector is a device used to filter charged particles with specific velocities. Its basic structure is illustrated below. Two parallel charged plates create a downward electric field, combined with a magnetic field perpendicular to the plane of the paper. If a positively charged particle enters the speed selector from the left side with a horizontal velocity $v$, it experiences a downward electrostatic force and an upward magnetic force. When these forces balance, the particle moves forward at a constant speed, where:\n$$\nqE = qvB \\Rightarrow v = \\frac{E}{B} = \\frac{V}{Bd}\n$$\n\nIf a baffle with only a small hole is added on the right side, only particles moving straight to the right can pass through. By changing the values of the electric and magnetic fields, the velocity of the particles passing through the device can be controlled. There are two programs:\n\n- Program 20-1: Draw the electric field, magnetic field, parallel charged plates, and the trajectory of the particle movement. The particle stops moving when it hits the parallel charged plates.\n- Program 20-2: Based on 20-1, add a baffle at the exit.\n\n## Parameter Settings\n\nVariables such as size, m, v0, q, V, d, L, B, E_field, B_field, t, dt are set here, with their purposes noted in the comments. To ensure smoother animation, the mass of the particle is much larger than the actual mass of a nucleus.\n\n## Screen Setup\n\nGenerate an animation window, parallel charged plates, a horizontal line, and a charged particle.\n\nGenerate arrows representing velocity and acceleration.\n\nGenerate arrows and labels for the electric field and magnetic field. The syntax for labels is:\n\n[label_name] = label(pos=[position vector], text=\"[label content]\", xoffset=[x-direction offset], yoffset=[y-direction offset], color=[color name or RGB value], font=\"[font name]\")\nReplace the contents in [] with the parameters you need.\n\nOpen the drawing window, display the position, velocity, acceleration, and time relationship of the sphere.\n\n## Object Motion\n\nTo stop the animation when the charged particle reaches the right side of the screen or hits the parallel charged plates, set the condition in the while loop as charge.pos.x < L and abs(charge.pos.y) < d/2 - p1.height - size.\n\nCalculate the net force on the charged particle, which only exists between the parallel charged plates, set to zero outside. The mathematical formula for the net force is:\n\n$$\n\\vec{F} = q(\\vec{E} + \\vec{v} \\times \\vec{B})\n$$\nCorresponding code:\n\nF = q*(E_field + cross(charge.v, B_field))\nUpdate the charged particle's acceleration, velocity, and position.\n\nUpdate the arrows representing velocity and acceleration, displaying only the direction to avoid automatic resizing of the animation.\n\nUpdate time.\n\n## Program Design Changes\n\nThree changes were made:\n\n1. Added a baffle at the exit.\n2. The operation conditions of the while loop were modified to:\n\n(charge.pos.x + size + b1.length/2 < L/2 and abs(charge.pos.y) < d/2 - p1.height - size) or \\\n(L/2 < charge.pos.x + size + b1.length/2 < L and abs(charge.pos.y) < 0.1*size)\n\n(a) The first part allows the animation to continue if the particle is between the parallel charged plates and has not yet collided with them.\n(b) The second part allows the animation to continue if the particle has not reached the edge of the screen and has not collided with the baffle.\n\n## Simulation Results\n\nHere are five different data combinations and test results:\n\n1. v0 = 10, V = 1, d = 0.1, B = 1 \u21d2 Straight-line motion at constant speed\n![image](https://hackmd.io/_uploads/Hk0Ywhp_A.png)\n\n2. q > 0, v0 = 20, other conditions same as combination 1 \u21d2 Upward shift\n![image](https://hackmd.io/_uploads/SyQcD3puR.png)\n\n3. q > 0, d = 0.2, other conditions same as combination 1 \u21d2 Upward shift\n![image](https://hackmd.io/_uploads/Byqcv26uC.png)\n\n4. q > 0, V = 2, other conditions same as combination 1 \u21d2 Downward shift\n![image](https://hackmd.io/_uploads/S1RqDhadC.png)\n\n5. q > 0, B = 5, other conditions same as combination 1 \u21d2 Upward shift\n![image](https://hackmd.io/_uploads/SJviDn6OR.png)\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Parameter Settings\nL = 1  # length of the speed selector\nd = 0.1  # distance between the charged plates\nsize = 0.01  # radius of the charge\nm = 1E-10  # mass of the charge\nv0 = 10  # initial velocity of the charge\nq = 1  # charge of the particle\nV = 1  # voltage\nB = 1  # magnetic field\nE_field = vec(0, -V/d, 0)  # electric field\nB_field = vec(0, 0, B)  # magnetic field\nt, dt = 0, 0.001  # time, time step\n\n# Screen Setup\nscene = canvas(width=600, height=600, align='left', background=vec(0.5,0.5,0), center=vec(L/2, 0, 0), range=0.6*L)\np1 = box(pos=vec(L/2, -d/2, 0), length=L, height=0.005, width=0.1, color=color.red)  # lower charged plate\np2 = box(pos=vec(L/2, d/2, 0), length=L, height=0.005, width=0.1, color=color.blue)  # upper charged plate\nb1 = box(pos=vec(L, 0, 0), length=0.01, height=d, width=0.1)  # exit baffle\ncharge = sphere(pos=vec(0, 0, 0), radius=size, color=color.yellow, v=vec(v0, 0, 0), a=vec(0, 0, 0))  # charged particle\nv_vector = arrow(pos=charge.pos, axis=charge.v, shaftwidth=0.01, color=color.green)  # velocity vector\na_vector = arrow(pos=charge.pos, axis=charge.a, shaftwidth=0.01, color=color.magenta)  # acceleration vector\nE_vector = arrow(pos=vec(L/2, 0, 0), axis=E_field, shaftwidth=0.01, color=color.red)  # electric field vector\nB_vector = arrow(pos=vec(L/2, 0, 0), axis=B_field, shaftwidth=0.01, color=color.blue)  # magnetic field vector\nE_label = label(pos=E_vector.pos, text=\"E field\", xoffset=20, yoffset=-20, space=30, height=16, border=4, font='sans')  # E field label\nB_label = label(pos=B_vector.pos, text=\"B field\", xoffset=-20, yoffset=-20, space=30, height=16, border=4, font='sans')  # B field label\n\n# Object Motion\nwhile (charge.pos.x < L and abs(charge.pos.y) < d/2 - p1.height - size) or \\\n      (L < charge.pos.x < L and abs(charge.pos.y) < 0.1*size):\n    rate(1000)\n    if abs(charge.pos.y) < d/2:  # only calculate net force within the charged plates\n        F = q*(E_field + cross(charge.v, B_field))  # net force\n    else:\n        F = vec(0, 0, 0)  # no net force outside the charged plates\n    charge.a = F/m  # acceleration\n    charge.v += charge.a*dt  # update velocity\n    charge.pos += charge.v*dt  # update position\n    v_vector.pos = charge.pos  # update velocity vector position\n    v_vector.axis = charge.v/5  # update velocity vector direction\n    a_vector.pos = charge.pos  # update acceleration vector position\n    a_vector.axis = charge.a/5  # update acceleration vector direction\n    t += dt  # update time",
      "mode": "initial",
      "timestamp": "2024-07-25 21:55:24",
      "serial_number": 1
    }
  ]
}