{
  "session_id": 724,
  "log": [
    {
      "input": "Magnetic Field Generated by a Long Straight Current-Carrying Wire\n\nChapter 8 of Elective Physics, \"Magnetic Effects of Current,\" introduces the Biot-Savart Law, which is used to calculate the magnetic field produced at a point in space by a small segment of current-carrying wire. The equation is:\n$$\nd\\vec{B} = \\frac{\\mu_0}{4\\pi} \\frac{I d\\vec{L} \\times \\hat{r}}{r^2} \\Rightarrow dB = \\frac{\\mu_0}{4\\pi} \\frac{I dL \\sin{\\theta}}{r^2}\n$$\n\nUsing the Biot-Savart Law, we can calculate the magnetic field magnitude at a perpendicular distance $r$ from a long straight current-carrying wire as:\n$$\nB = \\frac{\\mu_0 I}{2\\pi r}\n$$\n\nThe magnetic field magnitude at the center of a current-carrying loop with radius $r$ is:\n$$\nB = \\frac{\\mu_0 I}{2r}\n$$\n\nThe magnetic field magnitude at the center of a solenoid with $n$ turns per unit length carrying current is:\n$$\nB = \\mu_0 n I\n$$\n\nMagnetic fields are distributed in space, but diagrams in books are usually in two dimensions. Therefore, I want to use VPython to visualize the magnetic field strength and direction in space.\n\n### Parameter Settings\n\nVariables are set as size, n, L, d, mu, current, direct, N, with their purposes commented in the respective lines. To make the arrow lengths more visible due to increased field values, a very large current value is set.\n\n### Screen Setup\nCreate an animation window and a wire.\n\nCreate an empty list `segs`, and use a for loop to generate small spheres representing segments of the wire, filling up the `segs` list. There are two ways to write this, the first is more verbose but easier to understand, while the second is more concise but harder to comprehend.\n\n```python\nsegs = []\nfor i in range(n+1):\n    segs.append(sphere(pos=line.pos + vec(i*d, 0, 0), radius=size, color=color.cyan))\nsegs = [sphere(pos=line.pos + vec(i*d, 0, 0), radius=size, color=color.cyan) for i in range(n+1)]\n```\n\nCreate an empty list `locations`, using a three-layer for loop to calculate the positions for drawing arrows and add them to the `locations` list.\n\n```python\nfields = []\nfor location in locations:\n    fields.append(arrow(pos=location, axis=vec(0, 0, 0), color=color.green))\nfields = [arrow(pos=location, axis=vec(0, 0, 0), color=color.green) for location in locations]\n```\n\nDefine a custom function `magnetic`, with input parameters `loc` for the coordinates where the magnetic field is to be calculated, and `segments` for the list storing segmented wire data, using the Biot-Savart Law.\n\nSequentially read elements from the `locations` list, generating arrows at corresponding positions.\n\nUpdate the arrow's length and direction, record the maximum magnetic field strength `Bmax`, with arrows colored closer to red for values near `Bmax` and closer to green for values near 0.\n\n### Illustration:\n![Magnetic Field Visualization](https://hackmd.io/_uploads/H1fL6hp_R.png)\n(1) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Constants\nmu = 4*pi*1E-7\nI = 10\nd = 1E-3\n\n# Define the wire\nwire = curve(pos=[vector(-5,0,0), vector(5,0,0)], radius=0.02)\n\n# Define the field points\nx = arange(-5, 5, 0.5)\ny = arange(-5, 5, 0.5)\nz = arange(-5, 5, 0.5)\nfieldpts = [vector(i,j,k) for i in x for j in y for k in z]\n\n# Create the field arrows\nB_arrows = [arrow(pos=pt, color=color.cyan) for pt in fieldpts]\n\n# Calculate the magnetic field\nfor arr in B_arrows:\n    r = arr.pos - wire.pos\n    dB = (mu/(4*pi)) * (I * cross(d, norm(r))) / mag2(r)\n    arr.axis = dB\n\n# Run the scene\nscene.autoscale = False\nscene.center = vector(0,0,0)\nwhile True:\n    rate(100)",
      "mode": "initial",
      "timestamp": "2024-07-24 14:12:42",
      "serial_number": 1
    }
  ]
}