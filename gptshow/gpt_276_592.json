{
  "session_id": 592,
  "log": [
    {
      "input": "# Vertical Circular Motion\n\n## Theoretical Analysis\n\nTo simplify the calculation process, I set the center of the circle at the origin, and the ball starts from $(0, R, 0)$ with an initial velocity $(-v_0, 0, 0)$. The acceleration can be divided into the normal acceleration $a_n$, which is the centripetal acceleration $a_c$, and the tangential acceleration $a_t$. The calculation of $a_n$ is the same as in Program 7-1 and will not be detailed here. $a_t$ originates from the tangential component of gravitational acceleration, assuming the angle between the ball and the vertical line is $\\theta$, then $$a_t = g \\sin{\\theta}$$\n\nThe y-component of $a_t$ is downward, with the magnitude $$a_{t,y} = a_t \\sin{\\theta} = g \\sin^2{\\theta}$$\n\nThe x-component of $a_t$ depends on its position, pointing right in the first and third quadrants, and left in the second and fourth quadrants, with the magnitude\n$$\na_{t,x} = a_t \\cos{\\theta} = g \\sin{\\theta} \\cos{\\theta}\n$$\n\nIf you only want to find the period, you can calculate it using conservation of mechanical energy. Assuming the speed of the ball at the highest point is\n$$\nv_0 = \\sqrt{ngR}\n$$\n\nThen, by conservation of mechanical energy, the relationship between any point and the highest point can be expressed as [9]\n$$\n\\frac{1}{2} m v^2 + m g R \\cos{\\theta} = \\frac{1}{2} m n^2 g R + m g R\n$$\n$$\nv = R \\frac{d\\theta}{dt} = \\sqrt{(n^2 + 2 - 2 \\cos{\\theta}) g R}\n$$\n$$\nT = \\int_0^T dt = 2 \\frac{R}{g} \\int_0^\\pi \\frac{d\\theta}{\\sqrt{n^2 + 2 - 2 \\cos{\\theta}}}\n$$\n\n## Parameter Settings\n\nDefined variables include size, R, g, v0, ratio, i, t, dt, all explained in their respective comment lines. To reduce the error caused by the duration of substitution, the value of dt has been adjusted to 0.0001.\n\n## Display Settings\n\nThe ball moves in the xy plane, starting from above the screen at a distance R, with the initial velocity direction towards the -x axis, without needing to adjust the viewer's position and direction.\nThe axis direction is changed to point towards the +z axis.\narrow_v and arrow_a are arrows representing the ball's velocity and acceleration.\n\n## Custom Functions\n\nCustom function findan, inputs are v and pos, both in vector format, used to calculate the ball's normal acceleration an.\nCustom function findat, input is pos in vector format, used to calculate the ball's tangential acceleration $a_t$. The angle between the rope and the vertical line is $\\theta$; first calculate $\\sin{\\theta}$ and $\\cos{\\theta}$, since $\\theta$ is acute, both are positive. Then, calculate $a_{t,y}$ and $a_{t,x}$, and determine the sign of $a_{t,x}$ based on pos.\n\n## Object Motion\n\nDetermine whether the ball returns to the starting point based on its position. Since the ball starts from the highest point and rotates counterclockwise, the condition for returning to the starting point is that the original position xp is in the +x region, and the current position xc is in the -x region. If it returns to the starting point, print the elapsed time t, increment the count i by 1, and stop the animation after the ball returns to the starting point 5 times.\nDue to the smaller dt, the number of calculations per second is changed to 5000 to speed up the animation.\nUse the custom functions findan and findat to calculate the ball's normal and tangential accelerations.\nUpdate the ball's velocity, position, the starting point, direction, and length of the arrows, and update time.\n\nData Processing\n\nIf the speed of the ball at the highest point is\n$$\nv_0 = n \\sqrt{gR}\n$$\n, substitute n from 1 to 7, find the periods using simulation and theoretical calculations, the data is as follows:\n\nn   v0  T_theoretical  T_simulation\n1   7   2.8841511713977500   2.8838000000016613\n2   14  1.8728982530658000   1.8728999999998102\n3   21  1.3617223964215400   1.3617999999999999\n4   28  1.0602946238731300   1.0602999999998997\n5   35  0.8646052540953560   0.8645999999999211\n6   42  0.7284267507699600   0.7283999999999361\n7   49  0.6286255969937600   0.6285999999999471\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=0.5\n\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n# create the scene\nscene = canvas(width=800, height=800, background=vec(0.5,0.5,0), center=vec(0, -0.2, 0), align = 'left')\n\n# create objects\nball = sphere(radius=0.05, color=color.red, make_trail=True, retain=2000, trail_color=color.yellow)\nr = 0.5 # radius of the circular motion\nball.pos = vec(0, r, 0)\npivot = vec(0,0,0)\nball.v = vec(-7, 0, 0) # initial speed\nball.m = 1 # mass of the ball\nt = 0 # initial time\ndt = 0.0001 # time step\ng = 9.8 # gravitational acceleration\ni = 0 # number of periods\n\n# create arrows\narrow_v = arrow(pos=ball.pos, axis=ball.v, shaftwidth=0.01, color=color.green)\narrow_a = arrow(pos=ball.pos, shaftwidth=0.01, color=color.blue)\n\ndef findan(v, pos): # find normal acceleration\n    r = mag(pos)\n    vc = mag(v)\n    return vc**2/r*norm(-pos)\n\ndef findat(pos): # find tangential acceleration\n    theta = acos(pos.y/mag(pos))\n    at = g*sin(theta)\n    at_y = -at*sin(theta)\n    at_x = at*cos(theta)\n    if pos.x >= 0:\n        at_x = -at_x\n    return vec(at_x, at_y, 0)\n\n# motion\nwhile i < 5:\n    rate(5000)\n    if ball.pos.x*ball.v.x < 0:\n        print(t)\n        i += 1\n    an = findan(ball.v, ball.pos)\n    at = findat(ball.pos)\n    a = an + at\n    ball.v += a*dt\n    ball.pos += ball.v*dt\n    arrow_v.pos, arrow_a.pos = ball.pos, ball.pos\n    arrow_v.axis, arrow_a.axis = ball.v, a\n    t += dt",
      "mode": "initial",
      "timestamp": "2024-07-24 02:36:47",
      "serial_number": 1
    }
  ]
}