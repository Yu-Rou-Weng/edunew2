{
  "session_id": 843,
  "log": [
    {
      "input": "1. Screen Settings\nSet the width of the canvas to 700 and the height to 400. Please draw the trajectory of the ball's motion. Do not adjust the size of the scene. The center of the canvas must be correctly set, therefore the order of writing the Parameter Settings must follow the Screen Settings.\n\n2. Object Motion & Parameter Settings\nPlease draw a VPython animation of a ball being thrown horizontally: The ball is thrown horizontally, hits the floor, and bounces.\nDraw the ball and the floor. Assume that the ball undergoes an elastic collision with the ground, taking into account only the effect of gravity, meaning the ball accelerates downward due to gravity and bounces upon hitting the ground. Stop the motion of the ball when it reaches the X coordinate position of 12.5.\n\n3. Cyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Speed_I as a cyber input variable, set Speed_I=5.\n\n(2) Speed_I is the initial horizontal velocity of the ball. When Speed_I changes to a new value, the initial horizontal velocity of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Screen Settings\nscene = canvas(width = 700, height = 400, center = vec(6.25, 0, 0))\n\n# Object Motion & Parameter Settings\nball = sphere(pos = vec(0,1,0), radius = 0.2) \nfloor = box(pos = vec(6.25, -0.05, 0), size = vec(15,0.1,1)) \nball.velocity = vector(5,0,0) \ng = 9.8 # gravity\nball.accel = vec(0,-g,0) \n\n# Cyber Input Variable Mapping Information\nSpeed_I = 5 # initial speed\n\n# Simulation\ndt = 0.01 \nwhile ball.pos.x < 12.5: \n    rate(100) \n    ball.velocity = ball.velocity + ball.accel*dt \n    ball.pos = ball.pos + ball.velocity*dt \n    if ball.pos.y < ball.radius: \n        ball.velocity.y = -ball.velocity.y ",
      "mode": "initial",
      "timestamp": "2024-08-14 12:40:06",
      "serial_number": 1
    },
    {
      "input": "1. Screen Settings\nSet the canvas width to 700 and the height to 400. Please draw the trajectory of the ball's movement. Do not change the canvas size.\n\n2. Object Motion & Parameter Settings\nPlease create a VPython animation of horizontal projectile motion: a ball is thrown horizontally from the air and bounces off the ground.\nDraw both the ball and the ground. Assume that the ball undergoes an elastic collision with the ground, and only the effect of gravity is considered, meaning the ball accelerates downward under gravity and bounces off the ground. Allow the ball to move for 10 seconds before stopping the motion.\n\n3. Cyber Input Variable Mapping Information:\n\n(1) Define and initialize a Cyber Input Variable named Speed_I with an initial value set to 1. This variable represents the speed of the ball.\n\n(2) During the animation, whenever the value of the Speed_I variable changes, let the animation rerun from the starting point with the updated ball speed.\n\n(3) Define and initialize a Cyber Input Variable named Height_I with an initial value set to 15. This variable represents the height of the ball above the ground.\n\n(4) During the animation, whenever the value of the Height_I variable changes, let the animation rerun from the starting point with the updated height of the ball above the ground.\n(5) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Create canvas\nscene = canvas(width=700, height=400)\n\n# Define constants\ng = vector(0, -9.8, 0) # gravity\n\n# Define Cyber Input Variables\nSpeed_I = 1\nHeight_I = 15\n\n# Create objects\nball = sphere(pos=vector(0, Height_I, 0), radius=1, color=color.red)\nball.velocity = vector(Speed_I, 0, 0)\nball.mass = 1\nball.momentum = ball.mass * ball.velocity\n\nground = box(pos=vector(0, 0, 0), length=40, height=0.5, width=40, color=color.green)\n\n# Time settings\nt = 0\ndt = 0.01\nT = 10\n\n# Function for updating position and momentum\ndef move_ball(obj):\n    obj.pos = obj.pos + obj.momentum/obj.mass * dt\n    obj.momentum = obj.momentum + g*obj.mass*dt\n\n# Animation\nwhile t < T:\n    rate(100)\n    if ball.pos.y < ground.pos.y + ground.height/2 + ball.radius and ball.momentum.y < 0:\n        ball.momentum.y = -ball.momentum.y\n    else:\n        move_ball(ball)\n    t += dt\n\n# Update for changing Speed_I and Height_I\ndef update():\n    global Speed_I, Height_I\n    ball.pos.y = Height_I\n    ball.velocity.x = Speed_I\n    ball.momentum = ball.mass * ball.velocity\n    t = 0\n    while t < T:\n        rate(100)\n        if ball.pos.y < ground.pos.y + ground.height/2 + ball.radius and ball.momentum.y < 0:\n            ball.momentum.y = -ball.momentum.y\n        else:\n            move_ball(ball)\n        t += dt\n\nSpeed_I = 2\nHeight_I = 20\nupdate()",
      "mode": "initial",
      "timestamp": "2024-08-18 20:10:56",
      "serial_number": 1
    }
  ]
}