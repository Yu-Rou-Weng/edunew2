{
  "session_id": 702,
  "log": [
    {
      "input": "Motion of Charged Particles in a Magnetic Field\n\nThe magnetic force experienced by a charged particle in a uniform magnetic field is given by:\n$$\n\\vec{F}_B = q (\\vec{v} \\times \\vec{B}) \\Rightarrow F_B = qvB \\sin{\\theta}\n$$\nwhere $q$ is the charge of the particle, $v_0$ is the velocity of the particle, and $B$ is the external magnetic field. There are three possible modes of motion:\n\n- $\\theta = 0^\\circ$ or $180^\\circ$: $F_B = 0$, motion is a uniform linear motion.\n- $\\theta = 90^\\circ$: $F_B = qvB$, motion is a uniform circular motion.\n- Other angles: Helical motion, moving forward while revolving in circles.\n\nThe goal here is to illustrate these three states of motion, with the animation window's viewpoint automatically adjusting to an angle that facilitates easy observation depending on the velocity and the angle with the magnetic field.\n\nHelical Motion Diagram:\n![image](https://hackmd.io/_uploads/BkS9t3TuC.png)\n\nParameter Settings\n\nVariables are set for size, m, theta, phi, v0, q, L, B_field, t, dt, with their purposes noted in the respective comments. To ensure smoother animation, the particle's charge and mass have been intentionally increased significantly.\n\nDisplay Settings:\n- Create an animation window, adjusting the viewpoint based on theta and phi. If theta == pi/2 or phi == pi/2, view from (L, L/4, L/4) towards the origin; otherwise, view from (L/4, L/4, L) towards the origin.\n- Create a charged particle and set its initial velocity.\n- Create coordinate axes and labels.\n- Create arrows and labels to represent the magnetic field.\n- Create arrows to represent velocity and acceleration.\n\nObject Motion:\n- The particle is confined to move within a cubic space with edge length of 1.2*L; the motion stops when it reaches the boundary, using the condition in the while loop: abs(charge.pos.x) < 0.6*L and abs(charge.pos.y) < 0.6*L and abs(charge.pos.z) < 0.6*L.\n- Calculate the net force on the charged particle, update the particle's acceleration, velocity, and position.\n- Update the arrows representing velocity and acceleration, drawing only the directions to avoid automatic resizing of the animation.\n- Update time.\n\nSimulation Results\n\nBelow are five different sets of data and test results:\n\n1. theta = 0, phi = 0 \u21d2 Velocity has only x-component, moves along the x-axis at constant speed.\n![image](https://hackmd.io/_uploads/BJdk9hauA.png)\n\n2. theta = 90, phi = 0 \u21d2 Velocity has no x-component, performs uniform circular motion in the yz-plane.\n![image](https://hackmd.io/_uploads/Hy31qhpOA.png)\n\n3. theta = 0, phi = 90 \u21d2 Velocity has no x-component, performs uniform circular motion in the yz-plane.\n![image](https://hackmd.io/_uploads/SJfxcnpu0.png)\n\n4. theta = 80, phi = 10 \u21d2 Velocity is not at 0 or 180 degrees with the x-axis, helical motion.\n![image](https://hackmd.io/_uploads/S1wlcnadC.png)\n\n5. theta = 100, phi = 10 \u21d2 Velocity is not at 0 or 180 degrees with the x-axis, helical motion.\n![image](https://hackmd.io/_uploads/Skal5nau0.png)\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Parameter Settings\nsize = 0.01\nm = 1E-11\nRadius_I = 1\ntheta = 0\nphi = 0\nv0 = 0.5\nq = 1E-5\nL = 0.5\nB_field = vector(0, 0, 1)\nt = 0\ndt = 0.001\n\n# Display Settings\nscene = canvas(width=800, height=800, background=vector(0.5, 0.5, 0))\nif theta==pi/2 or phi==pi/2:\n    scene.camera.pos = vector(L, L/4, L/4)\nelse:\n    scene.camera.pos = vector(L/4, L/4, L)\nscene.camera.axis = -scene.camera.pos\n\ncharge = sphere(pos=vector(0, 0, 0), radius=size, color=color.red)\ncharge.v = v0*vector(cos(theta)*cos(phi), cos(theta)*sin(phi), sin(theta))\n\nxaxis = cylinder(pos=vector(-L, 0, 0), axis=vector(2*L, 0, 0), radius=L/40, color=color.blue)\nyaxis = cylinder(pos=vector(0, -L, 0), axis=vector(0, 2*L, 0), radius=L/40, color=color.blue)\nzaxis = cylinder(pos=vector(0, 0, -L), axis=vector(0, 0, 2*L), radius=L/40, color=color.blue)\nxlabel = label(pos=vector(1.1*L, 0, 0), text='X', height=30, box=False)\nylabel = label(pos=vector(0, 1.1*L, 0), text='Y', height=30, box=False)\nzlabel = label(pos=vector(0, 0, 1.1*L), text='Z', height=30, box=False)\n\nB_arrow = arrow(pos=vector(-1.2*L, 1.2*L, -1.2*L), axis=1.5*L*B_field, color=color.green, shaftwidth=L/20)\nB_label = label(pos=B_arrow.pos+1.3*B_arrow.axis, text='B', height=30, box=False)\nv_arrow = arrow(pos=charge.pos, axis=charge.v, color=color.yellow, shaftwidth=L/20)\nv_label = label(pos=v_arrow.pos+v_arrow.axis, text='v', height=30, box=False)\nF_net_arrow = arrow(pos=charge.pos, axis=vector(0, 0, 0), color=color.magenta, shaftwidth=L/20)\nF_net_label = label(pos=F_net_arrow.pos+F_net_arrow.axis, text='F_net', height=30, box=False)\n\n# Object Motion\nwhile abs(charge.pos.x) < 0.6*L and abs(charge.pos.y) < 0.6*L and abs(charge.pos.z) < 0.6*L:\n    rate(1000)\n    F_B = q*cross(charge.v, B_field)\n    F_net = F_B\n    charge.a = F_net/m\n    charge.v = charge.v + charge.a*dt\n    charge.pos = charge.pos + charge.v*dt\n    v_arrow.pos = charge.pos\n    v_arrow.axis = charge.v\n    v_label.pos = v_arrow.pos + v_arrow.axis\n    F_net_arrow.pos = charge.pos\n    F_net_arrow.axis = F_net\n    F_net_label.pos = F_net_arrow.pos + F_net_arrow.axis\n    t = t + dt",
      "mode": "initial",
      "timestamp": "2024-07-24 11:44:58",
      "serial_number": 1
    }
  ]
}