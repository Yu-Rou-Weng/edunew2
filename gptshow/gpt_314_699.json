{
  "session_id": 699,
  "log": [
    {
      "input": "Magnetic Field Generated by a Current-Carrying Solenoid\n\nChapter 8 of elective physics, \"Magnetic Effects of Current,\" introduces the Biot\u2013Savart law, which is used to calculate the magnetic field at a point in space generated by a small segment of a current-carrying wire. The equation is given by:\n$$\nd\\vec{B} = \\frac{\\mu_0}{4\\pi} \\frac{I d\\vec{L} \\times \\hat{r}}{r^2} \\Rightarrow dB = \\frac{\\mu_0}{4\\pi} \\frac{I dL \\sin{\\theta}}{r^2}\n$$\n\nUsing the Biot-Savart law, we can calculate the magnetic field at a perpendicular distance $r$ from a long straight current-carrying wire as:\n$$\nB = \\frac{\\mu_0 I}{2\\pi r}\n$$\n\nThe magnetic field at the center of a current-carrying loop of radius $r$ is:\n$$\nB = \\frac{\\mu_0 I}{2r}\n$$\n\nThe magnetic field at the center of a solenoid with $n$ turns per unit length carrying a current is:\n$$\nB = \\mu_0 n I\n$$\n\nMagnetic fields are distributed in space; however, the diagrams in the textbook are all in two dimensions. Thus, I want to use VPython to visualize the strength and direction of the magnetic field in space.\n\nProgramming Part\n\nThe program \"Magnetic Field Generated by a Current-Carrying Solenoid\" is modified based on the program for the magnetic field generated by a current-carrying loop. Here, only the differences are described.\n\nNew variables include the radius of small spheres as point_size, the radius of the wire as seg_size, the radius of the solenoid as r, and the number of turns in the solenoid as num.\n\nA for loop is used to arrange 500 small spheres in a helical line, and the information is stored in the list points.\n\nAnother for loop reads two adjacent spheres from the list points each time, calculates the length and direction of the line connecting the spheres, and draws the wire starting from the midpoint of the two spheres. This data is stored in the list segs.\n\nImage to be drawn:\n![image](https://hackmd.io/_uploads/r1QWA3TuC.png)\n(1) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\nscene = canvas(title='Magnetic Field by a Solenoid')\nscene.width = scene.height = 800\nscene.range = 1.2\n\nmu = 4*pi*1E-7\nI = 1E-1\nN = 500\nr = 0.3\nseg_size = r/40\npoint_size = 0.01\nB_scale = 1E4\nB_center = vec(0, 0, 0)\n\npoints = [sphere(pos=vec(r*cos(2*pi*i/N), r*sin(2*pi*i/N), 2*i/N), radius=point_size) for i in range(N)]\nsegs = [cylinder(pos=points[i].pos, axis=(points[i+1].pos-points[i].pos)/2, size=seg_size, color=color.red) for i in range(N-1)]\nsegs.append(cylinder(pos=points[N-1].pos, axis=(points[0].pos-points[N-1].pos+vec(0, 0, 2))/2, size=seg_size, color=color.red))\n\nB_points = [vec(x, y, 0) for x in arange(-1, 1, 0.2) for y in arange(-1, 1, 0.2)]\nfor pos in B_points:\n    r = pos - B_center\n    B = vec(0, 0, 0)\n    for seg in segs:\n        r_prime = pos - seg.pos\n        dB = (mu*I/4/pi/mag(r_prime)**2)*cross(seg.axis, r_prime)\n        B = B + dB\n    arrow(pos=pos, axis=B*B_scale, color=color.cyan, shaftwidth=0.01)",
      "mode": "initial",
      "timestamp": "2024-07-24 11:38:25",
      "serial_number": 1
    }
  ]
}