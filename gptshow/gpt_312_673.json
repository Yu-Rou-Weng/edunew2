{
  "session_id": 673,
  "log": [
    {
      "input": "Magnetic Field Generated by Current-Carrying Coils\n\nChapter 8 of the elective physics course, \"Magnetic Effects of Current,\" introduces the Biot-Savart Law, which is used to calculate the magnetic field generated at a point in space by a small segment of a current-carrying wire. The equation is given by:\n$$\nd\\vec{B} = \\frac{\\mu_0}{4\\pi} \\frac{I d\\vec{L} \\times \\hat{r}}{r^2} \\Rightarrow dB = \\frac{\\mu_0}{4\\pi} \\frac{I dL \\sin{\\theta}}{r^2}\n$$\n\nUsing the Biot-Savart Law, the magnetic field magnitude at a perpendicular distance $r$ from a long straight current-carrying conductor is calculated as:\n$$\nB = \\frac{\\mu_0 I}{2\\pi r}\n$$\n\nThe magnetic field magnitude at the center of a current-carrying coil with radius $r$ is:\n$$\nB = \\frac{\\mu_0 I}{2r}\n$$\n\nThe magnetic field magnitude at the center of a solenoid with $n$ turns per unit length carrying current is:\n$$\nB = \\mu_0 n I\n$$\n\nMagnetic fields should be distributed in space, but the diagrams in textbooks are often planar, hence I intend to use VPython to visualize the strength and direction of the magnetic field in space.\n\nProgramming Section\nThe program for generating the magnetic field of a current-carrying coil and that for a long straight current-carrying conductor are very similar. Below are the differences:\n\nVariables are set as size, r, n, part, d, mu, current, direct, L, N, Bmax. Since the range of magnetic field values is wide, Bmax is set directly rather than derived from calculated values.\n\nA ring object is used to create the coil.\n\nThe small spheres, after dividing the ring, start from (r, 0, 0). If looking from the +y axis toward the origin, the placement direction is counter-clockwise, hence the position is set to:\n\n(r*cos(i*2*pi*part/n), 0, -*sin(i*2*pi*part/n))\n\nIn the custom function, if the current direction is counter-clockwise, i.e., direct = True, then dr is set to:\n\nnorm(vec(segment.pos.z, 0, -segment.pos.x))\n\nOtherwise, it is set to:\n\nnorm(vec(-segment.pot.z, 0, segment.pos.x))\n\nIllustration to be drawn:\n![image](https://hackmd.io/_uploads/Bk156hadC.png)\n(1) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Variables\nsize = 0.1  # arrow size\nr = 1.0  # radius of coil\nn = 100  # number of segments in coil\npart = n  # number of parts to divide coil\nd = 1.0  # distance between coils\nmu = 4*pi*1E-7  # permeability of free space\ncurrent = 1.0  # current in the coil\ndirect = True  # True for counter-clockwise current, False for clockwise\nL = 5.0  # length of wire\nN = 15  # number of field vectors along a side\nBmax = 2E-7  # maximum magnetic field magnitude\n\nscene = canvas(title=\"Magnetic field of a coil\", width=800, height=800, range=2.0)\ncoil = ring(pos=vec(0, 0, 0), axis=vec(0, 1, 0), radius=r, thickness=0.03)\narrows = []\nBnet = vec(0, 0, 0)\n\n# Function to calculate magnetic field at point due to small current element\ndef Bfield(point, segment):\n    r = point - segment.pos\n    if direct:\n        dr = norm(vec(segment.pos.z, 0, -segment.pos.x))\n    else:\n        dr = norm(vec(-segment.pos.z, 0, segment.pos.x))\n    dB = mu/(4*pi)*current*cross(dr, r.norm())/(mag(r)**2)*dL\n    return dB\n\n# Create and place the small coils\nsegments = []\nfor i in range(n):\n    theta = i*2*pi/n\n    segment = sphere(pos=vec(r*cos(theta), 0, -r*sin(theta)), radius=size)\n    segments.append(segment)\n\n# Calculate and display the magnetic field\nfor x in range(-N, N+1):\n    for y in range(-N, N+1):\n        for z in range(-N, N+1):\n            point = vec(x, y, z)*L/N\n            Bnet = vec(0, 0, 0)\n            for segment in segments:\n                dL = 2*pi*r/n\n                Bnet += Bfield(point, segment)\n            if mag(Bnet) > Bmax:\n                Bnet = Bnet.norm()*Bmax\n            arrow = arrow(pos=point, axis=Bnet*size, color=Bnet.norm())\n            arrows.append(arrow)",
      "mode": "initial",
      "timestamp": "2024-07-24 07:33:46",
      "serial_number": 1
    },
    {
      "input": "Please update the program by fixing the following error:\nCannot read properties of undefined (reading '__argnames__')\n\nHere's the current program:\nfrom vpython import *\n\n# Variables\nsize = 0.1  # arrow size\nr = 1.0  # radius of coil\nn = 100  # number of segments in coil\npart = n  # number of parts to divide coil\nd = 1.0  # distance between coils\nmu = 4*pi*1E-7  # permeability of free space\ncurrent = 1.0  # current in the coil\ndirect = True  # True for counter-clockwise current, False for clockwise\nL = 5.0  # length of wire\nN = 15  # number of field vectors along a side\nBmax = 2E-7  # maximum magnetic field magnitude\n\nscene = canvas(title=\"Magnetic field of a coil\", width=800, height=800, range=2.0)\ncoil = ring(pos=vec(0, 0, 0), axis=vec(0, 1, 0), radius=r, thickness=0.03)\narrows = []\nBnet = vec(0, 0, 0)\n\n# Function to calculate magnetic field at point due to small current element\ndef Bfield(point, segment):\n    r = point - segment.pos\n    if direct:\n        dr = norm(vec(segment.pos.z, 0, -segment.pos.x))\n    else:\n        dr = norm(vec(-segment.pos.z, 0, segment.pos.x))\n    dB = mu/(4*pi)*current*cross(dr, r.norm())/(mag(r)**2)*dL\n    return dB\n\n# Create and place the small coils\nsegments = []\nfor i in range(n):\n    theta = i*2*pi/n\n    segment = sphere(pos=vec(r*cos(theta), 0, -r*sin(theta)), radius=size)\n    segments.append(segment)\n\n# Calculate and display the magnetic field\nfor x in range(-N, N+1):\n    for y in range(-N, N+1):\n        for z in range(-N, N+1):\n            point = vec(x, y, z)*L/N\n            Bnet = vec(0, 0, 0)\n            for segment in segments:\n                dL = 2*pi*r/n\n                Bnet += Bfield(point, segment)\n            if mag(Bnet) > Bmax:\n                Bnet = Bnet.norm()*Bmax\n            arrow = arrow(pos=point, axis=Bnet*size, color=Bnet.norm())\n            arrows.append(arrow)",
      "output": "from vpython import *\n\n# Variables\nsize = 0.1  # arrow size\nr = 1.0  # radius of coil\nn = 100  # number of segments in coil\npart = n  # number of parts to divide coil\nd = 1.0  # distance between coils\nmu = 4*pi*1E-7  # permeability of free space\ncurrent = 1.0  # current in the coil\ndirect = True  # True for counter-clockwise current, False for clockwise\nL = 5.0  # length of wire\nN = 15  # number of field vectors along a side\nBmax = 2E-7  # maximum magnetic field magnitude\n\nscene = canvas(title=\"Magnetic field of a coil\", width=800, height=800, range=2.0)\ncoil = ring(pos=vec(0, 0, 0), axis=vec(0, 1, 0), radius=r, thickness=0.03)\narrows = []\nBnet = vec(0, 0, 0)\n\n# Function to calculate magnetic field at point due to small current element\ndef Bfield(point, segment, dL):\n    r = point - segment.pos\n    if direct:\n        dr = norm(vec(segment.pos.z, 0, -segment.pos.x))\n    else:\n        dr = norm(vec(-segment.pos.z, 0, segment.pos.x))\n    dB = mu/(4*pi)*current*cross(dr, r.norm())/(mag(r)**2)*dL\n    return dB\n\n# Create and place the small coils\nsegments = []\nfor i in range(n):\n    theta = i*2*pi/n\n    segment = sphere(pos=vec(r*cos(theta), 0, -r*sin(theta)), radius=size)\n    segments.append(segment)\n\n# Calculate and display the magnetic field\nfor x in range(-N, N+1):\n    for y in range(-N, N+1):\n        for z in range(-N, N+1):\n            point = vec(x, y, z)*L/N\n            Bnet = vec(0, 0, 0)\n            for segment in segments:\n                dL = 2*pi*r/n\n                Bnet += Bfield(point, segment, dL)\n            if mag(Bnet) > Bmax:\n                Bnet = Bnet.norm()*Bmax\n            arrowObj = arrow(pos=point, axis=Bnet*size, color=color.blue)\n            arrows.append(arrowObj)",
      "mode": "fix_error",
      "timestamp": "2024-07-24 07:34:11",
      "serial_number": 4
    },
    {
      "input": "Please update the program by fixing the following error:\nCannot read properties of undefined (reading '__argnames__')\n\nHere's the current program:\nfrom vpython import *\n\n# Variables\nsize = 0.1  # arrow size\nr = 1.0  # radius of coil\nn = 100  # number of segments in coil\npart = n  # number of parts to divide coil\nd = 1.0  # distance between coils\nmu = 4*pi*1E-7  # permeability of free space\ncurrent = 1.0  # current in the coil\ndirect = True  # True for counter-clockwise current, False for clockwise\nL = 5.0  # length of wire\nN = 15  # number of field vectors along a side\nBmax = 2E-7  # maximum magnetic field magnitude\n\nscene = canvas(title=\"Magnetic field of a coil\", width=800, height=800, range=2.0)\ncoil = ring(pos=vec(0, 0, 0), axis=vec(0, 1, 0), radius=r, thickness=0.03)\narrows = []\nBnet = vec(0, 0, 0)\n\n# Function to calculate magnetic field at point due to small current element\ndef Bfield(point, segment):\n    r = point - segment.pos\n    if direct:\n        dr = norm(vec(segment.pos.z, 0, -segment.pos.x))\n    else:\n        dr = norm(vec(-segment.pos.z, 0, segment.pos.x))\n    dB = mu/(4*pi)*current*cross(dr, r.norm())/(mag(r)**2)*dL\n    return dB\n\n# Create and place the small coils\nsegments = []\nfor i in range(n):\n    theta = i*2*pi/n\n    segment = sphere(pos=vec(r*cos(theta), 0, -r*sin(theta)), radius=size)\n    segments.append(segment)\n\n# Calculate and display the magnetic field\nfor x in range(-N, N+1):\n    for y in range(-N, N+1):\n        for z in range(-N, N+1):\n            point = vec(x, y, z)*L/N\n            Bnet = vec(0, 0, 0)\n            for segment in segments:\n                dL = 2*pi*r/n\n                Bnet += Bfield(point, segment)\n            if mag(Bnet) > Bmax:\n                Bnet = Bnet.norm()*Bmax\n            arrow = arrow(pos=point, axis=Bnet*size, color=Bnet.norm())\n            arrows.append(arrow)",
      "output": "from vpython import *\n\n# Variables\nsize = 0.1  # arrow size\nr = 1.0  # radius of coil\nn = 100  # number of segments in coil\npart = n  # number of parts to divide coil\nd = 1.0  # distance between coils\nmu = 4*pi*1E-7  # permeability of free space\ncurrent = 1.0  # current in the coil\ndirect = True  # True for counter-clockwise current, False for clockwise\nL = 5.0  # length of wire\nN = 15  # number of field vectors along a side\nBmax = 2E-7  # maximum magnetic field magnitude\n\nscene = canvas(title=\"Magnetic field of a coil\", width=800, height=800, range=2.0)\ncoil = ring(pos=vec(0, 0, 0), axis=vec(0, 1, 0), radius=r, thickness=0.03)\narrows = []\nBnet = vec(0, 0, 0)\n\n# Function to calculate magnetic field at point due to small current element\ndef Bfield(point, segment):\n    r = point - segment.pos\n    if direct:\n        dr = norm(vec(segment.pos.z, 0, -segment.pos.x))\n    else:\n        dr = norm(vec(-segment.pos.z, 0, segment.pos.x))\n    dL = 2*pi*r/n\n    dB = mu/(4*pi)*current*cross(dr, r.norm())/(mag(r)**2)*dL\n    return dB\n\n# Create and place the small coils\nsegments = []\nfor i in range(n):\n    theta = i*2*pi/n\n    segment = sphere(pos=vec(r*cos(theta), 0, -r*sin(theta)), radius=size)\n    segments.append(segment)\n\n# Calculate and display the magnetic field\nfor x in range(-N, N+1):\n    for y in range(-N, N+1):\n        for z in range(-N, N+1):\n            point = vec(x, y, z)*L/N\n            Bnet = vec(0, 0, 0)\n            for segment in segments:\n                Bnet += Bfield(point, segment)\n            if mag(Bnet) > Bmax:\n                Bnet = Bnet.norm()*Bmax\n            ar = arrow(pos=point, axis=Bnet*size, color=Bnet.norm())\n            arrows.append(ar)",
      "mode": "fix_error",
      "timestamp": "2024-07-24 07:34:30",
      "serial_number": 6
    }
  ]
}