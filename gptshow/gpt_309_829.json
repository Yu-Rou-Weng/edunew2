{
  "session_id": 829,
  "log": [
    {
      "input": "Rutherford Scattering\n\nThe Rutherford scattering experiment is crucial evidence for the existence of atomic nuclei. In the experiment, alpha particles (helium nuclei) are directed at a gold foil. The electrostatic force between the alpha particles and the gold nuclei is repulsive. Ignoring the effect of gravity, since the gold nuclei remain stationary, the electrostatic force acting through the gold nuclei conserves the angular momentum relative to the gold nuclei. Only the electrostatic force between the alpha particles and gold nuclei does work, conserving the mechanical energy of the system.\n\nRutherford Scattering Experiment Schematic:\n![image](https://hackmd.io/_uploads/H1zf236OC.png)\n\nThe diagram below is a schematic of the Rutherford scattering experiment. When the alpha particle is at infinity, its velocity is directed to the right. The perpendicular distance between the gold nucleus and the direction of velocity is called the impact parameter, usually denoted as b. The goal of this program is to change b, plot the relationship between kinetic energy of alpha particles, potential energy of the system, mechanical energy, and time, and find the value of the upward displacement of the alpha particle.\n\nParameter Settings\n\nVariables are set as r1, m1, q1, c1, r2, m2, q2, c2, v0, b, L, k, t, dt, and their purposes are noted in the comments. For ease of numerical settings, the unit of length is nm, mass is in amu, charge in e, and time in ns, with k assumed to be 1.\n\nDisplay Settings\nGenerate an animation window.\nCreate a nucleus.\nCreate arrows indicating velocity and acceleration.\nGenerate a plotting window.\n\nObject Movement\nThe animation continues as long as the particle is within -L/2 < x < L/2, -L/2 < y < L/2, so the condition in the while loop is set to (abs(alpha.pos.x) < L/2 and abs(alpha.pos.y) < L/2).\n\nCalculate the resultant force on the helium nucleus, update helium nucleus acceleration, velocity, and position.\n\nUpdate the arrows indicating velocity and acceleration.\n\nCalculate the kinetic energy of the helium nucleus, the potential energy of the system, and the mechanical energy and plot them.\n\nUpdate time.\n![image](https://hackmd.io/_uploads/Sk5e6n6dC.png)\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Parameter Settings\nr1, m1, q1, c1 = 7.3e-3, 197, 79, color.yellow  # gold nucleus\nr2, m2, q2, c2 = 1.1e-3, 4, 2, color.cyan  # alpha particle\nv0, b, L = 1e-5, 3 * r1, 100 * r1  # initial velocity of alpha particle, impact parameter, length of animation window\nk, t, dt = 8.99e9, 0, 0.01  # Coulomb constant, time, time step\n\n# Display Settings\nscene = canvas(width=600, height=600, align='left', background=color.black, center=vec(0, b, 0), range=L / 2)\nalpha = sphere(pos=vec(-L / 4, b, 0), radius=r2, m=m2, q=q2, v=vec(v0, 0, 0), color=c2, make_trail=True, trail_type='points', trail_radius=0.3 * r2, retain=50)\nnucleus = sphere(pos=vec(0, 0, 0), radius=r1, m=m1, q=q1, color=c1)\nv_vector = arrow(pos=alpha.pos, axis=mag(alpha.v) * 5e-11 * norm(alpha.v), shaftwidth=0.5 * r2, color=color.green)\na_vector = arrow(pos=alpha.pos, axis=1e-9 * norm(alpha.v), shaftwidth=0.5 * r2, color=color.red)\ngd = graph(width=600, align='left', xtitle='<i>t</i> (ns)', ytitle='Energy (eV)', foreground=color.white, background=color.black)\nk_curve = gcurve(graph=gd, color=color.cyan)\np_curve = gcurve(graph=gd, color=color.yellow)\nt_curve = gcurve(graph=gd, color=color.green)\n\n# Object Movement\nwhile mag(alpha.pos) < L / 2:\n    rate(1000)\n    r = nucleus.pos - alpha.pos\n    F = k * nucleus.q * alpha.q * norm(r) / mag(r)**2\n    alpha.v += F / alpha.m * dt\n    alpha.pos += alpha.v * dt\n    v_vector.pos = alpha.pos\n    v_vector.axis = mag(alpha.v) * 5e-11 * norm(alpha.v)\n    a_vector.pos = alpha.pos\n    a_vector.axis = F / alpha.m * 1e-9\n    K = 0.5 * alpha.m * mag(alpha.v)**2 * 6.242e18\n    P = -k * nucleus.q * alpha.q / mag(r) * 6.242e18\n    T = K + P\n    k_curve.plot(t, K)\n    p_curve.plot(t, P)\n    t_curve.plot(t, T)\n    t += dt",
      "mode": "initial",
      "timestamp": "2024-07-26 10:34:16",
      "serial_number": 1
    }
  ]
}