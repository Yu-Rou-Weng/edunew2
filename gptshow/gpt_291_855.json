{
  "session_id": 855,
  "log": [
    {
      "input": "Please write a \"Wooden Block Spring System Elastic Collision\" VPhysics animation.\n\n# One-Dimensional Elastic Collision\n\nAssume there are two wooden blocks on a horizontal, smooth table with masses $m_1$ and $m_2$, and velocities $v_1$ and $v_2$ respectively. After collision, their velocities become $v_1'$ and $v_2'$. Since the collision process is free from external forces, the system's momentum is conserved:\n$$\nm_1 v_1 + m_2 v_2 = m_1 v_1' + m_2 v_2' \\Rightarrow m_1 (v_1 - v_1') = m_2 (v_2' - v_2) \\quad (1)\n$$\n\nIf there is no energy loss during the collision, the total kinetic energies of the blocks before and after the collision are equal:\n$$\n\\frac{1}{2} m_1 v_1^2 + \\frac{1}{2} m_2 v_2^2 = \\frac{1}{2} m_1 v_1'^2 + \\frac{1}{2} m_2 v_2'^2\n$$\n$$\nm_1 (v_1^2 - v_1'^2) = m_2 (v_2'^2 - v_2^2)\n$$\n$$\nm_1 (v_1 + v_1') (v_1 - v_1') = m_2 (v_2' + v_2) (v_2' - v_2) \\quad (2)\n$$\n\nDividing equation (2) by equation (1) yields:\n$$\nv_1 + v_1' = v_2' + v_2 \\Rightarrow\n\\begin{cases}\nv_1' = v_2' + v_2 - v_1 \\quad (3) \\\\\nv_2' = v_1 + v_1' - v_2 \\quad (4)\n\\end{cases}\n$$\n\nSubstituting equation (4) into equation (1) yields:\n$$\nm_1 (v_1 - v_1') = m_2 [(v_1 + v_1' - v_2) - v_2]\n$$\n$$\n(m_1 + m_2) v_1' = (m_1 - m_2) v_1 + 2 m_2 v_2 \\Rightarrow v_1' = \\frac{m_1 - m_2}{m_1 + m_2} v_1 + \\frac{2 m_2}{m_1 + m_2} v_2\n$$\n\nSubstituting equation (3) into equation (1) yields:\n$$\nm_1 [v_1 - (v_2' + v_2 - v_1)] = m_2 (v_2' - v_2)\n$$\n$$\n(m_1 + m_2) v_2' = 2 m_1 v_1 + (m_2 - m_1) v_2 \\Rightarrow v_2' = \\frac{2 m_1}{m_1 + m_2} v_1 + \\frac{m_2 - m_1}{m_1 + m_2} v_2\n$$\n\nProgram should be written to directly use the formulas for post-collision velocities.\n\nParameter Setup\n\nThe variables set here include the block widths, masses, initial velocities, colors, x-axis range, time, and time interval. The time interval dt is set to 0.0005 because setting it to 0.001 results in greater inaccuracies in calculating block energies, hence a smaller value is chosen. A 3 cm white spring is attached to the right side of the green block as a buffer for the collision. There will be a floor.\n\nScreen Setup\n\nThe code to generate the animation window, floor, blocks, and plotting window has repeatedly appeared in previous animations, and is not repeated here.\n\nCustom Functions\n\nLines 36 to 39 of the code define a function named af_col_v, which accepts parameters (m1, m2, v1, v2) and returns the velocities after the collision, v1_prime, v2_prime. This function is called on line 58 of the code:\n\nb1.v.x, b2.v.x = af_col_v(m1, m2, b1.v.x, b2.v.x)\n\nObject Movement\n\nThe animation stops when a block reaches the edge, so the while loop condition is set to:\n\nb2.pos.x <= xmax - d2/2 and b1.pos.x >= xmin + d1/2\n\nIf the distance between the centers of the two blocks is less than (d1 + d2) / 2, it indicates a collision between the blocks and the custom function af_col_v is called to compute the velocities after the collision.\n\nUpdate the positions of the blocks.\n\nBoth red and green blocks have a width of 0.1. A 3 cm spring is attached to the right side of the green block, and when the red block hits the spring, the green block undergoes the described elastic collision of the block spring system. A 3 cm spring should also be attached to the left side of the green block.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Speed_I as a cyber input variable, set Speed_I=1\n(2) Speed_I is the Initial velocity of b1. When Speed_I changes to a new value, the initial velocity of b1 also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Parameter Setup\nd1, d2 = 0.1, 0.1      # widths of blocks\nm1, m2 = 0.1, 0.2      # masses of blocks\nv1, v2 = 1, 0          # initial velocities of blocks\nx1, x2 = -0.5, 0.5     # initial x-positions of blocks\ncolor1, color2 = color.red, color.green # colors of blocks\nxmax, xmin = 3, -3     # x-axis range\nt, dt = 0, 0.0005      # time, time interval\n\n# Screen Setup\nscene = canvas(width = 600, height = 200, range = 3, background = color.white)\nfloor = box(pos = vec(0, -d1/2, 0), length = 2*xmax, height = 0.01, width = 0.8, color = color.black)\n\n# Block and spring objects\nb1 = box(pos = vec(x1, 0, 0), size = vec(d1, d1, d1), color = color1, v = vec(v1, 0, 0), m = m1)\nb2 = box(pos = vec(x2, 0, 0), size = vec(d2, d2, d2), color = color2, v = vec(v2, 0, 0), m = m2)\n\nspring1 = helix(pos = b1.pos, axis = b2.pos - b1.pos, radius = d1/4, color = color.orange, thickness = 0.01)\n\n# Custom Functions\ndef af_col_v(m1, m2, v1, v2):\n    v1_prime = ((m1 - m2)/(m1 + m2))*v1 + ((2*m2)/(m1 + m2))*v2\n    v2_prime = ((2*m1)/(m1 + m2))*v1 + ((m2 - m1)/(m1 + m2))*v2\n    return v1_prime, v2_prime\n\n# Object Movement\nwhile b2.pos.x <= xmax - d2/2 and b1.pos.x >= xmin + d1/2:\n    rate(1000)\n    if abs(b2.pos.x - b1.pos.x) <= (d1 + d2)/2:\n        b1.v.x, b2.v.x = af_col_v(m1, m2, b1.v.x, b2.v.x)\n    b1.pos = b1.pos + b1.v*dt\n    b2.pos = b2.pos + b2.v*dt\n    spring1.axis = b2.pos - b1.pos",
      "mode": "initial",
      "timestamp": "2024-07-26 12:12:45",
      "serial_number": 1
    }
  ]
}