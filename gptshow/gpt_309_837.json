{
  "session_id": 837,
  "log": [
    {
      "input": "Please write \"Rutherford Scattering\" Vpython code\nThe Rutherford scattering experiment was a pivotal piece of evidence for the existence of the atomic nucleus. When alpha particles (helium nuclei) are fired at a gold foil, the electrostatic force between the alpha particles and the gold nuclei is repulsive. Ignoring the effects of gravity, and since the gold nuclei are stationary, the electrostatic force experienced by the alpha particles as they pass close to the gold nuclei conserves angular momentum relative to the gold nuclei. Only the electrostatic force does work, conserving the mechanical energy of the system.\n\nRutherford Scattering Experiment Diagram:\n![image](https://hackmd.io/_uploads/H1zf236OC.png)\n\nThe diagram above represents a schematic of the Rutherford scattering experiment. When the alpha particle is at infinity, its velocity is directed to the right. The perpendicular distance between the gold nucleus and the direction of velocity is called the impact parameter, usually denoted as b. This program aims to vary b, plot the relationship between the kinetic energy of the alpha particle, the potential energy of the system, the mechanical energy, and time, and to find the upward displacement of the alpha particle.\n\nParameter Settings\n\nVariables are set as r1, m1, q1, c1, r2, m2, q2, c2, v0, b, L, k, t, dt, with their purposes described in the comments. To simplify numerical settings, length units are in nm, mass units are in amu, charge units are in e, time units are in ns, and the value of k is assumed to be 1.\n\nScreen Setup\nCreate an animation window.\nGenerate a nucleus.\nGenerate arrows to represent velocity and acceleration.\nCreate a plotting window.\n\nObject Motion\nThe animation continues as long as the particle is within -L/2 < x < L/2, -L/2 < y < L/2, so the condition in the while loop is set as (abs(alpha.pos.x) < L/2 and abs(alpha.pos.y) < L/2).\n\nCalculate the resultant force on the helium nucleus, update the helium nucleus\u2019s acceleration, velocity, and position.\n\nElectrostatic Force Formula\nThe electrostatic force \\( F \\) is calculated by:\n\n\\[\nF = \\frac{k \\cdot q_{\\alpha} \\cdot q_{\\text{Au}}}{r^2} \\cdot \\hat{r}\n\\]\n\nWhere:\n- \\( k \\) is the assumed constant for electrostatic force.\n- \\( q_{\\alpha} = 2e \\) is the charge of the helium nucleus.\n- \\( q_{\\text{Au}} = 79e \\) is the charge of the gold nucleus.\n- \\( r \\) is the distance between the two nuclei.\n- \\( \\hat{r} \\) is the unit vector of the position vector.\n\nAcceleration of the Helium Nucleus\nThe acceleration \\( \\alpha.a \\) of the helium nucleus is calculated by:\n\n\\[\n\\alpha.a = \\frac{F}{m_{\\alpha}}\n\\]\n\nWhere:\n- \\( F \\) is the electrostatic force.\n- \\( m_{\\alpha} = 4 \\ \\text{amu} \\) is the mass of the helium nucleus.\n\nKinetic Energy of the Helium Nucleus\nThe kinetic energy \\( K \\) of the helium nucleus is calculated by:\n\n\\[\nK = \\frac{1}{2} m_{\\alpha} v_{\\alpha}^2\n\\]\n\nWhere:\n- \\( m_{\\alpha} \\) is the mass of the helium nucleus.\n- \\( v_{\\alpha} \\) is the speed of the helium nucleus.\n\nPotential Energy of the System\nThe potential energy \\( U \\) of the system is calculated by:\n\n\\[\nU = \\frac{k \\cdot q_{\\alpha} \\cdot q_{\\text{Au}}}{r}\n\\]\n\nWhere:\n- \\( k \\) is the assumed constant for electrostatic force.\n- \\( q_{\\alpha} \\) is the charge of the helium nucleus.\n- \\( q_{\\text{Au} \\) is the charge of the gold nucleus.\n- \\( r \\) is the distance between the two nuclei.\n\nTotal Mechanical Energy of the System\nThe total mechanical energy \\( E \\) of the system is calculated by:\n\n\\[\nE = K + U\n\\]\n\nWhere:\n- \\( K \\) is the kinetic energy of the helium nucleus.\n- \\( U \\) is the potential energy of the system.\n\nA small red ball with a radius of 0.2 starts from (0,0,0), moving horizontally at an initial velocity of (10, 0, 0). The red ball has a charge of 4e and a mass of 4 amu. There is a larger yellow ball with a charge of 79e and a mass of 197 amu at (7,0,0). The red ball is influenced by the yellow ball during its motion, following the formulas mentioned above, resulting in Rutherford scattering.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=0.5\n\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Constants\nk = 1\nq1 = 2\nq2 = 79\nm1 = 4\nm2 = 197\nv0 = 10\nb = 1\nL = 50\nt = 0\ndt = 0.001\n\n# Scene\nscene = canvas(x=0, y=0, width=800, height=400, background=vec(0.5, 0.5, 0))\nalpha = sphere(pos=vec(-25, b, 0), radius=0.5, color=color.red, m=m1, q=q1, v=vec(v0, 0, 0), a=vec(0, 0, 0), make_trail=True)\ngold = sphere(pos=vec(0, 0, 0), radius=1, color=color.yellow, m=m2, q=q2)\nalpha.v_arrow = arrow(pos=alpha.pos, axis=alpha.v, shaftwidth=0.2, color=color.blue)\nalpha.a_arrow = arrow(pos=alpha.pos, axis=alpha.a, shaftwidth=0.2, color=color.green)\n\n# Graphs\ngd = graph(x=0, y=400, width=600, height=400, title='Energy vs Time',\n           xtitle='Time (ns)', ytitle='Energy (a.u.)', foreground=color.black, background=color.white)\nkt = gcurve(graph=gd, color=color.blue, width=4)\nut = gcurve(graph=gd, color=color.red, width=4)\net = gcurve(graph=gd, color=color.green, width=4)\n\n# Time evolution\nwhile abs(alpha.pos.x) < L/2 and abs(alpha.pos.y) < L/2:\n    rate(1000)\n    r = alpha.pos - gold.pos\n    F = k * alpha.q * gold.q / mag2(r) * norm(r)\n    alpha.a = F / alpha.m\n    alpha.v += alpha.a * dt\n    alpha.pos += alpha.v * dt\n    alpha.v_arrow.pos = alpha.pos\n    alpha.v_arrow.axis = alpha.v\n    alpha.a_arrow.pos = alpha.pos\n    alpha.a_arrow.axis = alpha.a\n    K = 0.5 * alpha.m * mag2(alpha.v)\n    U = k * alpha.q * gold.q / mag(r)\n    E = K + U\n    kt.plot(t, K)\n    ut.plot(t, U)\n    et.plot(t, E)\n    t += dt",
      "mode": "initial",
      "timestamp": "2024-07-26 10:57:48",
      "serial_number": 1
    }
  ]
}