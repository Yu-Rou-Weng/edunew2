{
  "session_id": 668,
  "log": [
    {
      "input": "# Velocity Selector\n\nA velocity selector is a device used to filter charged particles with specific speeds. Its basic structure is depicted in the diagram below. Two parallel charged plates create a downward electric field, combined with a magnetic field perpendicular to the plane of the paper. If a positively charged particle enters the velocity selector from the left with a horizontal speed \\( v \\), the particle experiences a downward electrostatic force and an upward magnetic force. When these forces balance out, the particle moves forward at a constant speed. At this point:\n$$\nqE = qvB \\Rightarrow v = \\frac{E}{B} = \\frac{V}{Bd}\n$$\n\nIf a barrier with only a small hole is added on the right side, only particles moving straight forward to the right can pass through. By altering the values of the electric and magnetic fields, the speed of the particles passing through the device can be controlled. Below are two programs:\n\n- Program 20-1: Draw the electric field, magnetic field, parallel charged plates, and the trajectory of the particle\u2019s motion. The particle stops moving after hitting the parallel charged plates.\n- Program 20-2: Based on 20-1, add a barrier at the exit.\n\nAssignment: Write program 20-1: Draw the electric field, magnetic field, parallel charged plates, and the trajectory of the particle\u2019s motion. The particle stops moving after hitting the parallel charged plates.\n\nVelocity Selector Structural Diagram:\n![image](https://hackmd.io/_uploads/HJlvr2auR.png)\n\n## Parameter Settings\n\nVariables are set as size, m, v0, q, V, d, L, B, E_field, B_field, t, dt, with their purposes described in the comments of each line. To ensure smoother animation, the mass of the particle is significantly larger than the mass of a real atomic nucleus.\n\n## Display Settings\n\nGenerate an animation window, parallel charged plates, a horizontal line, and charged particles.\n\nGenerate arrows representing velocity and acceleration.\n\nGenerate arrows and labels for the electric and magnetic fields. The syntax for labels is:\n\n[label_name] = label(pos=[position vector], text=\"[label content]\", xoffset=[x-direction offset], yoffset=[y-direction offset], color=[color name or RGB value], font=\"[font name]\")\nReplace the content in [] with your required parameters.\n\nOpen the drawing window, draw graphs showing the relationship between the position, velocity, acceleration of the sphere, and time.\n\n## Object Movement\n\nTo stop the animation when the charged particle reaches the far right side of the screen or hits the parallel charged plates, the condition in the while loop is set as charge.pos.x < L and abs(charge.pos.y) < d/2 - p1.height - size.\n\nCalculate the net force on the charged particle, which is present only between the parallel charged plates and set to zero outside. The formula for calculating the net force on the charged particle is:\n$$\n\\vec{F} = q(\\vec{E} + \\vec{v} \\times \\vec{B})\n$$\nThe corresponding code is:\n\nF = q*(E_field + cross(charge.v, B_field))\nUpdate the charged particle\u2019s acceleration, velocity, and position.\n\nUpdate the arrows representing velocity and acceleration, only showing direction to avoid automatic resizing of the animation.\n\nUpdate time.\n\n## Simulation Results\n\nBelow are five different data combinations and their test results:\n\n1. v0 = 10, V = 1, d = 0.1, B = 1 \u21d2 Uniform linear motion\n\nScreenshot:\n![image](https://hackmd.io/_uploads/r1w2B2TuC.png)\n\n2. q > 0, v0 = 20, other conditions same as combination 1 \u21d2 Shifts upward\n\nScreenshot:\n![image](https://hackmd.io/_uploads/H1oaB26uC.png)\n\n3. q > 0, d = 0.2, other conditions same as combination 1 \u21d2 Shifts upward\n\nScreenshot:\n![image](https://hackmd.io/_uploads/SyL1U36OC.png)\n\n4. q > 0, V = 2, other conditions same as combination 1 \u21d2 Shifts downward\n\nScreenshot:\n![image](https://hackmd.io/_uploads/ByvlInp_R.png)\n\n5. q > 0, B = 5, other conditions same as combination 1 \u21d2 Shifts upward\n\nScreenshot:\n![image](https://hackmd.io/_uploads/Bk1fLna_A.png)\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Parameter Settings\nsize = 0.02    # radius of the particle\nm = 1E-11    # kg\nv0 = 10.0    # m/s\nq = 1E-5    # C\nV = 1.0    # potential difference between the plates (V)\nd = 0.1    # distance between the plates (m)\nL = 2.0    # length of the plates (m)\nB = 1.0    # magnetic field (T)\nE_field = vec(0, -V/d, 0)    # electric field vector (V/m)\nB_field = vec(0, 0, -B)    # magnetic field vector (T)\nt = 0    # s\ndt = 1E-3    # s\n\n# Display Settings\nscene = canvas(title=\"Velocity Selector\", width=800, height=200, x=0, y=0,\n               center=vec(L/2, 0, 0), background=color.black)\np1 = box(pos=vec(L/2, -d/2, 0), length=L, height=0.01, width=0.3, color=color.blue)\np2 = box(pos=vec(L/2, d/2, 0), length=L, height=0.01, width=0.3, color=color.blue)\nline = curve(pos=[vec(0, -d/2, 0), vec(0, d/2, 0)], color=color.yellow)\ncharge = sphere(pos=vec(0, 0, 0), radius=size, color=color.red, v=vec(v0, 0, 0))\nv_arrow = arrow(pos=charge.pos, axis=charge.v, shaftwidth=0.01, color=color.green)\na_arrow = arrow(pos=charge.pos, axis=vec(0, 0, 0), shaftwidth=0.01, color=color.white)\nE_arrow = arrow(pos=vec(L/2, d/2, 0), axis=vec(0, -0.1, 0), shaftwidth=0.02, color=color.yellow)\nB_arrow = arrow(pos=vec(L/2, d/2, 0), axis=vec(0, 0, -0.1), shaftwidth=0.02, color=color.red)\nE_label = label(pos=E_arrow.pos, text='E', xoffset=-20, yoffset=-25, space=30, height=16, border=4, font='sans')\nB_label = label(pos=B_arrow.pos, text='B', xoffset=20, yoffset=-25, space=30, height=16, border=4, font='sans')\n\n# Object Movement\nwhile charge.pos.x < L and abs(charge.pos.y) < d/2 - p1.height - size:\n    rate(1000)\n    if abs(charge.pos.y) < d/2:\n        F = q * (E_field + cross(charge.v, B_field))\n    else:\n        F = vec(0, 0, 0)\n    charge.a = F / m\n    charge.v += charge.a * dt\n    charge.pos += charge.v * dt\n    v_arrow.pos = charge.pos\n    v_arrow.axis = charge.v / 3\n    a_arrow.pos = charge.pos\n    a_arrow.axis = charge.a / 3\n    t += dt",
      "mode": "initial",
      "timestamp": "2024-07-24 07:29:13",
      "serial_number": 1
    }
  ]
}