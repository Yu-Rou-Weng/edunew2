{
  "session_id": 664,
  "log": [
    {
      "input": "Mass Spectrometer: Automated Execution for 5 Types of Particles Using a For Loop\n\nFive types of particles, each entering a uniform magnetic field B at the same velocity and perpendicular to the field, trace the paths as shown in the diagram below. The particles are: carbon atom ($^{12}$C), oxygen ion ($^{16}$O$^{2-}$), sodium ion ($^{23}$Na$^+$), magnesium ion ($^{24}$Mg$^{2+}$), and chlorine ion ($^{35}$Cl$^-$). Ignoring gravity, the paths labeled 1, 2, 3, 4, and 5 in the diagram correspond to which particles?\n\nThis is a question from the 1995 Joint University Entrance Exam in Japan. Although it's a bit dated, this problem can still be found in various reference books. When particles with positive charge enter the magnetic field from below, the magnetic force acts to the left, while for negatively charged particles, it acts to the right. Neutral particles are not affected by magnetic forces. Assuming the magnetic force serves as the centripetal force for uniform circular motion in the magnetic field, the relationship is:\n$$\nqvB = m \\cdot \\frac{v^2}{R} \\Rightarrow R = \\frac{mv}{qB} \\propto \\frac{m}{q}\n$$\n\nTherefore, the answer to the question is $^{23}$Na$^+$, $^{24}$Mg$^{2+}$, $^{12}$C, $^{16}$O$^{2-}$, $^{35}$Cl$^-$. We will attempt to use VPython to visually simulate the motion of these particles in the mass spectrometer.\n\nProgramming Part\nThe program for the mass spectrometer, which automates the process for 5 types of particles using a for loop, is similar to the basic version. Below are the modifications:\n\nAdded particle label data `labels`, which supports HTML syntax in VPython, allowing for superscript and subscript effects. Text within `<sup></sup>` indicates superscripts, and text within `<sub></sub>` indicates subscripts.\n\nThe program uses a for loop to load the names of the particles, and includes particle creation and motion within a while loop nested inside the for loop. Once the while loop completes, labels are added to the particles.\n\nSimulation Results\nThe following is the output from Program 23-2, which shows that the radius of curvature of the particles is directly proportional to m/q.\n\nScreenshot of Program 23-2:\n![image](https://hackmd.io/_uploads/HkDwi3aO0.png)\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Constants\nB = vector(0, 0, 1)  # magnetic field\nv = vector(0, 1, 0)  # initial velocity\nRadius_I = 1  # initial radius\n\n# Particle data\nparticles = [\n    {\"name\": \"<sup>23</sup>Na<sup>+</sup>\", \"m\": 23, \"q\": 1},\n    {\"name\": \"<sup>24</sup>Mg<sup>2+</sup>\", \"m\": 24, \"q\": 2},\n    {\"name\": \"<sup>12</sup>C\", \"m\": 12, \"q\": 0},\n    {\"name\": \"<sup>16</sup>O<sup>2-</sup>\", \"m\": 16, \"q\": -2},\n    {\"name\": \"<sup>35</sup>Cl<sup>-</sup>\", \"m\": 35, \"q\": -1},\n]\n\n# Create scene\nscene = canvas(title=\"Mass Spectrometer\")\n\n# For each particle\nfor i, p in enumerate(particles):\n    # Create particle\n    particle = sphere(pos=vector(i * Radius_I, 0, 0), radius=Radius_I, color=color.red)\n    particle.m = p[\"m\"]\n    particle.q = p[\"q\"]\n    particle.v = v\n    particle.trail = curve(color=particle.color)\n\n    # Create label\n    particle.label = label(pos=particle.pos, text=p[\"name\"], space=particle.radius * 1.2, height=10, box=False)\n\n    # While loop for motion\n    while mag(particle.pos) < 5 * Radius_I:\n        rate(100)\n        # Force and acceleration\n        F = particle.q * cross(particle.v, B)\n        a = F / particle.m\n        # Update velocity and position\n        particle.v += a\n        particle.pos += particle.v\n        # Update label and trail\n        particle.label.pos = particle.pos\n        particle.trail.append(pos=particle.pos)",
      "mode": "initial",
      "timestamp": "2024-07-24 07:27:28",
      "serial_number": 1
    }
  ]
}