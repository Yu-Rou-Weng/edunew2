{
  "session_id": 858,
  "log": [
    {
      "input": "1. Screen Settings\nSet the width of the canvas to 700 and the height to 400. Please draw the trajectory of the ball's movement. The center point of the canvas needs to be correctly set, therefore the sequence of writing the Parameter Settings must be after the Screen Settings. Do not adjust the size of the scene.\n\n2. Object Motion & Parameter Settings\nPlease draw a VPython animation of horizontal projectile motion: a ball is thrown horizontally, hits the floor, and bounces. Draw both the ball and the floor. Assume that the ball undergoes an elastic collision with the ground, considering only the effect of gravity, i.e., the ball accelerates downward under the influence of gravity and bounces upon hitting the ground. Allow the ball to move for 6 seconds and then stop the motion.\n\n3. Cyber Input Variable Mapping Information:\n\n(1) Define and initialize a Cyber Input Variable named `Speed_I` with an initial value set to 5. This variable represents the speed of the ball.\n\n(2) During the animation, whenever the value of the Speed_I variable changes, let the animation rerun with the updated ball speed.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Screen Settings\nscene = canvas(width = 700, height = 400, center = vector(0,0,0))\n\n# Parameter Settings\ng = vector(0, -9.8, 0) # acceleration due to gravity\ndt = 0.01 # time step\nt = 0 # initial time\nbouncing_coef = 1 # assuming elastic collision\nSpeed_I = 5 # initial speed of the ball\n\n# Object Motion\nball = sphere(pos=vector(0, 0, 0), radius=1, color=color.red)\nball.velocity = vector(Speed_I, 0, 0)\nfloor = box(pos=vector(0, -2, 0), size=vector(10, 0.5, 10), color=color.green)\n\nwhile t < 6:\n    rate(100)\n    ball.pos = ball.pos + ball.velocity*dt\n    ball.velocity.y = ball.velocity.y + g.y*dt\n\n    # bounce back if hit the floor\n    if ball.pos.y <= floor.pos.y + floor.size.y/2 + ball.radius and ball.velocity.y < 0:\n        ball.velocity.y = -ball.velocity.y*bouncing_coef\n\n    t = t + dt\n\n# Cyber Input Variable Mapping Information\nwhile True:\n    rate(100)\n    if Speed_I != ball.velocity.x:\n        t = 0\n        ball.pos = vector(0, 0, 0)\n        ball.velocity = vector(Speed_I, 0, 0)\n        while t < 6:\n            rate(100)\n            ball.pos = ball.pos + ball.velocity*dt\n            ball.velocity.y = ball.velocity.y + g.y*dt\n\n            if ball.pos.y <= floor.pos.y + floor.size.y/2 + ball.radius and ball.velocity.y < 0:\n                ball.velocity.y = -ball.velocity.y*bouncing_coef\n\n            t = t + dt",
      "mode": "initial",
      "timestamp": "2024-08-16 17:32:02",
      "serial_number": 1
    }
  ]
}