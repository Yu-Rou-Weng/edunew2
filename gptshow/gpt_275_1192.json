{
  "session_id": 1192,
  "log": [
    {
      "input": "# Gravity Field and Electric Field## Physical Motion DescriptionWhen a uniform spherical mass is present in space, with the center of the sphere as the origin, the gravitational field at a given position vector is directed toward the center of the sphere. The magnitude and direction of the gravitational field vary depending on the distance from the mass center. If multiple masses exist, the gravitational field is the vector sum of the fields generated by each mass.The gravitational field lines represent the intensity and direction of the gravitational field at various positions, often depicted with arrows of varying lengths and orientations.In addition, for charged spherical objects, the electric field at any point in space is determined by Coulomb\u2019s law. The electric field lines, like gravitational field lines, visually represent the field's magnitude and direction using arrows. The electric field direction depends on the nature of the charges (positive or negative), and the magnitude varies with the distance from the charge.The following simulations provide visual representations:Calculates and updates the gravitational field for a spherical mass.These visualizations aid in understanding the spatial distribution and variation of gravitational and electric fields, serving as an effective tool for learning basic physics concepts.",
      "output": "from vpython import *\n\nscene = canvas(title='Gravity Field and Electric Field', width=800, height=600)\n\n# Create a spherical mass\nsphere(pos=vector(0,0,0), radius=2, color=color.blue)\n\n# Function to calculate gravitational field\ndef calc_gravity_field(r):\n    G = 6.67e-11\n    M = 1e14\n    g = -G*M/mag(r)**2 * norm(r)\n    return g\n\n# Function to calculate electric field\ndef calc_electric_field(r):\n    k = 9e9\n    Q = 1e-6\n    E = k*Q/mag(r)**2 * norm(r)\n    return E\n\n# Visualize gravitational field lines\nfor x in range(-10, 11):\n    for y in range(-10, 11):\n        for z in range(-10, 11):\n            pos = vector(x, y, z)\n            if pos != vector(0, 0, 0):\n                g_field = calc_gravity_field(pos)\n                arrow(pos=pos, axis=g_field, color=color.green)\n\n# Visualize electric field lines\nfor x in range(-10, 11):\n    for y in range(-10, 11):\n        for z in range(-10, 11):\n            pos = vector(x, y, z)\n            if pos != vector(0, 0, 0):\n                e_field = calc_electric_field(pos)\n                arrow(pos=pos, axis=e_field, color=color.red)",
      "mode": "initial",
      "timestamp": "2024-12-26 19:27:08",
      "serial_number": 1
    }
  ]
}