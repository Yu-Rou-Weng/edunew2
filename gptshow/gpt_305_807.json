{
  "session_id": 807,
  "log": [
    {
      "input": "# Electron Charge-to-Mass Ratio\n\nThe experimental setup for measuring the electron charge-to-mass ratio is shown below. The appearance is very similar to that of a velocity selector, so we slightly modified the program for the velocity selector to create an animation for the electron charge-to-mass ratio experiment.\n### Schematic of the Experimental Setup\n![image](https://hackmd.io/_uploads/SkTFu36OR.png)\n\n## Theoretical Analysis\n\nRefer to the figure above, where the particle has mass $m$ and charge $q$, entering a downward uniform electric field $E$ with a horizontal velocity $v_0$ to the right. The length of the parallel charged plates is $L$, and the distance from the right side of the parallel plates to the screen is $D$. Considering only the electrostatic force, the acceleration of the particle upwards in the electric field is\n$$\na = \\frac{qE}{m}\n$$\n\nThere is no external force in the horizontal direction, and the particle moves at a constant speed, so the time of motion in the electric field is\n$$\nt_1 = \\frac{L}{v_0}\n$$\n\nThe upward displacement is\n$$\ny_1 = \\frac{1}{2} a t_1^2 = \\frac{1}{2} \\left( \\frac{qE}{m} \\right) \\left( \\frac{L}{v_0} \\right)^2\n$$\n\nThe upward velocity of the particle when it leaves the electric field is\n$$\nv_{y1} = a t_1 = \\frac{qEL}{mv_0}\n$$\n\nOutside the electric field, the particle moves in a straight line at a constant speed, and the time of motion outside the electric field is\n$$\nt_2 = \\frac{D}{v_0}\n$$\n\nThe upward displacement is\n$$\ny_2 = v_{y1} t_2 = \\left( \\frac{qEL}{mv_0} \\right) \\left( \\frac{D}{v_0} \\right) = \\frac{qELD}{mv_0^2}\n$$\n\nThe total upward displacement is\n$$\ny = y_1 + y_2 = \\frac{qE}{2m} \\left( \\frac{L^2}{v_0^2} \\right) + \\frac{qELD}{mv_0^2} = \\frac{qEL(L + 2D)}{2mv_0^2}\n$$\n\nThe charge-to-mass ratio of the charged particle is\n$$\n\\frac{q}{m} = \\frac{2yv_0^2}{E L (L + 2D)}\n$$\n\nThe magnitude of the electric field can be determined by the voltage and distance between the parallel charged plates, and the initial velocity $v_0$ can be controlled by the velocity selector, so all data except for the charge-to-mass ratio can be measured in the experiment.\n\nPlease write a Vpython program for \"Electron Charge-to-Mass Ratio\":\n\nAt positions (0,5,0) and (0,-5,0) there are two horizontal, parallel, blue charged plates, each 10 cm long. At (10,0,0) there is a blue charged plate 10 cm high and 5 cm wide along the z-axis. A green arrow representing the electric field points from (-5,5,0) to (-5,-5,0), labeled as \u201cE\u201d. The electric field exists only between the two parallel blue charged plates.\n\nA red particle starts at (0,0,0). This particle is a red sphere with a radius of 0.005, influenced by the electric field between the two parallel blue charged plates, beginning its motion for the electron charge-to-mass ratio horizontally, stopping when it hits the charged blue plate. Please draw the trajectory of the red particle's motion as the red particle moves through the gap between the two baffles and stops at position (7,0,0).\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not zoom out the scene.\n(4) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Constants\nL = 10E-2\nD = 7E-2\nE = 1E4\nv0 = 1E6\nq_m_ratio = 1.7588E11\nRadius_I = 1\n\n# Create objects\nplate1 = box(pos=vector(0, 5E-2, 0), size=vector(L, 0.1E-2, 10E-2), color=color.blue)\nplate2 = box(pos=vector(0, -5E-2, 0), size=vector(L, 0.1E-2, 10E-2), color=color.blue)\nscreen = box(pos=vector(L+D, 0, 0), size=vector(0.1E-2, 10E-2, 5E-2), color=color.blue)\nE_arrow = arrow(pos=vector(-5E-2, 5E-2, 0), axis=vector(0, -10E-2, 0), color=color.green)\nE_label = label(pos=E_arrow.pos, text='E', xoffset=20, yoffset=-25, space=30, height=16, font='sans')\n\n# Create electron\nelectron = sphere(pos=vector(0, 0, 0), radius=Radius_I*1E-2, color=color.red)\nelectron.v = vector(v0, 0, 0)\nelectron.a = vector(0, q_m_ratio*E, 0)\n\n# Create trail\ntrail = curve(color=electron.color)\n\n# Time step\ndt = 1E-11\n\nwhile electron.pos.x < L+D:\n    rate(1E11)\n    electron.v += electron.a*dt\n    electron.pos += electron.v*dt\n    trail.append(pos=electron.pos)",
      "mode": "initial",
      "timestamp": "2024-07-26 02:02:46",
      "serial_number": 1
    }
  ]
}