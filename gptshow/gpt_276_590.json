{
  "session_id": 590,
  "log": [
    {
      "input": "# Vertical Circular Motion\n\n## Theoretical Analysis\n\nTo simplify the calculation process, I set the center of the circle at the origin. The sphere starts from $(0, R, 0)$ with an initial velocity of $(-v_0, 0, 0)$. The acceleration can be divided into normal acceleration $a_n$, which is the centripetal acceleration $a_c$, and tangential acceleration $a_t$. The calculation of $a_n$ is the same as in Program 7-1 and will not be reiterated here. The source of $a_t$ is the tangential component of gravitational acceleration. Assuming the angle between the sphere and the vertical line is $\\theta$, then $$a_t = g \\sin{\\theta}$$\n\nThe y-component of $a_t$ is downward, with magnitude $$a_{t,y} = a_t \\sin{\\theta} = g \\sin^2{\\theta}$$\n\nThe x-component of $a_t$ depends on the position; it points right in the first and third quadrants, and left in the second and fourth quadrants, with magnitude\n$$\na_{t,x} = a_t \\cos{\\theta} = g \\sin{\\theta} \\cos{\\theta}\n$$\n\nIf one only wants to find the period, it can be calculated using conservation of mechanical energy. Assuming the velocity magnitude at the highest point is\n$$\nv_0 = \\sqrt{ngR}\n$$\n\nFrom the conservation of mechanical energy, the relationship between any point and the highest point can be established as [9]\n$$\n\\frac{1}{2} m v^2 + m g R \\cos{\\theta} = \\frac{1}{2} m n^2 g R + m g R\n$$\n$$\nv = R \\frac{d\\theta}{dt} = \\sqrt{(n^2 + 2 - 2 \\cos{\\theta}) g R}\n$$\n$$\nT = \\int_0^T dt = 2 \\frac{R}{g} \\int_0^\\pi \\frac{d\\theta}{\\sqrt{n^2 + 2 - 2 \\cos{\\theta}}}\n$$\n\n## Parameter Configuration\n\nVariables defined here include size, R, g, v0, ratio, i, t, dt, all of which have their uses noted in the comments of their respective lines. To reduce the time length-induced errors, the value of dt has been adjusted to 0.0001.\n\n## Screen Configuration\n\nThe sphere moves in the xy-plane, starting from a point directly above at distance R, with initial velocity pointing towards the -x axis. There is no need to adjust the observer's position and direction.\nThe axis direction is set to point towards the +z axis.\narrow_v and arrow_a are used to display the velocity and acceleration of the sphere with arrows.\n\n## Custom Functions\n\nCustom function findan, which takes v and pos as input parameters, both in vector format, is used to calculate the sphere's normal acceleration an.\nCustom function findat, taking pos as a parameter in vector format, is used to calculate the sphere's tangential acceleration $a_t$. The angle between the rope and the vertical line is $\\theta$, first calculate $\\sin{\\theta}$ and $\\cos{\\theta}$, and as $\\theta$ is always acute, both are positive. Then compute $a_{t,y}$ and $a_{t,x}$, and determine the sign of $a_{t,x}$ based on pos.\n\n## Object Motion\n\nThe condition for the sphere returning to the starting point is determined by its initial position xp in the +x region, and its current position xc in the -x region. When the sphere returns to the starting point, print the elapsed time t, increment the count i by 1, and stop the animation after 5 returns.\nDue to the small dt, the number of calculations per second is increased to 5000 to speed up the animation.\nUse custom functions findan and findat to calculate the sphere's normal and tangential accelerations.\nUpdate the sphere's velocity and position, update the starting point, direction, and length of the arrows, and update the time.\n\n## Data Handling Section\n\nIf the velocity magnitude at the highest point is\n$$\nv_0 = n \\sqrt{gR}\n$$\n, substitute n from 1 to 7, and find the period from both simulation and theoretical calculations, the data is as follows:\n\nn | v0 | T theoretical | T simulation\n---|----|---------------|--------------\n1 | 7 | 2.8841511713977500 | 2.8838000000016613\n2 | 14 | 1.8728982530658000 | 1.8728999999998102\n3 | 21 | 1.3617223964215400 | 1.3617999999999999\n4 | 28 | 1.0602946238731300 | 1.0602999999998997\n5 | 35 | 0.8646052540953560 | 0.8645999999999211\n6 | 42 | 0.7284267507699600 | 0.7283999999999361\n7 | 49 | 0.6286255969937600 | 0.6285999999999471\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=0.5\n\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes accordingly.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Parameter Configuration\nsize = 0.02\nR = 0.5\ng = 9.8\nv0 = sqrt(2*g*R)\nratio = 3\ni, t, dt = 0, 0, 0.0001\n\n# Screen Configuration\nscene = canvas(width=800, height=800, background=vec(0.5, 0.5, 0), center=vec(0, -R/2, 0), align='left')\n\nxp = R\nyc = curve(pos=[vec(0, 0, 0), vec(0, R, 0)], color=color.yellow)\nxaxis = curve(pos=[vec(-1.5*R, 0, 0), vec(1.5*R, 0, 0)], color=color.white)\nyaxis = curve(pos=[vec(0, -1.5*R, 0), vec(0, 1.5*R, 0)], color=color.white)\nball = sphere(radius=size, color=color.red, make_trail=True, trail_type='points', interval=10, retain=50)\nv_arrow = arrow(color=color.green, shaftwidth=0.8*size, fixedwidth=True)\na_arrow = arrow(color=color.blue, shaftwidth=0.8*size, fixedwidth=True)\n\n# Custom Functions\ndef findan(v, pos):\n    return (mag(v)**2/mag(pos))*norm(pos)\n\ndef findat(pos):\n    theta = acos(pos.y/mag(pos))\n    ax = g*sin(theta)*cos(theta)\n    ay = -g*sin(theta)**2\n    if pos.x < 0:\n        ax = -ax\n    return vec(ax, ay, 0)\n\n# Object Motion\nball.v, ball.pos = vec(-v0, 0, 0), vec(0, R, 0)\nwhile True:\n    rate(5000)\n    an = findan(ball.v, ball.pos)\n    at = findat(ball.pos)\n    a = an + at*ratio\n    if ball.pos.x > 0 and xp <= 0 and i < 5:\n        print('T =', t*2)\n        i += 1\n    ball.v += a*dt\n    ball.pos += ball.v*dt\n    v_arrow.pos, a_arrow.pos = ball.pos, ball.pos\n    v_arrow.axis, a_arrow.axis = ball.v/3, a/3\n    xp, t = ball.pos.x, t+dt",
      "mode": "initial",
      "timestamp": "2024-07-24 02:34:11",
      "serial_number": 1
    }
  ]
}