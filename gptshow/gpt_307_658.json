{
  "session_id": 658,
  "log": [
    {
      "input": "Mass Spectrometer\n\nThere are 5 particles entering a uniform magnetic field B at the same velocity and perpendicular to the field, with trajectories as shown in the figure below. Assume these 5 particles are: carbon atom ($^{12}$C), oxygen ion ($^{16}$O$^{2-}$), sodium ion ($^{23}$Na$^+$), magnesium ion ($^{24}$Mg$^{2+}$), and chlorine ion ($^{35}$Cl$^-$). If gravitational effects are ignored, the paths 1, 2, 3, 4, and 5 in the diagram respectively represent which particles?\n\nParticle Trajectory Diagram in the Mass Spectrometer:\n\n![image](https://hackmd.io/_uploads/HJuF5hp_0.png)\n\nThis is an exam question from the 1995 Joint University Entrance Examination in Japan. Although this question is quite old, it can still be found in various reference books. When particles with positive charge enter the magnetic field from above, the magnetic force acts to the left, while for particles with negative charge, it acts to the right. Neutral particles are not affected by magnetic forces. Assuming the magnetic force serves as the centripetal force for uniform circular motion in the magnetic field, the equation is:\n$$\nqvB = m \\cdot \\frac{v^2}{R} \\Rightarrow R = \\frac{mv}{qB} \\propto \\frac{m}{q}\n$$\n\nThus, the answer to this question is $^{23}$Na$^+$, $^{24}$Mg$^{2+}$, $^{12}$C, $^{16}$O$^{2-}$, $^{35}$Cl$^-$. This time, we will attempt to illustrate the motion of these particles in the mass spectrometer using VPython.\n\nSimulation Results\n\nBelow are the results for three different particles. Program 23-1 is for testing; it inputs one particle at a time and observes the results. Next, we will use a for loop to draw the trajectories of all 5 particles.\n\nProgram 23-1: 12C Screenshot\n![image](https://hackmd.io/_uploads/ByRi53a_A.png)\n\nProgram 23-1: 16O2- Screenshot\n![image](https://hackmd.io/_uploads/rkyachadR.png)\n\nProgram 23-1: 23Na+ Screenshot\n![image](https://hackmd.io/_uploads/H1Eac3Td0.png)\n\nParameter Settings\nVariables such as size, m, q, masses, charges, colors, particles, v0, L, B_field, t, dt are defined with their purposes commented in the code. To make the animation smoother, the charge and mass of the particles are intentionally increased significantly.\n\nDisplay Settings\nCreates an animation window and metal plates.\nGenerates charged particles, allowing selection by particle name. The program retrieves particle data from masses, charges, and colors.\nGenerates arrows and labels representing the magnetic field.\nGenerates arrows representing velocity and acceleration.\n\nObject Motion\nA while loop continues under the following conditions: (abs(particle.pos.x) < 0.1*size and particle.pos.y < L/2) or (abs(particle.pos.x) > 0 and particle.pos.y > p1.height/2 + size)\n(a) First condition: The animation continues as long as the particle has not deviated (-0.1size < x < 0.1size) and has not yet reached the top of the display (particle.pos.y < L/2).\n(b) Second condition: The animation continues as long as the particle has deviated to the left or right (abs(particle.pos.x) > 0) and has not yet hit the metal plate (particle.pos.y > p1.height/2 + size).\n\nCalculates the net force on a charged particle, updates the particle's acceleration, velocity, and position.\n\nUpdates the arrows representing velocity and acceleration, displaying only direction to prevent automatic resizing of the animation.\n\nUpdates time.\n\nCyber Input Variable Mapping Information:\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Parameters\nsize = 1e-11\nm, q = 1.6726219e-27, 1.60217663e-19\nmasses = {'C':12.01, 'O':15.999, 'Na':22.99, 'Mg':24.305, 'Cl':35.45}\ncharges = {'C':0, 'O':-2, 'Na':1, 'Mg':2, 'Cl':-1}\ncolors = {'C':color.gray(0.5), 'O':color.red, 'Na':color.orange, 'Mg':color.cyan, 'Cl':color.green}\nparticles = {}\nv0, L = 5e5, 3e-9\nB_field = vec(0, 0, 1e-4)\nt, dt = 0, 1e-16\n\n# Display Settings\nscene = canvas(width=600, height=600, align='left', background=vec(0.2, 0.5, 0.5),\n               ambient=vec(0.2, 0.2, 0.2), center=vec(0, L/6, 0), range=L/2)\n\np1 = box(pos=vec(-1.5*size, -L/10, 0), size=vec(3*size, L/5, 3*size), color=color.blue)\np2 = box(pos=vec(1.5*size, -L/10, 0), size=vec(3*size, L/5, 3*size), color=color.blue)\n\nfor name in masses:\n    particles[name] = sphere(pos=vec(0, -L/2, 0), radius=size, m=masses[name]*m, q=charges[name]*q,\n                             v=vec(0, v0, 0), color=colors[name], make_trail=True, retain=50, visible=False)\n\nB_field_arrow = arrow(pos=vec(0, L/2, 0), axis=vec(0, -L/3, 0), color=color.white, shaftwidth=size/2)\nB_field_label = label(pos=B_field_arrow.pos, text='B', color=B_field_arrow.color, yoffset=-30, box=False)\n\nv_arrow = arrow(color=color.yellow, shaftwidth=size/4, visible=False)\na_arrow = arrow(color=color.magenta, shaftwidth=size/4, visible=False)\n\n# Object Motion\nfor name in particles:\n    particles[name].visible = True\n    particles[name].pos, particles[name].v = vec(0, -L/2, 0), vec(0, v0, 0)\n    v_arrow.visible, a_arrow.visible = True, True\n    while (abs(particles[name].pos.x) < 0.1*size and particles[name].pos.y < L/2) or \\\n          (abs(particles[name].pos.x) > 0 and particles[name].pos.y > p1.height/2 + size):\n        rate(1000)\n        F_net = particles[name].q * cross(particles[name].v, B_field)\n        particles[name].a = F_net / particles[name].m\n        particles[name].v += particles[name].a*dt\n        particles[name].pos += particles[name].v*dt\n        v_arrow.pos, v_arrow.axis = particles[name].pos, particles[name].v.norm()*L/6\n        a_arrow.pos, a_arrow.axis = particles[name].pos, particles[name].a.norm()*L/6\n        t += dt\n    particles[name].visible = False\n    v_arrow.visible, a_arrow.visible = False, False",
      "mode": "initial",
      "timestamp": "2024-07-24 07:23:31",
      "serial_number": 1
    }
  ]
}