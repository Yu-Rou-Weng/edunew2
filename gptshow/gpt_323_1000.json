{
  "session_id": 1000,
  "log": [
    {
      "input": "1. Screen Settings:</br>Set the canvas width to 700 and height to 400. Do not change the canvas size.</br>2. Object Motion & Parameter Settings:</br>Create a VPython animation to illustrate the following physics experiment:<br><span style=\"color:red;\">This is a simulation of projectile motion with only gravitational force acting on the object. The object is launched horizontally with an initial velocity \\( v_0 \\) from a height \\( h \\). The object accelerates downward due to gravity and bounces off the ground elastically when it hits the ground.</span>\n\n3. Cyber Input Variable Mapping Information:\n    (1) initial_velocity is mapped to the variable named Angle_I with an initial value set to a 1-dimensional value 5\n    (2) When the value of Angle_I changes, let the animation rerun to the starting point and start with the updated initial_velocity.\n    \n\n3. Cyber Input Variable Mapping Information:\n    (1) height is mapped to the variable named Gyroscope_I with an initial value set to a 3-dimensional vector [[0, 0, 4]]\n    (2) When the value of Gyroscope_I changes, let the animation rerun to the starting point and start with the updated height.",
      "output": "```python\nfrom vpython import *\n\n# Screen Settings\nscene.width = 700\nscene.height = 400\n\n# Object Motion & Parameter Settings\ng = vector(0, -9.8, 0)  # acceleration due to gravity\n\ndef reset_scene():\n    ball.pos = vector(0, height[0][1], 0)\n    ball.v = initial_velocity * norm(vector(1, 0, 0))\n\ndef update_scene():\n    reset_scene()\n    dt = 0.01\n    while ball.pos.y >= 0:\n        rate(100)\n        ball.v += g * dt\n        ball.pos += ball.v * dt\n        if ball.pos.y <= 0:\n            ball.v.y *= -1  # reverse the y-velocity for bounce\n\n# Cyber Input Variable Mapping Information\ninitial_velocity = 5\nAngle_I = 5\n\nheight = [[0, 0, 4]]\nGyroscope_I = vector(0, 0, 4)\n\n# Create objects\nground = box(pos=vector(0, -0.5, 0), size=vector(10, 0.1, 10), color=color.green)\nball = sphere(pos=vector(0, height[0][1], 0), radius=0.2, color=color.blue, make_trail=True)\n\nreset_scene()\nupdate_scene()\n```",
      "mode": "initial",
      "timestamp": "2024-09-12 07:57:33",
      "serial_number": 1
    }
  ]
}