{
  "session_id": 848,
  "log": [
    {
      "input": "Please write the VPython code for \"3D Elastic Collision, m1 = m2\"\n\n3D Elastic Collision Formula:\n\nThis program is primarily based on the lecture notes \"VCollision: A Freshman Course\" by Professor Ming-Fong Shi of the Department of Physics at National Taiwan University, but the code has been rewritten in the Python 3.X format. After completing this program, it can be used to simulate collisions between ideal gas molecules and produce a graph of molecule count vs. velocity distribution. However, since this program is quite complex, please refer to the VPython example program \"A hard-sphere gas\".\n\nProgram to be written: 3D Elastic Collision, m1 = m2, both spheres have equal mass\n\n### Theoretical Derivation\n\nAssume there are two elastic spheres of equal size in space, with masses $m_1$ and $m_2$, and initial velocities $v_1$ and $v_2$, respectively. Derive the formula for their velocities after collision. The special case when the masses are equal is known:\n\n$$\nv_1' = v_1 + \\frac{(v_2 - v_1) \\cdot (r_1 - r_2)}{|r_1 - r_2|^2} (r_1 - r_2)\n$$\n\n$$\nv_2' = v_2 + \\frac{(v_1 - v_2) \\cdot (r_2 - r_1)}{|r_2 - r_1|^2} (r_2 - r_1)\n$$\n\nProof:  \nAssuming the change in momentum during collision between the two spheres is $\\Delta p$, then\n\n$$\n\\Delta p_1 = \\Delta p \\frac{r_1 - r_2}{|r_1 - r_2|}\n$$\n\n$$\n\\Delta p_2 = - \\Delta p_1 = \\Delta p \\frac{r_2 - r_1}{|r_2 - r_1|}\n$$\n\nThe momenta of the spheres after collision are\n\n$$\np_1' = p_1 + \\Delta p_1 \\Rightarrow m_1 v_1' = m_1 v_1 + \\Delta p \\frac{r_1 - r_2}{|r_1 - r_2|}\n$$\n\n$$\np_2' = p_2 + \\Delta p_2 \\Rightarrow m_2 v_2' = m_2 v_2 + \\Delta p \\frac{r_2 - r_1}{|r_2 - r_1|}\n$$\n\nSince the collision is elastic, there is no loss of kinetic energy before and after the collision,\n\n$$\n\\frac{1}{2} m_1 v_1^2 + \\frac{1}{2} m_2 v_2^2 = \\frac{1}{2} m_1 v_1'^2 + \\frac{1}{2} m_2 v_2'^2\n$$\n\nSubstituting $v_1'$ and $v_2'$ into the equation and multiplying by 2\n\n$$\nm_1 v_1^2 + m_2 v_2^2 = m_1 \\left[ v_1 + \\Delta p \\frac{(r_1 - r_2)}{m_1 |r_1 - r_2|} \\right]^2 + m_2 \\left[ v_2 + \\Delta p \\frac{(r_2 - r_1)}{m_2 |r_2 - r_1|} \\right]^2\n$$\n\n$$\nm_1 v_1^2 + m_2 v_2^2 = m_1 v_1^2 + 2 \\Delta p \\frac{v_1 \\cdot (r_1 - r_2)}{|r_1 - r_2|} + \\frac{(\\Delta p)^2}{m_1} \\frac{(r_1 - r_2)^2}{|r_1 - r_2|^2} + m_2 v_2^2 + 2 \\Delta p \\frac{v_2 \\cdot (r_2 - r_1)}{|r_1 - r_2|} + \\frac{(\\Delta p)^2}{m_2} \\frac{(r_2 - r_1)^2}{|r_2 - r_1|^2}\n$$\n\nSince $(r_1 - r_2)^2 = |r_1 - r_2|^2$, the equation simplifies to\n\n$$\n2 \\Delta p \\frac{(v_1 - v_2) \\cdot (r_1 - r_2)}{|r_1 - r_2|} + (\\Delta p)^2 \\left( \\frac{1}{m_1} + \\frac{1}{m_2} \\right) = 0\n$$\n\n$$\n2 \\frac{(v_1 - v_2) \\cdot (r_1 - r_2)}{|r_1 - r_2|} + \\Delta p \\frac{m_1 + m_2}{m_1 m_2} = 0\n$$\n\n$$\n\\Delta p = \\frac{2 m_1 m_2}{m_1 + m_2} \\frac{(v_2 - v_1) \\cdot (r_1 - r_2)}{|r_1 - r_2|}\n$$\n\nSubstituting into the top two equations gives the post-collision velocities\n\n$$\nv_1' = v_1 + \\frac{2 m_2}{m_1 + m_2} \\frac{(v_2 - v_1) \\cdot (r_1 - r_2)}{|r_1 - r_2|^2} (r_1 - r_2)\n$$\n\n$$\nv_2' = v_2 + \\frac{2 m_1}{m_1 + m_2} \\frac{(v_1 - v_2) \\cdot (r_2 - r_1)}{|r_2 - r_1|^2} (r_2 - r_1)\n$$\n\nScreenshot:\n![image](https://hackmd.io/_uploads/Hyuy9sTdR.png)\n\nParameter Settings\nHere, variables are set for the radius, mass, color, initial velocity of the balls, screen edge length, time, and time interval. Please refer to the variable names in the code.\n\nScreen Configuration\nThe code for generating the animation window, balls, and drawing window has appeared many times in previous animations and will not be elaborated here.\n\nCustom Function\nThe custom function af_col_v calculates the velocities after collision. The contents of the function are:\n\nv1_prime = v1 + dot((v2 - v1), (x1 - x2)) / mag2(x1 - x2) * (x1 - x2)\nv2_prime = v2 + dot((v1 - v2), (x2 - x1)) / mag2(x2 - x1) * (x2 - x1)\n\nThis implements the formulas derived theoretically using code, applying two types of vector calculations:\n\ndot(a, b): Takes the dot product of vectors a and b\nmag2(a) = a.mag2: Calculates the square of the magnitude of vector a\n\nMotion of Objects\nUpdate the positions of the balls.\nIf mag(b1.pos - b2.pos) <= r1 + r2 and dot((b1.pos - b2.pos), (b1.v - b2.v)) <=0, it means b1 and b2 have collided. Substitute b1.v, b2.v, b1.pos, and b2.pos into the custom function af_col_v to calculate the velocities after collision, then reassign to b1.v and b2.v.\n\nThere is a stationary red ball with a radius of 0.5 and mass of 1 at (0,0,0). A blue ball with a radius of 0.5 and mass of 1 is at (-5,0.5,0) moving with an initial velocity of (8, 0, 0). After colliding with the red ball, the 3D elastic collision described above occurs. The trajectories of the blue and red balls must be drawn.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Set initial conditions\nRadius_I = 1\nr1 = r2 = Radius_I\nm1 = m2 = 1\nv1 = vector(0, 0, 0)\nv2 = vector(8, 0, 0)\nx1 = vector(0, 0, 0)\nx2 = vector(-5, 0.5, 0)\n\n# Create spheres\ns1 = sphere(pos=x1, radius=r1, color=color.red, make_trail=True)\ns2 = sphere(pos=x2, radius=r2, color=color.blue, make_trail=True)\n\ns1.m = m1\ns2.m = m2\ns1.v = v1\ns2.v = v2\n\ndt = 0.001\n\ndef af_col_v(v1, v2, x1, x2):\n    v1_prime = v1 + dot((v2 - v1), (x1 - x2)) / mag2(x1 - x2) * (x1 - x2)\n    v2_prime = v2 + dot((v1 - v2), (x2 - x1)) / mag2(x2 - x1) * (x2 - x1)\n    return v1_prime, v2_prime\n\nwhile True:\n    rate(1000)\n    s1.pos = s1.pos + s1.v*dt\n    s2.pos = s2.pos + s2.v*dt\n    \n    if mag(s1.pos - s2.pos) <= r1 + r2 and dot((s1.pos - s2.pos), (s1.v - s2.v)) <=0:\n        s1.v, s2.v = af_col_v(s1.v, s2.v, s1.pos, s2.pos)",
      "mode": "initial",
      "timestamp": "2024-07-26 11:53:35",
      "serial_number": 1
    }
  ]
}