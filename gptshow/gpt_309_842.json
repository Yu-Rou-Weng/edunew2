{
  "session_id": 842,
  "log": [
    {
      "input": "Please write a Vpython code for \"Rutherford Scattering\"\nRutherford scattering experiment is an important evidence for the existence of atomic nuclei. When \u03b1 particles (helium nuclei) are fired at gold foil, the electrostatic force between the \u03b1 particles and the gold nuclei is repulsive. Ignoring the effects of gravity and considering that the gold nuclei are fixed in place, the electrostatic forces pass through the gold nuclei with the angular momentum relative to the gold nuclei being conserved. Only the electrostatic forces do work between the \u03b1 particles and the gold nuclei, conserving the mechanical energy of the system.\n\nRutherford Scattering Experiment Diagram:\n![image](https://hackmd.io/_uploads/H1zf236OC.png)\n\nThe diagram above illustrates the Rutherford scattering experiment. When the \u03b1 particle is at infinity, its velocity is directed to the right, and the perpendicular distance between the gold nucleus and the direction of velocity is called the impact parameter, usually denoted by b. The program's goal for this code is to vary b, plot the relationship between the kinetic energy of the \u03b1 particle, the system's potential energy, the mechanical energy, and time, and find the value of the upward displacement of the \u03b1 particle.\n\nParameter Settings\n\nVariables are set as r1, m1, q1, c1, r2, m2, q2, c2, v0, b, L, k, t, dt, with their purposes described in the comments. For easier numerical settings, the length unit is nm, mass unit is amu, charge unit is e, time unit is ns, and k is assumed to be 1.\n\nScreen Settings\nCreate an animation window.\nGenerate the nucleus.\nGenerate arrows representing velocity and acceleration.\nCreate a plotting window.\n\nObject Motion\nThe animation continues while the particle is between -L/2 < x < L/2, -L/2 < y < L/2, hence the condition in the while loop is set as (abs(alpha.pos.x) < L/2 and abs(alpha.pos.y) < L/2).\n\nCalculate the resultant force on the helium nucleus, update its acceleration, velocity, and position.\n\nElectrostatic Force Formula\nThe formula for electrostatic force $F$ is:\n\n$$\nF = \\frac{k \\cdot q_{\\alpha} \\cdot q_{\\text{Au}}}{r^2} \\cdot \\hat{r}\n$$\n\nWhere:\n- $k$ is the assumed electrostatic constant.\n- $q_{\\alpha} = 2e$ is the charge of the helium nucleus.\n- $q_{\\text{Au}} = 79e$ is the charge of the gold nucleus.\n- $r$ is the distance between the two nuclei.\n- $\\hat{r}$ is the unit vector of the position vector.\n\nHelium Nucleus Acceleration\nThe formula for the acceleration of the helium nucleus $\\alpha.a$ is:\n\n$$\n\\alpha.a = \\frac{F}{m_{\\alpha}}\n$$\n\nWhere:\n- $F$ is the electrostatic force.\n- $m_{\\alpha} = 4 \\ \\text{amu}$ is the mass of the helium nucleus.\n\nHelium Nucleus Kinetic Energy\nThe formula for the kinetic energy of the helium nucleus $K$ is:\n\n$$\nK = \\frac{1}{2} m_{\\alpha} v_{\\alpha}^2\n$$\n\nWhere:\n- $m_{\\alpha}$ is the mass of the helium nucleus.\n- $v_{\\alpha}$ is the speed of the helium nucleus.\n\nSystem Potential Energy\nThe formula for the system's potential energy $U$ is:\n\n$$\nU = \\frac{k \\cdot q_{\\alpha} \\cdot q_{\\text{Au}}}{r}\n$$\n\nWhere:\n- $k$ is the assumed electrostatic constant.\n- $q_{\\alpha}$ is the charge of the helium nucleus.\n- $q_{\\text{Au}}$ is the charge of the gold nucleus.\n- $r$ is the distance between the two nuclei.\n\nTotal Mechanical Energy of the System\nThe formula for the total mechanical energy of the system $E$ is:\n\n$$\nE = K + U\n$$\n\nWhere:\n- $K$ is the kinetic energy of the helium nucleus.\n- $U$ is the potential energy of the system.\n\nA red ball with a radius of 0.2 starts moving from (0,0,0) with an initial velocity of (10, 0, 0) along the horizontal line. The red ball has a charge of 4e and a mass of 4 amu. At (7,0,0), there is a larger yellow ball with a charge of 79e and a mass of 197 amu. Influenced by the yellow ball, the red ball undergoes Rutherford scattering, following the formulas mentioned above.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=0.5\n\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Parameters\nr1 = vector(0, 0, 0) # initial position of alpha particle\nm1 = 4 # mass of alpha particle\nq1 = 2 # charge of alpha particle\nc1 = color.red # color of alpha particle\n\nr2 = vector(7, 0, 0) # initial position of gold particle\nm2 = 197 # mass of gold particle\nq2 = 79 # charge of gold particle\nc2 = color.yellow # color of gold particle\n\nv0 = 10 # initial velocity of alpha particle\nb = 0.5 # impact parameter\nL = 10 # length of animation window\nk = 1 # electrostatic constant\nt = 0 # initial time\ndt = 0.01 # time step\n\n# Animation window\nanimation = canvas(title=\"Rutherford Scattering\", width=800, height=800, range=L/2, background=color.black)\n\n# Nucleus\nalpha = sphere(pos=r1, radius=0.2, color=c1, make_trail=True)\ngold = sphere(pos=r2, radius=0.8, color=c2)\n\n# Velocity and acceleration arrows\nv_alpha = arrow(pos=alpha.pos, axis=v0*vector(1, 0, 0), color=color.green)\na_alpha = arrow(pos=alpha.pos, color=color.white)\n\n# Plotting window\ngraph_window = graph(title=\"<b>Kinetic and Potential Energy\", width=800, height=600, xtitle=\"<i>time (ns)\", ytitle=\"<i>Energy\", foreground=color.white, background=color.black)\nK_curve = gcurve(color=color.green, label='Kinetic Energy') # kinetic energy curve\nU_curve = gcurve(color=color.blue, label='Potential Energy') # potential energy curve\nE_curve = gcurve(color=color.red, label='Total Energy') # total energy curve\n\n# Object motion\nalpha.pos = vector(-L/2, b, 0)\nalpha.v = vector(v0, 0, 0)\nalpha.a = vector(0, 0, 0)\n\nwhile (abs(alpha.pos.x) < L/2 and abs(alpha.pos.y) < L/2):\n    rate(100) # limit execution speed\n\n    r = gold.pos - alpha.pos\n    F = k * q1 * q2 / mag2(r) * norm(r)\n\n    # update acceleration, velocity and position\n    alpha.a = F / m1\n    alpha.v += alpha.a * dt\n    alpha.pos += alpha.v * dt\n\n    # update velocity and acceleration arrows\n    v_alpha.pos = alpha.pos\n    v_alpha.axis = alpha.v\n    a_alpha.pos = alpha.pos\n    a_alpha.axis = alpha.a\n\n    # calculate kinetic, potential and total energy\n    K = m1 / 2 * mag2(alpha.v) # kinetic energy\n    U = k * q1 * q2 / mag(r) # potential energy\n    E = K + U # total energy\n\n    # plot energy versus time\n    K_curve.plot(t, K)\n    U_curve.plot(t, U)\n    E_curve.plot(t, E)\n\n    t += dt\n\n# make sure the trail stops\nalpha.make_trail = False",
      "mode": "initial",
      "timestamp": "2024-07-26 11:36:51",
      "serial_number": 1
    }
  ]
}