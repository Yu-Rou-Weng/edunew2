{
  "session_id": 641,
  "log": [
    {
      "input": "Program to be Written: Gravitational Field, which can be modified to depict different planets\n\n# Gravitational Field and Electric Field\n\nIf there is a sphere with mass $M$ uniformly distributed within a space, and if we take the center of mass $M$ as the origin, then at a position vector $\\vec{r}$ in space, the gravitational field is given by\n$$\n\\vec{g} = - \\frac{GM}{r^2} \\hat{r}\n$$\nThe negative sign in the equation indicates that the direction of the gravitational field points towards the center of the sphere. If there are multiple spheres, with the $i$-th sphere having a mass of $M_i$ and center at $\\vec{r}_i$, then the gravitational field is\n$$\n\\vec{g} = \\sum \\vec{g}_i = -G \\sum \\frac{M_i (\\vec{r} - \\vec{r}_i)}{|\\vec{r} - \\vec{r}_i|^3}\n$$\n\nIt is nearly impossible to draw the intensity and direction of the gravitational fields at every position on the blackboard. Below is a schematic diagram of Earth's gravitational field that I have drawn.\n\n### Earth's Gravitational Field Schematic\n\nIn the following lessons, we intend to take points at regular intervals in space and use arrows to represent the gravitational field at each point in terms of the arrow's length and direction. Therefore, we first practice using a for loop in the program \"Generating Arrows with For Loop\" to draw an arrow at regular intervals in space. In the program \"Gravitational Field, Can Be Modified for Different Planets\", in addition to drawing arrows, we also calculate the gravitational field at that location and then update the arrow's length and direction. If we can successfully depict a sphere's gravitational field, in the program \"Gravitational Field, Can Be Modified for Different Planets\", we then go further to draw the gravitational fields established by two or even multiple spheres.\n\nAfter completing the drawing of the gravitational fields, we can use the same method to depict the electric field created by charged spheres in space. The mathematical form is\n$$\n\\vec{E} = \\sum \\vec{E}_i = k \\sum \\frac{Q_i (\\vec{r} - \\vec{r}_i)}{|\\vec{r} - \\vec{r}_i|^3}\n$$\nWe just need to slightly modify the program \"Gravitational Field, Can Be Modified for Different Planets\" to be able to draw the electric field established by two charged spheres in space.\n\nThe programs \"Gravitational Field, Can Be Modified for Different Planets\" and \"Gravitational Field, Can Be Modified for Different Planets\" are almost identical, except that the latter also includes Mars. Since two planets are being generated, this is where the convenience of using custom classes becomes apparent. It is especially important to note that the distance between the two planets is not drawn to scale; otherwise, nothing would be visible in the depiction.\n\nScreenshot of the program \"Gravitational Field, Can Be Modified for Different Planets\":\n![image](https://hackmd.io/_uploads/B1agg2adA.png)\n(1) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\nscene = canvas(title='Gravitational Field Demo', width=800, height=800, center=vector(0,0,0))\n\nG = 6.7e-11 # gravitational constant\nsize = 1e23 # scaling factor for the size of the planets\nM = [4e24, 4e24] # masses of the planets\nmpos = [vector(0, 0, 0), vector(2e11, 0, 0)] # positions of the planets\nplanet_colors = [color.red, color.blue] # colors of the planets\n\nplanets = []\nfor i in range(2):\n    planet = sphere(pos=mpos[i], radius=(M[i]/size)**(1/3), color=planet_colors[i])\n    planets.append(planet)\n\nscale = 1e-16\nfor x in range(-20, 21, 2):\n    for y in range(-20, 21, 2):\n        for z in range(-20, 21, 2):\n            pos = vector(x, y, z)*1e10\n            g = vector(0, 0, 0)\n            for planet, mass in zip(planets, M):\n                r = pos - planet.pos\n                g += -G*mass*r/mag(r)**3\n            arrow(pos=pos, axis=g*scale, shaftwidth=1e9, color=color.yellow)",
      "mode": "initial",
      "timestamp": "2024-07-24 06:36:10",
      "serial_number": 1
    },
    {
      "input": "Please update the following program based on this instruction: Make the objects clearer.\n\nfrom vpython import *\nscene = canvas(title='Gravitational Field Demo', width=800, height=800, center=vector(0,0,0))\n\nG = 6.7e-11 # gravitational constant\nsize = 1e23 # scaling factor for the size of the planets\nM = [4e24, 4e24] # masses of the planets\nmpos = [vector(0, 0, 0), vector(2e11, 0, 0)] # positions of the planets\nplanet_colors = [color.red, color.blue] # colors of the planets\n\nplanets = []\nfor i in range(2):\n    planet = sphere(pos=mpos[i], radius=(M[i]/size)**(1/3), color=planet_colors[i])\n    planets.append(planet)\n\nscale = 1e-16\nfor x in range(-20, 21, 2):\n    for y in range(-20, 21, 2):\n        for z in range(-20, 21, 2):\n            pos = vector(x, y, z)*1e10\n            g = vector(0, 0, 0)\n            for planet, mass in zip(planets, M):\n                r = pos - planet.pos\n                g += -G*mass*r/mag(r)**3\n            arrow(pos=pos, axis=g*scale, shaftwidth=1e9, color=color.yellow)",
      "output": "from vpython import *\nscene = canvas(title='Gravitational Field Demo', width=800, height=800, center=vector(0,0,0), background=color.white)\n\nG = 6.7e-11 # gravitational constant\nsize = 1e23 # scaling factor for the size of the planets\nM = [4e24, 4e24] # masses of the planets\nmpos = [vector(0, 0, 0), vector(2e11, 0, 0)] # positions of the planets\nplanet_colors = [color.red, color.blue] # colors of the planets\n\nplanets = []\nfor i in range(2):\n    planet = sphere(pos=mpos[i], radius=(M[i]/size)**(1/3), color=planet_colors[i], opacity=0.5)\n    planets.append(planet)\n\nscale = 1e-16\nfor x in range(-20, 21, 2):\n    for y in range(-20, 21, 2):\n        for z in range(-20, 21, 2):\n            pos = vector(x, y, z)*1e10\n            g = vector(0, 0, 0)\n            for planet, mass in zip(planets, M):\n                r = pos - planet.pos\n                g += -G*mass*r/mag(r)**3\n            arrow(pos=pos, axis=g*scale, shaftwidth=1e9, color=color.yellow, opacity=0.6)",
      "mode": "modification",
      "timestamp": "2024-07-24 06:39:40",
      "serial_number": 2
    }
  ]
}