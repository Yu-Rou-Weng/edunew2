{
  "session_id": 722,
  "log": [
    {
      "input": "Magnetic Fields Generated by Two Current-Carrying Coils\n\nChapter 8 of elective physics, \"The Magnetic Effects of Current,\" introduces the Biot-Savart Law, which is used to calculate the magnetic field generated at a certain point in space by a small segment of a current-carrying wire. The equation is:\n$$\nd\\vec{B} = \\frac{\\mu_0}{4\\pi} \\frac{I d\\vec{L} \\times \\hat{r}}{r^2} \\Rightarrow dB = \\frac{\\mu_0}{4\\pi} \\frac{I dL \\sin{\\theta}}{r^2}\n$$\n\nUsing the Biot-Savart Law, the magnitude of the magnetic field at a perpendicular distance $r$ from a long straight current-carrying wire can be calculated as:\n$$\nB = \\frac{\\mu_0 I}{2\\pi r}\n$$\n\nThe magnitude of the magnetic field at the center of a current-carrying coil with radius $r$ is:\n$$\nB = \\frac{\\mu_0 I}{2r}\n$$\n\nThe magnitude of the magnetic field at the center of a solenoid with $n$ turns per unit length is:\n$$\nB = \\mu_0 n I\n$$\n\nMagnetic fields are supposed to be distributed in space, but the diagrams in the book are all planar, so I want to use VPython to visualize the strength and direction of the magnetic fields in space.\n\nProgramming Section\n\nThe program \"Magnetic Field Generated by Two Current-Carrying Coils\" mainly aims to illustrate the magnetic field of a Helmholtz coil, based on the program \"Magnetic Field Generated by a Current-Carrying Coil\" with an additional coil added. The differences are explained below.\n\nTo add another coil, a variable delta is defined to adjust the distance between the coils. The two coils are located at (0, delta, 0) and (0, -delta, 0) respectively.\n\nThe method of placing small spheres after dividing the ring remains unchanged, but the data from the divided spheres of the two coils are stored in two separate lists.\n\nWhen calculating the magnetic field, data from segs1 and segs2 need to be entered into a custom function to compute the total magnetic field.\n\nIllustration to be drawn:\n![image](https://hackmd.io/_uploads/SJfAahpdR.png)\n(1) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "import vpython as vp\n\nmu = 1E-7\nI = 1.0\ndtheta = 1E-2\nR = 1.0\ndelta = 0.5\n\nscene = vp.canvas(width=800, height=800, background=vp.vector(0.5, 0.5, 0))\n\n# Create the coils\nring1 = vp.ring(pos=vp.vector(0, delta, 0), axis=vp.vector(0, 1, 0), radius=R, thickness=0.01)\nring2 = vp.ring(pos=vp.vector(0, -delta, 0), axis=vp.vector(0, 1, 0), radius=R, thickness=0.01)\n\n# Calculate the magnetic field\ndef B_field(dl, r):\n    return mu / (4 * vp.pi) * I * vp.cross(dl, r.hat) / r.mag2\n\n# Create the segments of the coils\nsegs1 = [vp.sphere(pos=vp.vector(R * vp.cos(theta), delta, R * vp.sin(theta)), \n                   radius=0.01, \n                   color=vp.color.red, \n                   make_trail=True, \n                   dl=vp.vector(-R * vp.sin(theta), 0, R * vp.cos(theta)) * dtheta) \n          for theta in vp.arange(0, 2 * vp.pi, dtheta)]\nsegs2 = [vp.sphere(pos=vp.vector(R * vp.cos(theta), -delta, R * vp.sin(theta)), \n                   radius=0.01, \n                   color=vp.color.red, \n                   make_trail=True, \n                   dl=vp.vector(-R * vp.sin(theta), 0, R * vp.cos(theta)) * dtheta) \n          for theta in vp.arange(0, 2 * vp.pi, dtheta)]\n\n# Calculate the total magnetic field\ndef total_B(P):\n    B = vp.vector(0, 0, 0)\n    for seg in segs1 + segs2:\n        r = P - seg.pos\n        B += B_field(seg.dl, r)\n    return B\n\n# Draw the magnetic field\nB_scale = 0.1\nfor x in vp.arange(-1.5, 1.6, 0.2):\n    for y in vp.arange(-1.5, 1.6, 0.2):\n        for z in vp.arange(-1.5, 1.6, 0.2):\n            P = vp.vector(x, y, z)\n            B = total_B(P)\n            if B.mag > 1E-5:\n                vp.arrow(pos=P, axis=B_scale * B, color=vp.color.yellow)",
      "mode": "initial",
      "timestamp": "2024-07-24 13:58:06",
      "serial_number": 1
    }
  ]
}