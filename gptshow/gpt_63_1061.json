{
  "session_id": 1061,
  "log": [
    {
      "input": "Please update the following program based on this instruction:\n1. Screen Settings:</br>Set the canvas width to 700 and height to 400. Do not change the canvas size.</br>2. Object Motion & Parameter Settings:</br>Create a VPython animation to illustrate the following physics experiment:<br><span style=\"color:red;\">1. Screen Settings:\nSet the canvas width to 700 and height to 400. Do not change the canvas size.\n2. Object Motion & Parameter Settings:\nCreate a VPython animation to illustrate the following physics experiment:\n# **Horizontal Projectile Motion**\n\nA small ball is launched horizontally from a height \\( h \\) with an initial velocity \\( v_0 \\). The ball accelerates downward under the influence of gravity and bounces upon hitting the ground.\nOnly the effect of gravity is considered, and the collision between the ball and the ground is elastic.\n\n\n3. Cyber Input Variable Mapping Information:\n\n(1) initial_velocity is mapped to the variable named Magnetometer_I with an initial value set to a 3-dimensional vector [0, 0, 0]\n(2) When the value of Magnetometer_I changes, let the animation rerun to the starting point and start with the updated initial_velocity.\n</span>\n\nCurrent program:\n",
      "output": "from vpython import *\n\n# Screen Settings\nscene.width = 700\nscene.height = 400\n\n# Constants\nh = 10  # initial height\ng = 9.81  # acceleration due to gravity\n\n# Objects\nground = box(pos=vector(0, 0, 0), size=vector(30, 0.5, 10), color=color.green)\nball = sphere(pos=vector(0, h, 0), radius=1, color=color.blue)\n\n# Initial values\ninitial_velocity = vector(0, 0, 0)\n\n# Functions\ndef reset_ball():\n    ball.pos = vector(0, h, 0)\n    ball.velocity = initial_velocity\n\ndef update_velocity():\n    ball.velocity = initial_velocity\n\n# Event listener\ndef on_change(evt):\n    initial_velocity.x = evt.new.x\n    initial_velocity.y = evt.new.y\n    initial_velocity.z = evt.new.z\n    reset_ball()\n\nscene.bind('Magetometer_I', update_velocity)\n\n# Animation\ndt = 0.01\nt = 0\nwhile True:\n    rate(100)\n    ball.pos.x += ball.velocity.x * dt\n    ball.pos.y += ball.velocity.y * dt - 0.5 * g * t**2\n    t += dt\n    \n    if ball.pos.y <= ball.radius:\n        ball.velocity.y *= -1",
      "mode": "modification",
      "timestamp": "2024-10-31 21:49:29",
      "serial_number": 2
    }
  ]
}