{
  "session_id": 679,
  "log": [
    {
      "input": "Rutherford Scattering\n\nThe Rutherford scattering experiment is an essential piece of evidence for the existence of atomic nuclei. In the experiment, alpha particles (helium nuclei) are directed towards a gold foil. The electrostatic force between the alpha particles and the gold nuclei is repulsive. Ignoring the effects of gravity and considering the gold nuclei as fixed, the electrostatic force exerted on the alpha particles as they pass by the gold nuclei conserves the angular momentum relative to the gold nuclei. Only the electrostatic force does work between the alpha particles and the gold nuclei, conserving the mechanical energy of the system.\n\nRutherford Scattering Experiment Diagram:\n![image](https://hackmd.io/_uploads/H1zf236OC.png)\n\nThe diagram below illustrates the Rutherford scattering experiment. When the alpha particle is at infinity, its velocity is directed to the right. The perpendicular distance between the gold nucleus and the direction of velocity is called the impact parameter, usually denoted as b. The goal of this program is to vary b and plot the relationships between the kinetic energy of the alpha particle, the system's potential energy, mechanical energy, and time, to determine the upward displacement of the alpha particle.\n\nParameter Settings\n\nVariables are set as r1, m1, q1, c1, r2, m2, q2, c2, v0, b, L, k, t, dt, with their purposes commented in the respective lines. For convenience in numerical settings, the units of length are nanometers, mass is in atomic mass units, charge is in elementary charges, and time is in nanoseconds. The value of k is assumed to be 1.\n\nScreen Settings\n- Create an animation window.\n- Generate a nucleus.\n- Produce arrows representing velocity and acceleration.\n- Generate a plotting window.\n\nObject Motion\nThe animation continues as long as the particle is within -L/2 < x < L/2 and -L/2 < y < L/2, hence the while loop condition is set as (abs(alpha.pos.x) < L/2 and abs(alpha.pos.y) < L/2).\n\nCalculate the total force on the helium nucleus, update its acceleration, velocity, and position.\n\nUpdate the arrows representing velocity and acceleration.\n\nCalculate and plot the helium nucleus's kinetic energy, the system's potential energy, and mechanical energy.\n\nUpdate time.\n![image](https://hackmd.io/_uploads/Sk5e6n6dC.png)\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(2) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(3) Do not import packages that are not supported by VPython such as numpy, math, sympy, scipy and time.",
      "output": "from vpython import *\n\n# Parameters\nr1 = vector(0, 0, 0)  # initial position of alpha particle\nm1 = 4  # mass of alpha particle\nq1 = 2  # charge of alpha particle\nc1 = color.red  # color of alpha particle\nr2 = vector(0, 0, 0)  # position of gold nucleus\nm2 = 197  # mass of gold nucleus\nq2 = 79  # charge of gold nucleus\nc2 = color.yellow  # color of gold nucleus\nv0 = 0.01  # initial speed of alpha particle\nb = 20  # impact parameter\nL = 100  # side length of scene\nk = 1  # Coulomb constant\nt = 0  # initial time\ndt = 0.001  # time step\nRadius_I = 1  # initial radius of alpha particle\n\n# Animation window\nscene = canvas(title=\"Rutherford Scattering\", width=800, height=800, range=L/2, background=color.black)\n\n# Alpha particle\nalpha = sphere(pos=r1, radius=Radius_I, m=m1, q=q1, v=vector(v0, 0, 0), a=vector(0, 0, 0), color=c1, make_trail=True)\nalpha.trail_color = color.green\n\n# Gold nucleus\ngold = sphere(pos=r2, radius=1, m=m2, q=q2, color=c2)\n\n# Velocity and acceleration arrows\nv_arrow = arrow(pos=alpha.pos, axis=alpha.v*10, color=color.green)\na_arrow = arrow(pos=alpha.pos, axis=alpha.a*100, color=color.blue)\n\n# Plotting window\ngd = graph(title='Kinetic, Potential and Total Energy vs. Time', xtitle='Time', ytitle='Energy')\nke_g = gcurve(color=c1, graph=gd)  # kinetic energy graph\npe_g = gcurve(color=c2, graph=gd)  # potential energy graph\nte_g = gcurve(color=color.white, graph=gd)  # total energy graph\n\n# Main loop\nwhile (abs(alpha.pos.x) < L/2 and abs(alpha.pos.y) < L/2):\n    force = k*q1*q2*(gold.pos-alpha.pos) / mag(gold.pos-alpha.pos)**3  # force on alpha particle\n    alpha.a = force / alpha.m  # acceleration of alpha particle\n    alpha.v += alpha.a*dt  # update velocity\n    alpha.pos += alpha.v*dt  # update position\n\n    v_arrow.pos = alpha.pos  # update velocity arrow\n    v_arrow.axis = alpha.v*10\n    a_arrow.pos = alpha.pos  # update acceleration arrow\n    a_arrow.axis = alpha.a*100\n\n    ke = 0.5*m1*mag(alpha.v)**2  # kinetic energy of alpha particle\n    pe = k*q1*q2 / mag(gold.pos-alpha.pos)  # potential energy of system\n    te = ke + pe  # total energy of system\n    ke_g.plot(pos=(t, ke))  # plot kinetic energy\n    pe_g.plot(pos=(t, pe))  # plot potential energy\n    te_g.plot(pos=(t, te))  # plot total energy\n\n    t += dt  # update time",
      "mode": "initial",
      "timestamp": "2024-07-24 08:58:34",
      "serial_number": 1
    }
  ]
}