"""
Django settings for simtalk project.

Generated by 'django-admin startproject' using Django 3.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

from pathlib import Path
from urllib.parse import urlparse

from dotenv import load_dotenv

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Load the env to the environment variables
load_dotenv(os.path.join(BASE_DIR, '_/env/env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(os.getenv('DEBUG', 'False'))

WEB_SERVER_PREFIX = os.getenv('WEB_SERVER_PREFIX', '')

# if under nginx subpath ex. location /simtalk/ , need to be set with WEB_SERVER_PREFIX
FORCE_SCRIPT_NAME = WEB_SERVER_PREFIX

ALLOWED_HOSTS = ['*']

# Append slash may lost POST reqeust data
APPEND_SLASH = False

# Application definition

INSTALLED_APPS = [
    'simtalk.apps.SimtalkConfig',
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'simtalk.middleware.JsonRequestMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = '_.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.{}'.format(os.getenv('DATABASE_ENGINE') or 'sqlite3'),
        'HOST': os.getenv('DATABASE_HOST'),
        'PORT': os.getenv('DATABASE_PORT'),
        'NAME': os.getenv('DATABASE_NAME' or os.path.join(BASE_DIR, 'db.sqlite3')),
        'USER': os.getenv('DATABASE_USER'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD'),
    },
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Taipei'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

USER_DIR = os.getenv('USER_DIR')

if not USER_DIR:
    if os.name.startswith('posix'):
        USER_DIR = '{}/.iottalk'.format(os.getenv('HOME', '.'))
    elif os.name.startswith('nt'):
        USER_DIR = '{}/_iottalk'.format(os.getenv('USERPROFILE'))

USER_DIR = Path(USER_DIR)

LOG_DIR = USER_DIR / (os.getenv('LOG_DIR') or 'log/simtalk')


ROOT_URLCONF = 'simtalk.urls'

CCM_GUI_URL = os.getenv('CCM_GUI_URL')

CSM_API_URL = os.getenv('CSM_API_URL')

AG_API_URL = os.getenv('AG_API_URL')

AG_DEVICE_VERSION = int(os.getenv('AG_DEVICE_VERSION', 2))

REDIRECT_REGEX = r".*"

CORS_ALLOWED_ORIGINS = [
    '{uri.scheme}://{uri.netloc}'.format(uri=urlparse(CCM_GUI_URL))
]

CORS_ALLOW_CREDENTIALS = True

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'normal': {
            'format': '[%(levelname)s] %(asctime)s | %(name)s:%(lineno)d | %(message)s'
        },
        'simple': {
            'format': '[%(levelname)s] %(message)s'
        },
    },
    # 'filters': {
    #     'require_debug_true': {
    #         '()': 'django.utils.log.RequireDebugTrue',
    #     },
    # },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',  # Default logs to stderr
            'formatter': 'normal',  # use the above "normal" formatter
            # 'filters': ['require_debug_true'],  # add filters
        },
    },
    'loggers': {
        '': {  # means "root logger"
            'handlers': ['console'],  # use the above "console" handler
            'level': 'INFO',  # logging level
        },
        'some_app.some_module': {  # Modify logger in some modules
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}


# OAuth 2.0 Client ID
OAUTH2_CLIENT_ID = os.getenv('OAUTH2_CLIENT_ID')
# OAuth 2.0 Client Secret
OAUTH2_CLIENT_SECRET = os.getenv('OAUTH2_CLIENT_SECRET')
# OAuth 2.0 Redirect URI
OAUTH2_REDIRECT_URI = os.getenv('OAUTH2_REDIRECT_URI')
# OpenID Connect Discovery Endpoint
OIDC_DISCOVERY_ENDPOINT = os.getenv('OIDC_DISCOVERY_ENDPOINT')
# OAuth 2.0 Revocation Endpoint
OAUTH2_REVOCATION_ENDPOINT = os.getenv('OAUTH2_REVOCATION_ENDPOINT')
