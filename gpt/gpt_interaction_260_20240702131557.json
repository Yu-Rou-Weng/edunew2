{
  "timestamp": "2024-07-02T13:15:57.729Z",
  "mode": "initial",
  "input": "Simple Pendulum\n\nIf we define the moment of inertia (I) as:\n\n$$\nI = mr^2\n$$\n\nSince the torque $\\tau$ and angular acceleration $\\alpha$ are in opposite directions, their relationship is:\n\n$$\n\\tau = -I\\alpha \\Rightarrow rF\\sin\\theta = -mr^2 \\frac{d^2\\theta}{dt^2} \\Rightarrow \\frac{F}{m}r\\sin\\theta = -\\frac{d^2\\theta}{dt^2}\n$$\n\nIf $r = L$ and $F = mg$, and when $\\theta < 5^\\circ$, $\\sin \\theta \\approx \\theta$, then the equation can be rewritten as:\n\n$$\n\\frac{g}{L}\\theta = -\\frac{d^2\\theta}{dt^2}\n$$\n\nFrom which we can solve:\n\n$$\n\\theta(t) = \\theta_0 \\cos\\left(\\sqrt{\\frac{g}{L}} t\\right) = \\theta_0 \\cos(\\omega t)\n$$\n\nIn the above formula, $\\omega$ is the angular frequency of the oscillation, hence the period is:\n\n$$\nT = \\frac{2\\pi}{\\omega} = 2\\pi \\sqrt{\\frac{L}{g}}\n$$\n\nThere are two programs below:\n\n1. Ideal simple pendulum, changing the initial swing angle to calculate the motion process and period.\n2. Simple pendulum considering air resistance.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Length_I as a cyber input variable, set Length_I = 10\n(2) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I = 1\n(3) Length_I is the length of the pendulum. When Length_I changes to a new value, the length of the pendulum also changes to that value.\n(4) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.",
  "output": "from vpython import *\nimport numpy as np\n\nLength_I = 10\nRadius_I = 1\ng = 9.8\n\nscene = canvas(title='Simple Pendulum', width=800, height=800, center=vec(0, -Length_I/2, 0), background=vec(0.5, 0.5, 0))\npivot = vec(0, 0, 0)\nball = sphere(pos=vec(Length_I*np.sin(np.pi/4), -Length_I*np.cos(np.pi/4), 0), radius=Radius_I, color=color.yellow)\nrod = cylinder(pos=pivot, axis=ball.pos-pivot, radius=0.1, color=color.white)\nball.m = 1\nball.v = vec(0, 0, 0)\nt = 0\ndt = 0.01\n\ndef update_position(ball, rod):\n    theta = np.arccos(-ball.pos.y/Length_I)\n    alpha = -g*np.sin(theta)/Length_I\n    ball.v += vec(alpha*np.sin(theta), -alpha*np.cos(theta), 0)*dt\n    ball.pos += ball.v*dt\n    rod.axis = ball.pos - pivot\n\nwhile True:\n    rate(100)\n    update_position(ball, rod)\n    t += dt"
}