{
  "timestamp": "2024-07-02T13:12:44.544Z",
  "mode": "initial",
  "input": "Uniform Linear Motion\n\nFinally, we are starting to create physics simulation animations, beginning with the simplest form: uniform linear motion. Our goal is to draw a block, a floor, and the block's x-t graph and v-t graph. The results are as follows: GlowScript website animation link.\n\nBlock's x-t Graph\n\nBlock's v-t Graph\n\nIf you open the code in Python IDLE's editor, under the default settings, you should see colors similar to those above. The editor automatically highlights special function keywords in Python, text within quotes, comments, etc., in different colors, which facilitates reading the code. Python has two types of comments:\n\nMulti-line comments: Text between two sets of \"\"\" or '''\nSingle-line comments: Text following # until the end of the line\nWhen executing the code, the interpreter ignores the comments. Although comments do not aid in the operation of the program, they are very important for users. Without comments, even the author might forget what they were writing after a few days, let alone allowing other users to understand the code. Thus, it is essential to develop the habit of writing comments.\n\nI usually start by clearly writing the program's name, function, date, and author before setting any parameters, starting with:\n\nfrom vpython import *\nThis is the syntax for importing libraries in Python. By default, the physics simulation library vpython is not imported, so we need to add this line of code, meaning to import all functions from the vpython library. Alternatively, you can write:\n\nimport vpython as custom_name\nAssuming custom_name is vp, you would need to reference functions in vpython as vp.[function_name]; if you just write import vpython, you need to reference them as vpython.[function_name]. Since our focus is on animation, the first method is recommended, so you only need to write the function name when referencing functions in vpython.\n\nThe entire program can roughly be divided into three parts:\n\nParameter Settings\nDisplay Settings\nObject Motion\n\nParameter Settings\nIn this section, I usually assign frequently used values in the program to corresponding variables and give these variables easy-to-understand names. Although Python 3.X supports Unicode, allowing Chinese characters as variable names, it is still recommended to use English letters, numbers, and underscores for variable names. Variable names should not start with a number, use reserved keywords, or be case-sensitive. Variables should be named descriptively, such as using the name size for the size of a block.\n\nVariables defined here include size, L, v, t, dt, with their purposes written in the comments. The value of the time interval dt should be adjusted based on actual needs. This is because VPython uses numerical methods to calculate physical quantities such as forces, acceleration, velocity, displacement, etc. If a too long time span is used, the calculated values will have larger errors; however, if a shorter time span is used, the overall simulation animation will take longer to execute. The current setting is 0.01, which is precise enough for this simulation animation.\n\nDisplay Settings\nThe functions we will use include canvas, box, graph, gcurve, and their syntax will be explained below.\n\ncanvas\ncanvas in VPython is used to generate the display for animations, currently displayed through browsers like Google Chrome, Firefox, or Windows Edge. In earlier versions, such as VPython 6, the function name was display, which would open a new window. The right side of the scene represents the +x axis, the top +y axis, and the direction coming out of the screen +z axis. In this program, I named the animation window scene. Commonly adjusted options include:\n\ntitle: The title of the display, shown in the upper left corner of the screen.\nwidth: Width of the display (horizontally).\nheight: Height of the display (vertically).\nx, y: The position of the top left corner of the display in the browser window, although it seems VPython automatically adjusts based on the existing object's width and height.\ncenter: Represents the observer's position.\nbackground: Background color, the numbers in the vector brackets represent the proportions of red, green, and blue primary colors, ranging between 0 and 1. Additionally, you can use pre-named common colors.\n\nVPython 7 Supported Colors\n\nbox\nbox in VPython is used to generate a cuboid. In this program, both the block (cube) and the floor are generated using the box function. Commonly adjusted options include:\n\npos: The position of the center of the cuboid, the value is a vector, vector(x, y, z), vector can also be simplified as vec.\nlength, height, width are respectively the lengths in the x, y, z directions, can also be simplified as size=vec(x, y, z).\ncolor: The color of the cuboid.\n\ngraph\ngraph in VPython is used to create a graphing window. In earlier versions, such as VPython 6, the function name was gdisplay. In this program, I named the two graphing windows gd and gd2, used for plotting the block's x-t graph and v-t graph respectively. Commonly adjusted options similar to those of canvas have already been explained, and different options used here include:\n\nxtitle: Name of the x-axis.\nytitle: Name of the y-axis.\n\ngcurve\ngcurve in VPython is used to draw continuous curves in the graphing window. In this program, the two curves are named xt and vt, displayed in gd and gd2 respectively. Commonly adjusted options include:\n\ngraph: Which graphing window to display in.\ncolor: The color of the curve.\nAdditionally, there are gdots for plotting only data points and gvbars for drawing bar charts, which have not been used here yet.\n\nObject Motion\nUsing a while loop, the state of the object is updated every short time interval dt. Since I want the program to stop when the block reaches the edge of the floor, the condition set in the while is:\n\ncube.pos.x <= 0.5*L - 0.5*size\nNext, each line of the code is explained for its purpose.\n\nrate(1000) specifies the animation to update 1000 times per second.\ncube.pos.x += v*dt is used to update the position of the block, cube.pos.x reads the x-coordinate of the cube's position, adds the velocity v multiplied by a short time dt, and then reassigns it to the cube's x-coordinate.\nxt.plot(pos=(t, cube.pos.x)) is used to plot the block's x-t graph, with the horizontal axis position as time t and the vertical axis position as the block's position cube.pos.x.\nvt.plot(pos=(t, cube.v.x)) is used to plot the block's v-t graph, with the horizontal axis position as time t and the vertical axis position as the block's velocity cube.v.x.\nt += dt is used to update the time, adding dt to t, then reassigning it to t, equivalent to writing t = t + dt.\n\nConclusion\nAlthough the effects of this animation are very simple, and one could probably imagine the object's motion without the animation, it is precisely because of this simplicity that it is suitable as the first animation. Any discrepancies with physical principles in the animation are easily noticeable. Later, more physical quantities such as acceleration, force, angles, etc., will be added to the animation.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n\n(2) Radius_I is the speed of the cube. When Radius_I changes to a new value, the speed of the cube also changes to that value.",
  "output": "from vpython import *\n\n# Parameter Settings\nRadius_I = 1\nsize = 1.0\nL = 10.0\nv = Radius_I\nt = 0\ndt = 0.01\n\n# Display Settings\nsc = canvas(title=\"Uniform Linear Motion\", width=600, height=300, x=0, y=150,\n            center=vec(0,0,0), background=vec(0.5,0.5,0))\ncube = box(pos=vec(-L/2, 0, 0), length=size, height=size, width=size, color=color.blue)\nfloor = box(pos=vec(0, -size/2, 0), length=L, height=0.01, width=size*1.5, color=color.green)\n\ngd = graph(title=\"x-t graph\", x=600, y=150, width=450, height=300,\n           xtitle=\"t(s)\", ytitle=\"x(m)\")\nxt = gcurve(graph=gd, color=color.red)\n\ngd2 = graph(title=\"v-t graph\", x=600, y=450, width=450, height=300,\n            xtitle=\"t(s)\", ytitle=\"v(m/s)\")\nvt = gcurve(graph=gd2, color=color.red)\n\n# Object Motion\nwhile cube.pos.x <= 0.5*L - 0.5*size:\n    rate(1000)\n    cube.pos.x += v*dt\n    xt.plot(pos=(t, cube.pos.x))\n    vt.plot(pos=(t, v))\n    t += dt\n    v = Radius_I"
}