{
  "timestamp": "2024-07-02T12:08:14.800Z",
  "mode": "initial",
  "input": "Uniform Linear Motion\n\nWe are finally starting to create physics simulation animations, beginning with the simplest form of motion: uniform linear motion. Our goal is to depict a block, the floor, and the block's x-t (position-time) graph and v-t (velocity-time) graph. The result is as follows: Animation link on the GlowScript website.\n\nBlock's x-t Graph\n\nBlock's v-t Graph\n\nIf you open the code in the Python IDLE editor, under the default settings, the colors you see should resemble the ones mentioned above. The editor automatically highlights keywords, text within quotes, comments, etc., in different colors, which facilitates code reading. Python has two types of commenting:\n\nMulti-line comments: Text between two \"\"\" or two ''' lines.\nSingle-line comments: Text after a # until the end of the line.\nThe interpreter ignores comments when executing code. Although comments do not aid in the operation of the program, they are very important for the user. Without comments, even the author might forget what they were writing after a few days, let alone allowing other users to understand the code. Therefore, it's crucial to develop the habit of writing comments.\n\nI usually start by clearly writing the program\u2019s name, function, date, and author before setting any parameters with:\n\nfrom vpython import *\nThis is the syntax for importing libraries in Python. By default, the library for physics simulations, vpython, is not included, so we need to add this line of code, meaning to import all functions from the vpython library. Alternatively, it can be written as:\n\nimport vpython as custom_name\nIf custom_name is set as vp, then to use a function from vpython, you would write vp.[function_name]; if you simply write import vpython, then you must use vpython.[function_name] when referencing functions from vpython. Since our focus is on animation, the first method is recommended, so you only need to write the function name when calling functions from vpython.\n\nThe entire program can roughly be divided into three parts:\n\nParameter Settings\nScene Settings\nObject Motion\n\nParameter Settings\nIn parameter settings, I typically assign frequently used values in the program to corresponding variables and name these variables with easy-to-understand names. Although Python 3.X supports Unicode and allows the use of Chinese characters as variable names, it's still recommended to use English letters, numbers, and underscores. Variable names should start with a letter, not a number, and reserved keywords should not be used. Ideally, variables should have meaningful names, such as size for the size of the block.\n\nVariables defined here include size, L, v, t, dt, with their purposes already noted in the comments. The value of the time interval dt should be adjusted according to actual needs since VPython uses numerical methods to calculate physical quantities like force, acceleration, velocity, displacement, etc. If the time length input is too long, the resulting values may have significant errors; if too short, it prolongs the simulation. The current setting of 0.01 is precise enough for this animation.\n\nScene Settings\nFunctions used include canvas, box, graph, gcurve, each explained below.\n\ncanvas\n\"canvas\" refers to a canvas or screen in VPython, used for displaying animations, currently through browsers like Google Chrome, FireFox, or Windows Edge. In earlier versions such as VPython 6, the function was named \"display\" and opened a separate window. In this program, the animation window is named \"scene.\" Commonly adjusted options include:\n\ntitle: The title of the scene, displayed in the upper left corner.\nwidth: The width of the scene (horizontal direction).\nheight: The height of the scene (vertical direction).\nx, y: The top-left corner of the scene in the browser window, though it seems VPython automatically adjusts based on existing object dimensions.\ncenter: Represents the observer's position.\nbackground: Background color, the numbers in the vector brackets represent the red, green, blue components, ranging from 0 to 1. Predefined colors can also be used.\n\nVPython 7 Supported Colors\n\nbox\n\"box\" refers to a rectangular box in VPython, used to create a cuboid. In this program, both the block (cube) and the floor are created using box. Commonly adjusted options include:\n\npos: The position of the center of the cuboid, specified as a vector, vector(x, y, z), or abbreviated as vec.\nlength, height, width: Corresponding to lengths in the x, y, z directions, can also be abbreviated as size=vec(x, y, z).\ncolor: The color of the cuboid.\n\ngraph\n\"graph\" refers to a graph window in VPython. In earlier versions such as VPython 6, the function was named \"gdisplay.\" In this program, two graph windows are named gd and gd2, used for plotting the block's x-t and v-t graphs, respectively. Commonly adjusted options similar to those of canvas include title, width, height, x, y, with different options used here being:\n\nxtitle: The name of the x-axis.\nytitle: The name of the y-axis.\n\ngcurve\n\"gcurve\" is used in VPython to plot continuous curves on a graph window. In this program, two curves named xt and vt are displayed in gd and gd2, respectively. Commonly adjusted options include:\n\ngraph: Specifies which graph window to display on.\ncolor: The color of the curve.\nThere are also options like gdots for plotting only data points and gvbars for creating bar graphs, not used here.\n\nObject Motion\nA while loop is used to update the object's state every small time interval dt. Since I want the program to stop when the block reaches the edge of the floor, the condition set in the while loop is:\n\ncube.pos.x <= 0.5*L - 0.5*size\nFollowing is an explanation of each line of code.\n\nrate(1000) specifies that the animation updates 1000 times per second.\ncube.pos.x += v*dt updates the position of the block; cube.pos.x reads the x-coordinate of the cube's position, adds the product of velocity v and a small time interval dt, and reassigns it to the x-coordinate of the cube's position.\nxt.plot(pos=(t, cube.pos.x)) plots the block's x-t graph, with the horizontal axis as time t and the vertical axis as the block's position cube.pos.x.\nvt.plot(pos=(t, cube.v.x)) plots the block's v-t graph, with the horizontal axis as time t and the vertical axis as the block's velocity cube.v.x.\nt += dt updates the time by adding dt to t, equivalent to t = t + dt.\n\nConclusion\nAlthough the effects of this animation are very simple, and one might even imagine the object's motion without it, it is very suitable as a first animation. Any inconsistencies with physical principles are easily noticeable. More physical quantities such as acceleration, force, and angles will be added to the animations in the future.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n\n(2) Radius_I is the speed of the cube. When Radius_I changes to a new value, the speed of the cube also changes to that value.",
  "output": "from vpython import *\n\n# Parameter Definitions\nRadius_I = 1 # Cube speed\nsize = 0.5 # cube size\nL = 50.0 # floor length\nt = 0.0 # time\ndt = 0.01 # time interval\n\n# Scene Settings\nscene = canvas(title=\"Uniform Linear Motion\",\n                width=800, height=300,\n                x=0, y=0,\n                center=vec(0, 0, 0), \n                background=vec(0, 0, 0))\n\n# Objects\nfloor = box(pos=vec(0, -0.5 * size, 0), \n             length=L, height=0.01, width=3, \n             color=color.blue)\ncube = box(pos=vec(0, 0, 0), \n           length=size, height=size, width=size, \n           color=color.red)\n\n# Graph Settings\ngd = graph(title=\"x-t Graph\", \n           width=600, height=450, \n           x=800, y=0, \n           xtitle=\"<i>t</i> (s)\", ytitle=\"<i>x</i> (m)\")\nxt = gcurve(graph=gd, color=color.red)\n\ngd2 = graph(title=\"v-t Graph\", \n            width=600, height=450, \n            x=800, y=0, \n            xtitle=\"<i>t</i> (s)\", ytitle=\"<i>v</i> (m/s)\")\nvt = gcurve(graph=gd2, color=color.green)\n\n# Object Motion\nwhile cube.pos.x <= 0.5 * L - 0.5 * size:\n    rate(1000)\n    cube.pos.x += Radius_I * dt\n    xt.plot(pos=(t, cube.pos.x))\n    vt.plot(pos=(t, Radius_I))\n    t += dt"
}