{
  "timestamp": "2024-07-02T12:32:00.284Z",
  "mode": "initial",
  "input": "Simple Pendulum\n\nIf we define the moment of inertia (I) as:\n\n$$\nI = mr^2\n$$\n\nSince the torque $\\tau$ and the angular acceleration $\\alpha$ are in opposite directions, the relationship between them is:\n\n$$\n\\tau = -I\\alpha \\Rightarrow rF\\sin\\theta = -mr^2 \\frac{d^2\\theta}{dt^2} \\Rightarrow \\frac{F}{m}r\\sin\\theta = -\\frac{d^2\\theta}{dt^2}\n$$\n\nIf $r = L$ and $F = mg$, and when $\\theta < 5^\\circ$, $\\sin \\theta \\approx \\theta$, then the equation can be rewritten as:\n\n$$\n\\frac{g}{L}\\theta = -\\frac{d^2\\theta}{dt^2}\n$$\n\nFrom this, we can solve for:\n\n$$\n\\theta(t) = \\theta_0 \\cos\\left(\\sqrt{\\frac{g}{L}} t\\right) = \\theta_0 \\cos(\\omega t)\n$$\n\nIn the above formula, $\\omega$ is the angular frequency of the oscillation, thus the period is:\n\n$$\nT = \\frac{2\\pi}{\\omega} = 2\\pi \\sqrt{\\frac{L}{g}}\n$$\n\nThere are two programs included:\n\n1. An ideal simple pendulum, where the initial swing angle is varied to calculate the motion process and period.\n2. A simple pendulum considering air resistance.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Length_I as a cyber input variable, set Length_I=10\n(2) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(3) Length_I is the length of the pendulum. When Length_I changes to a new value, the length of the pendulum also changes to that value.\n(4) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.",
  "output": "import vpython as vp\n\nLength_I = 10\nRadius_I = 1\ng = 9.8\n\n# Create pendulum bob and rod\nrod = vp.cylinder(pos=vp.vector(0,0,0), axis=vp.vector(0,-Length_I,0), radius=0.01)\nbob = vp.sphere(pos=rod.axis, radius=Radius_I, color=vp.color.yellow)\n\n# Initialize motion parameters\ntheta = vp.radians(45)   # initial angle of pendulum\nomega = 0                # initial angular velocity\nalpha = -g/Length_I * vp.sin(theta)  # initial angular acceleration\nt = 0\ndt = 0.01\n\nwhile True:\n    vp.rate(100)\n    # update motion parameters\n    omega += alpha*dt\n    theta += omega*dt\n    alpha = -g/Length_I * vp.sin(theta)\n    # update pendulum position\n    bob.pos = vp.vector(Length_I*vp.sin(theta), -Length_I*vp.cos(theta), 0)\n    rod.axis = bob.pos\n    t += dt"
}