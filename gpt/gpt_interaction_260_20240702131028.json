{
  "timestamp": "2024-07-02T13:10:28.390Z",
  "mode": "initial",
  "input": "Simple Pendulum\n\nIf we define the moment of inertia (I) as:\n\n$$\nI = mr^2\n$$\n\nSince the torque $\\tau$ and angular acceleration $\\alpha$ are in opposite directions, their relationship is:\n\n$$\n\\tau = -I\\alpha \\Rightarrow rF\\sin\\theta = -mr^2 \\frac{d^2\\theta}{dt^2} \\Rightarrow \\frac{F}{m}r\\sin\\theta = -\\frac{d^2\\theta}{dt^2}\n$$\n\nIf $r = L$ and $F = mg$, and when $\\theta < 5^\\circ$, $\\sin \\theta \\approx \\theta$, then the equation can be rewritten as:\n\n$$\n\\frac{g}{L}\\theta = -\\frac{d^2\\theta}{dt^2}\n$$\n\nFrom this, we can solve:\n\n$$\n\\theta(t) = \\theta_0 \\cos\\left(\\sqrt{\\frac{g}{L}} t\\right) = \\theta_0 \\cos(\\omega t)\n$$\n\nIn the above formula, $\\omega$ is the angular frequency of the oscillation, thus the period is:\n\n$$\nT = \\frac{2\\pi}{\\omega} = 2\\pi \\sqrt{\\frac{L}{g}}\n$$\n\nThere are two programs provided:\n\n1. An ideal simple pendulum, changing the initial swing angle to calculate the motion process and period.\n2. A simple pendulum considering air resistance.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Length_I as a cyber input variable, set Length_I=10\n(2) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(3) Length_I is the length of the pendulum. When Length_I changes to a new value, the length of the pendulum also changes to that value.\n(4) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.",
  "output": "from vpython import *\nimport numpy as np\n\n# Initialize parameters\ng = 9.8\ntheta_0 = np.radians(5)\n\n# Cyber Input Variables\nLength_I = 10\nRadius_I = 1\n\n# Scene\nscene = canvas(center=vec(0, -Length_I/2, 0), width=800, height=800)\n\n# Pendulum\nceiling = box(pos=vec(0, 0, 0), length=0.2, height=0.01, width=0.2)\nball = sphere(radius=Radius_I, color=color.yellow)\nrod = cylinder(radius=0.01)\n\n# Function to update pendulum\ndef update_pendulum(theta, L):\n    ball.pos = vec(L * sin(theta), -L * cos(theta), 0)\n    rod.pos = ceiling.pos\n    rod.axis = ball.pos - ceiling.pos\n\n# Animation loop\nt = 0\ndt = 0.01\nwhile True:\n    rate(100)\n    theta = theta_0 * cos(sqrt(g/Length_I) * t)\n    update_pendulum(theta, Length_I)\n    t += dt"
}