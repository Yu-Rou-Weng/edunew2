{
  "timestamp": "2024-07-03T13:02:11.552Z",
  "mode": "initial",
  "input": "Simple Pendulum\n\nIf we define the moment of inertia (I) as:\n\n$$\nI = mr^2\n$$\n\nSince the direction of torque $\\tau$ and angular acceleration $\\alpha$ are opposite, their relationship is given by:\n\n$$\n\\tau = -I\\alpha \\Rightarrow rF\\sin\\theta = -mr^2 \\frac{d^2\\theta}{dt^2} \\Rightarrow \\frac{F}{m}r\\sin\\theta = -\\frac{d^2\\theta}{dt^2}\n$$\n\nIf $r = L$ and $F = mg$, and when $\\theta < 5^\\circ$, $\\sin \\theta \\approx \\theta$, then the equation can be rewritten as:\n\n$$\n\\frac{g}{L}\\theta = -\\frac{d^2\\theta}{dt^2}\n$$\n\nFrom this we can solve:\n\n$$\n\\theta(t) = \\theta_0 \\cos\\left(\\sqrt{\\frac{g}{L}} t\\right) = \\theta_0 \\cos(\\omega t)\n$$\n\nIn the formula above, $\\omega$ is the angular frequency of the oscillation, so the period is:\n\n$$\nT = \\frac{2\\pi}{\\omega} = 2\\pi \\sqrt{\\frac{L}{g}}\n$$\n\nThe following are two programs:\n\n1. An ideal simple pendulum, change the initial swing angle to calculate the motion process and period.\n2. A simple pendulum considering air resistance.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Length_I as a cyber input variable, set Length_I=10\n(2) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(3) Length_I is the length of the pendulum. When Length_I changes to a new value, the length of the pendulum also changes to that value.\n(4) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(5) Import time packages to your code.",
  "output": "from vpython import *\nimport time\n\nLength_I = 10\nRadius_I = 1\n\n# Create 3D display window\nscene = canvas()\n\n# Create objects\nceiling = box(length=0.2, height=0.01, width=0.2, color=color.blue)\nball = sphere(radius=Radius_I, color=color.red)\nrod = cylinder(radius=0.01, color=color.yellow)\n\n# Initialize properties\nball.mass = 1.0\nrod.length = Length_I\nball.pos = vector(0, -rod.length, 0)\nrod.axis = ball.pos - ceiling.pos\ng = vector(0, -9.8, 0)\ntheta = 0.2\nball.v = vector(0, 0, 0)\nball.momentum = ball.mass * ball.v\ndt = 0.01\n\n# Time loop for animation\nwhile True:\n    rate(100)  # Limit the number of loops per second\n\n    # Calculate forces\n    gravitational_force = ball.mass * g\n    tension_force = -gravitational_force.proj(rod.axis)\n    net_force = gravitational_force + tension_force\n\n    # Update momentum\n    ball.momentum += net_force * dt\n\n    # Update position\n    ball.pos += ball.momentum / ball.mass * dt\n\n    # Update rod\n    rod.axis = ball.pos - ceiling.pos\n\n    # Update time\n    t += dt\n\n    # Reset pendulum\n    if t > 2 * pi * sqrt(rod.length / mag(g)):\n        ball.pos = vector(rod.length * sin(theta), -rod.length * cos(theta), 0)\n        ball.momentum = ball.mass * vector(0, 0, 0)\n        rod.axis = ball.pos - ceiling.pos\n        t = 0",
  "session_id": "92ccaaaf-6379-45c7-aabc-178327838278",
  "serial_number": 10
}