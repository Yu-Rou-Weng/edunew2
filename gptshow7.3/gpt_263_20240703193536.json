{
  "timestamp": "2024-07-03T11:35:37.482Z",
  "mode": "initial",
  "input": "Simple Pendulum\n\nIf we define the moment of inertia (I) as:\n\n$$\nI = mr^2\n$$\n\nSince the direction of torque $\\tau$ and angular acceleration $\\alpha$ are opposite, their relationship is given by:\n\n$$\n\\tau = -I\\alpha \\Rightarrow rF\\sin\\theta = -mr^2 \\frac{d^2\\theta}{dt^2} \\Rightarrow \\frac{F}{m}r\\sin\\theta = -\\frac{d^2\\theta}{dt^2}\n$$\n\nIf $r = L$ and $F = mg$, and when $\\theta < 5^\\circ$, $\\sin \\theta \\approx \\theta$, then the equation can be rewritten as:\n\n$$\n\\frac{g}{L}\\theta = -\\frac{d^2\\theta}{dt^2}\n$$\n\nFrom this, we can solve for:\n\n$$\n\\theta(t) = \\theta_0 \\cos\\left(\\sqrt{\\frac{g}{L}} t\\right) = \\theta_0 \\cos(\\omega t)\n$$\n\nIn the above formula, $\\omega$ is the angular frequency of oscillation, hence the period is:\n\n$$\nT = \\frac{2\\pi}{\\omega} = 2\\pi \\sqrt{\\frac{L}{g}}\n$$\n\nThere are two programs below:\n\n1. Ideal simple pendulum, change the initial swing angle to calculate the motion process and period.\n2. Simple pendulum considering air resistance.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Length_I as a cyber input variable, set Length_I=10\n(2) Length_I is the length of the pendulum. When Length_I changes to a new value, the length of the pendulum also changes to that value.\n(3) Import time packages to your code.",
  "output": "from vpython import *\nimport time\n\n# Constants\ng = 9.8         # gravitational acceleration\nLength_I = 10   # length of pendulum\ntheta_0 = 0.1   # initial swing angle\n\n# Create pendulum\nceiling = box(length=0.2, height=0.01, width=0.2, color=color.blue)\nball = sphere(radius=0.05, color=color.red)\nrod = cylinder(radius=0.01, color=color.yellow)\nball.m = 1     # mass of pendulum\n\n# Animation parameters\ndt = 0.01\nt = 0\n\n# Pendulum initial conditions\nball.theta = theta_0\nball.omega = 0\n\nwhile True:\n    rate(100)\n    \n    # Update pendulum position\n    ball.pos = vector(Length_I*sin(ball.theta), -Length_I*cos(ball.theta), 0)\n    rod.axis = ball.pos\n    \n    # Update pendulum motion\n    alpha = -g/Length_I * sin(ball.theta)\n    ball.omega += alpha*dt\n    ball.theta += ball.omega*dt\n    \n    # Update time\n    t += dt\n    \n    # Detect one full period\n    if abs(ball.theta - theta_0) < 1E-4 and ball.omega < 0:\n        print(\"Period: \", t, \"s\")\n        t = 0"
}