{
  "session_id": 1,
  "serial_number": 1,
  "timestamp": "2024-07-03T13:38:51.147Z",
  "mode": "initial",
  "input": "Simple Pendulum\n\nIf we define the moment of inertia (I) as:\n\n$$\nI = mr^2\n$$\n\nSince the direction of torque $\\tau$ and angular acceleration $\\alpha$ are opposite, their relationship can be expressed as:\n\n$$\n\\tau = -I\\alpha \\Rightarrow rF\\sin\\theta = -mr^2 \\frac{d^2\\theta}{dt^2} \\Rightarrow \\frac{F}{m}r\\sin\\theta = -\\frac{d^2\\theta}{dt^2}\n$$\n\nIf $r = L$ and $F = mg$, and when $\\theta < 5^\\circ$, $\\sin \\theta \\approx \\theta$, then the equation can be rewritten as:\n\n$$\n\\frac{g}{L}\\theta = -\\frac{d^2\\theta}{dt^2}\n$$\n\nFrom this, we can derive:\n\n$$\n\\theta(t) = \\theta_0 \\cos\\left(\\sqrt{\\frac{g}{L}} t\\right) = \\theta_0 \\cos(\\omega t)\n$$\n\nIn the above formula, $\\omega$ is the angular frequency of the oscillation, hence the period is:\n\n$$\nT = \\frac{2\\pi}{\\omega} = 2\\pi \\sqrt{\\frac{L}{g}}\n$$\n\nThere are two programs below:\n\n1. An ideal simple pendulum, changing the initial swing angle to calculate the motion process and period.\n2. A simple pendulum considering air resistance.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Length_I as a cyber input variable, set Length_I=10\n(2) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n(3) Length_I is the length of the pendulum. When Length_I changes to a new value, the length of the pendulum also changes to that value.\n(4) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(5) Do not import packages that are not supported by VPython, such as np, math, and time.",
  "output": "from vpython import *\n\n# Cyber Input Variable Mapping Information\nLength_I = 10 \nRadius_I = 1 \n\n# Constants\ng = 9.8 # gravity\n\n# Create 3D display\nscene = canvas()\n\n# Create pendulum\nball = sphere(pos=vector(Length_I, 0, 0), radius=Radius_I, color=color.yellow) \npivot = vector(0, 0, 0) \nrod = cylinder(pos=pivot, axis=ball.pos, radius=0.1)\nball.m = 1\nball.v = vector(0, 0, 0)\n\n# Create arrows to represent forces\nFnet_arrow = arrow(pos=ball.pos, axis=vector(0,0,0), color=color.green)\nFg_arrow = arrow(pos=ball.pos, axis=vector(0,0,0), color=color.red)\n\n# Create time and angle variables\nt = 0\ndt = 0.01\ntheta = 0.2\nomega = 0\n\n# Animation loop\nwhile True:\n    rate(100) # Limit to 100 iterations per second\n\n    # Update forces\n    Fg = vector(0, -ball.m*g, 0)\n    Fnet = Fg\n    alpha = Fnet.x / (ball.m * Length_I)\n\n    # Update velocity and position\n    omega = omega - alpha*dt\n    theta = theta + omega*dt\n    ball.pos = Length_I*vector(sin(theta), -cos(theta), 0)\n\n    # Update arrows\n    Fg_arrow.pos = ball.pos\n    Fg_arrow.axis = Fg\n    Fnet_arrow.pos = ball.pos\n    Fnet_arrow.axis = Fnet\n\n    # Update time\n    t = t + dt"
}