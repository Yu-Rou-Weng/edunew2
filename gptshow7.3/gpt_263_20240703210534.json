{
  "timestamp": "2024-07-03T13:05:35.204Z",
  "mode": "modification",
  "input": "Please update the following program based on this instruction: The oscillation range of the pendulum is limited to the lower half-circle, specifically between 45 degrees to the left of the vertical downward position and 45 degrees to the right of the vertical downward position.\n\nCurrent program:\nfrom vpython import *\n\nLength_I = 10\nRadius_I = 1\n\n# Create 3D display window\nscene = canvas()\n\n# Create objects\nceiling = box(length=0.2, height=0.01, width=0.2, color=color.blue)\nball = sphere(radius=Radius_I, color=color.red)\nrod = cylinder(radius=0.01, color=color.yellow)\n\n# Initialize properties\nball.mass = 1.0\nrod.length = Length_I\nball.pos = vector(0, -rod.length, 0)\nrod.axis = ball.pos - ceiling.pos\ng = vector(0, -9.8, 0)\ntheta = 0.2\nball.v = vector(0, 0, 0)\nball.momentum = ball.mass * ball.v\ndt = 0.01\nt = 0\n\n# Time loop for animation\nwhile True:\n    rate(100)  # Limit the number of loops per second\n\n    # Calculate forces\n    gravitational_force = ball.mass * g\n    tension_force = -gravitational_force.proj(rod.axis)\n    net_force = gravitational_force + tension_force\n\n    # Update momentum\n    ball.momentum += net_force * dt\n\n    # Update position\n    ball.pos += ball.momentum / ball.mass * dt\n\n    # Update rod\n    rod.axis = ball.pos - ceiling.pos\n\n    # Update time\n    t += dt\n\n    # Reset pendulum\n    if t > 2 * pi * sqrt(rod.length / mag(g)):\n        ball.pos = vector(rod.length * sin(theta), -rod.length * cos(theta), 0)\n        ball.momentum = ball.mass * vector(0, 0, 0)\n        rod.axis = ball.pos - ceiling.pos\n        t = 0",
  "output": "from vpython import *\n\nLength_I = 10\nRadius_I = 1\n\n# Create 3D display window\nscene = canvas()\n\n# Create objects\nceiling = box(length=0.2, height=0.01, width=0.2, color=color.blue)\nball = sphere(radius=Radius_I, color=color.red)\nrod = cylinder(radius=0.01, color=color.yellow)\n\n# Initialize properties\nball.mass = 1.0\nrod.length = Length_I\nball.pos = vector(0, -rod.length, 0)\nrod.axis = ball.pos - ceiling.pos\ng = vector(0, -9.8, 0)\ntheta = 0.2\nball.v = vector(0, 0, 0)\nball.momentum = ball.mass * ball.v\ndt = 0.01\nt = 0\n\n# Time loop for animation\nwhile True:\n    rate(100)  # Limit the number of loops per second\n\n    # Calculate forces\n    gravitational_force = ball.mass * g\n    tension_force = -gravitational_force.proj(rod.axis)\n    net_force = gravitational_force + tension_force\n\n    # Update momentum\n    ball.momentum += net_force * dt\n\n    # Update position\n    ball.pos += ball.momentum / ball.mass * dt\n\n    # Update rod\n    rod.axis = ball.pos - ceiling.pos\n\n    # Update time\n    t += dt\n\n    # Reset pendulum\n    if abs(atan(ball.pos.x/ball.pos.y))>pi/4:\n        theta = -theta\n        ball.pos = vector(rod.length * sin(theta), -rod.length * cos(theta), 0)\n        ball.momentum = ball.mass * vector(0, 0, 0)\n        rod.axis = ball.pos - ceiling.pos",
  "session_id": "92ccaaaf-6379-45c7-aabc-178327838278",
  "serial_number": 12
}