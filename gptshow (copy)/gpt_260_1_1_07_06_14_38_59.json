{
  "session_id": 1,
  "interactions": [
    {
      "serial_number": 1,
      "timestamp": "2024-07-06 14:38:59",
      "input": "Simple Pendulum\n\nIf we define the moment of inertia (I) as:\n\n$$\nI = mr^2\n$$\n\nSince the directions of torque $\\tau$ and angular acceleration $\\alpha$ are opposite, their relationship is expressed as:\n\n$$\n\\tau = -I\\alpha \\Rightarrow rF\\sin\\theta = -mr^2 \\frac{d^2\\theta}{dt^2} \\Rightarrow \\frac{F}{m}r\\sin\\theta = -\\frac{d^2\\theta}{dt^2}\n$$\n\nIf $r = L$ and $F = mg$, when $\\theta < 5^\\circ$, $\\sin\\theta \\approx \\theta$, then the equation can be rewritten as:\n\n$$\n\\frac{g}{L}\\theta = -\\frac{d^2\\theta}{dt^2}\n$$\n\nFrom this, we can derive:\n\n$$\n\\theta(t) = \\theta_0 \\cos\\left(\\sqrt{\\frac{g}{L}} t\\right) = \\theta_0 \\cos(\\omega t)\n$$\n\nIn the above formula, $\\omega$ is the angular frequency of the oscillation, hence the period is:\n\n$$\nT = \\frac{2\\pi}{\\omega} = 2\\pi \\sqrt{\\frac{L}{g}}\n$$\n\nBelow are two programs:\n\n1. An ideal simple pendulum, changing the starting angle to calculate the motion process and period.\n2. A simple pendulum considering air resistance.\n\n(1) Define and initialize a variable named Length_I as a cyber input variable, set Length_I=10.\n(2) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1.\n(3) Length_I is the length of the pendulum. When Length_I changes to a new value, the length of the pendulum also changes to that value.\n(4) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(5) Do not import packages that are not supported by VPython, such as np, math, and time.",
      "output": "from vpython import *\n\n# Constants\ng = vec(0, -9.8, 0)\nLength_I = 10\nRadius_I = 1\n\n# Pendulum\npendulum = sphere(pos=vec(Length_I * sin(0.1), -Length_I * cos(0.1), 0), radius=Radius_I, color=color.yellow)\npendulum.mass = 1\npendulum.v = vec(0, 0, 0)\npendulum.p = pendulum.mass * pendulum.v\n\n# Rod\nrod = cylinder(pos=vec(0, 0, 0), axis=pendulum.pos, radius=0.01)\n\n# Simulation time\ndt = 0.01\nt = 0\n\n# Simulation\nwhile True:\n    rate(100)\n    \n    # Update pendulum position and velocity\n    pendulum.p = pendulum.p + g * pendulum.mass * dt\n    pendulum.pos = pendulum.pos + (pendulum.p / pendulum.mass) * dt\n    \n    # Update rod position and axis\n    rod.axis = pendulum.pos",
      "mode": "initial"
    }
  ]
}