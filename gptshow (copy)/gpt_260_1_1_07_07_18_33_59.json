{
  "session_id": 1,
  "interactions": [
    {
      "serial_number": 1,
      "timestamp": "2024-07-07 18:33:59",
      "input": "Simple Pendulum\n\nIf we define the moment of inertia (I) as:\n\n$$\nI = mr^2\n$$\n\nSince the direction of the torque $\\tau$ and angular acceleration $\\alpha$ are opposite, their relationship is:\n\n$$\n\\tau = -I\\alpha \\Rightarrow rF\\sin\\theta = -mr^2 \\frac{d^2\\theta}{dt^2} \\Rightarrow \\frac{F}{m}r\\sin\\theta = -\\frac{d^2\\theta}{dt^2}\n$$\n\nIf $r = L$ and $F = mg$, and when $\\theta < 5^\\circ$, $\\sin \\theta \\approx \\theta$, then the equation can be rewritten as:\n\n$$\n\\frac{g}{L}\\theta = -\\frac{d^2\\theta}{dt^2}\n$$\n\nFrom this we can solve:\n\n$$\n\\theta(t) = \\theta_0 \\cos\\left(\\sqrt{\\frac{g}{L}} t\\right) = \\theta_0 \\cos(\\omega t)\n$$\n\nIn the above formula, $\\omega$ is the angular frequency of the oscillation, thus the period is:\n\n$$\nT = \\frac{2\\pi}{\\omega} = 2\\pi \\sqrt{\\frac{L}{g}}\n$$\n\nThere are two programs below:\n\n1. An ideal simple pendulum, change the initial swing angle to calculate the motion process and period.\n2. A simple pendulum considering air resistance.\n\n(1) Define and initialize a variable named Length_I as a cyber input variable, set Length_I=10.\n(2) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1.\n(3) Length_I is the length of the pendulum. When Length_I changes to a new value, the length of the pendulum also changes to that value.\n(4) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(5) Generate the program same as the following code:\n            ```python\n            from vpython import *\n\n            # cyber input variable mapping\n            Length_I = 10\n            Radius_I = 1\n\n            # create the scene of the pendulum\n            scene = canvas(title='Simple Pendulum', width=800, height=800, center=vector(0,-Length_I/2,0), background=color.white)\n            # create the ceiling\n            ceiling = box(length=0.2, height=0.01, width=0.2, pos=vector(0,0,0))\n            # create the ball\n            ball = sphere(radius=Radius_I, color=color.red)\n\n            # create the rod\n            rod = cylinder(radius=0.01)\n\n            # initialize\n            ball.pos = vector(Length_I,0,0)\n            rod.axis = ball.pos\n            ball.v = vector(0,0,0)\n            ball.m = 1\n            g = 9.8\n            ball.theta = 30 * pi / 180\n            ball.omega = 0\n            t = 0\n            dt = 0.01\n\n            while t < 10:\n                rate(100)\n                Radius_I = new_value # new_value should be updated based on the new input\n                ball.radius = Radius_I \n                alpha = - g / Length_I * sin(ball.theta)\n                ball.omega += alpha * dt\n                d_theta = ball.omega * dt\n                ball.theta += d_theta\n                ball.pos = vector(Length_I*sin(ball.theta), -Length_I*cos(ball.theta), 0)\n            ```",
      "output": "from vpython import *\n\n# Cyber input variable mapping\nLength_I = 10\nRadius_I = 1\n\n# Create the scene of the pendulum\nscene = canvas(title='Simple Pendulum', width=800, height=800, center=vector(0,-Length_I/2,0), background=color.white)\n# Create the ceiling\nceiling = box(length=0.2, height=0.01, width=0.2, pos=vector(0,0,0))\n# Create the ball\nball = sphere(radius=Radius_I, color=color.red)\n\n# Create the rod\nrod = cylinder(radius=0.01)\n\n# Initialize\nball.pos = vector(Length_I,0,0)\nrod.axis = ball.pos\nball.v = vector(0,0,0)\nball.m = 1\ng = 9.8\nball.theta = 30 * pi / 180\nball.omega = 0\nt = 0\ndt = 0.01\n\nwhile t < 10:\n    rate(100)\n    Length_I = new_value # new_value should be updated based on the new input\n    ball.pos = vector(Length_I*sin(ball.theta), -Length_I*cos(ball.theta), 0)\n    alpha = - g / Length_I * sin(ball.theta)\n    ball.omega += alpha * dt\n    d_theta = ball.omega * dt\n    ball.theta += d_theta",
      "mode": "initial"
    }
  ]
}