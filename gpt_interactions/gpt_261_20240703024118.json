{
  "timestamp": "2024-07-03T02:41:19.082Z",
  "mode": "initial",
  "input": "Uniform Linear Motion\n\nWe are finally starting to create physics simulation animations, and we'll begin with the simplest form: uniform linear motion. The goal is to illustrate the block, the floor, and the block's x-t graph and v-t graph. The results can be viewed through the following link to the GlowScript website animation.\n\nBlock's x-t Graph\n\nBlock's v-t Graph\n\nIf you open the code in Python IDLE editor, the default colors you see should be very similar to those shown above. The editor automatically highlights reserved words with special functions in Python, text within quotes, comments, etc., in different colors to facilitate code reading. Python has two types of comments:\n\nMulti-line comments: Text between two \"\"\" or two '''.\nSingle-line comments: Text following # until the end of the line.\nThe interpreter ignores comments when executing the code. Although comments do not aid in the program operation, they are very important for the user. Without comments, even the author may forget what they were coding after a few days, not to mention making it understandable to other users. Therefore, it's crucial to develop the habit of writing comments.\n\nI usually start by clearly writing the program name, function, date, and author. Before setting the parameters, I write:\n\nfrom vpython import *\nThis is the syntax for importing libraries in Python. By default, the library for physics simulation, vpython, is not included, so we need to add this line of code, which means importing all functions from the vpython library. Alternatively, you can write:\n\nimport vpython as custom_name\nAssuming custom_name is vp, then to use a function from vpython, you would need to write vp.[function_name]; if you just write import vpython, you would need to write vpython.[function_name]. Since our focus is on animation, the first method is recommended, as it only requires the function name when referencing functions from vpython.\n\nThe whole program can roughly be divided into three parts:\n\nParameter Settings\nScreen Setup\nObject Movement\n\nParameter Settings\nIn the parameter settings section, I typically assign frequently used values in the program to corresponding variables and give these variables understandable names. Although Python 3.X supports Unicode and allows Chinese characters as variable names, it is still recommended to use English letters, numbers, and underscores. Variable names must start with a letter, not a number, and cannot use reserved words. Ideally, variable names should be meaningful, for example, naming the block size as size.\n\nThe variables I define here include size, L, v, t, dt, with their purposes already commented in the respective lines. The value of the time interval dt should be adjusted according to actual needs. This is because VPython uses numerical methods to compute physical quantities such as force, acceleration, velocity, displacement, etc. If the time length input is too long, the calculated values will have larger errors; however, if the time length is too short, the total simulation time will increase. The currently set value of 0.01 is precise enough for this simulation animation.\n\nScreen Setup\nThe functions we will use include canvas, box, graph, gcurve. Below is an explanation of the syntax for these functions.\n\ncanvas\nCanvas in English refers to a cloth or a painting canvas. In VPython, it is used to generate the display for animations, currently shown through the browser, compatible with Google Chrome, Firefox, or Windows Edge. [1] In VPython 6 and earlier versions, the function name was display, which would open a new window. The right side of the screen corresponds to the +x-axis, the top to the +y-axis, and the direction coming out of the screen to the +z-axis. In this program, I have named the animation window scene. Common adjustments include:\n\ntitle: The title of the display, shown at the top left of the screen.\nwidth: Width of the display (horizontal direction).\nheight: Height of the display (vertical direction).\nx, y: The position of the top left corner of the display in the browser window, although it appears that VPython automatically adjusts based on the existing object\u2019s width and height.\ncenter: Represents the observer's position.\nbackground: Background color, with numbers in the vector parentheses representing the proportions of the three primary colors red, green, and blue, ranging from 0 to 1. Alternatively, you can use pre-named common colors. [2]\n\nVPython 7 Supported Colors\n\nbox\nBox, in English, means a container or box. In VPython, it is used to create a cuboid. In this program, both the cube and the floor are generated using a box. [3] Common adjustments include:\n\npos: The position of the center of the cuboid, given as a vector, vector(x, y, z), which can also be simplified as vec.\nlength, height, width are the lengths in the x, y, z directions, which can also be simplified as size=vec(x, y, z).\ncolor: The color of the cuboid.\n\ngraph\nGraph, in English, refers to a diagram. In VPython, it is used to create a plotting window. In VPython 6 and earlier versions, the function name was gdisplay. [4] In this program, I have named two plotting windows gd and gd2, used for plotting the x-t graph and the v-t graph of the block, respectively. The options for adjustment are similar to those for canvas, and the functions of title, width, height, x, y have already been introduced. The options used differently here are:\n\nxtitle: The name of the x-axis.\nytitle: The name of the y-axis.\n\ngcurve\nIn VPython, gcurve is used to plot continuous curves in the plotting window. In this program, the two curves are named xt and vt, displayed in gd and gd2 respectively. Common adjustments include:\n\ngraph: Indicates which plotting window to display in.\ncolor: The color of the curve.\nAdditionally, there are gdots for plotting data points and gvbars for drawing bar graphs, although they are not used here.\n\nObject Movement\nUsing a while loop, the program updates the object's state every short interval dt. Since I want the program to stop running when the block reaches the edge of the floor, the condition set in the while loop is\n\ncube.pos.x <= 0.5*L - 0.5*size\nBelow is an explanation of the code line by line.\n\nrate(1000) specifies that the animation updates 1000 times per second.\ncube.pos.x += v*dt updates the position of the block, where cube.pos.x reads the x-coordinate of the cube's position, adds the velocity v multiplied by a short period dt, and reassigns it to the x-coordinate of the cube's position.\nxt.plot(pos=(t, cube.pos.x)) plots the block's x-t graph, with the horizontal axis position as time t and the vertical axis position as the block's position cube.pos.x.\nvt.plot(pos=(t, cube.v.x)) plots the block's v-t graph, with the horizontal axis position as time t and the vertical axis position as the block's velocity cube.v.x.\nt += dt updates the time by adding dt to t, reassigning it to t, equivalent to writing t = t + dt.\n\nConclusion\nEven though this animation is very simplistic and one might imagine the motion of the object without the need for animation, it is precisely because of this simplicity that it is suitable as a first animation. Any discrepancies from physical principles in the animation are easily noticeable. Later, more physical quantities such as acceleration, force, angle, etc., will be added to the animation.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n\n(2) Radius_I is the speed of the cube. When Radius_I changes to a new value, the speed of the cube also changes to that value.\n(3) Do not import packages that are not supported by VPython, such as np, math, and time.",
  "output": "from vpython import *\n\n# Define and initialize the Radius_I variable\nRadius_I = 1\n\n# Parameter settings\nsize = 0.5\nL = 10.0\nv = Radius_I\nt = 0\ndt = 0.01\n\n# Screen setup\nscene = canvas(title=\"Uniform Linear Motion\", width=800, height=300, x=0, y=0,\n               center=vec(0, 0, 0), background=vec(0.5, 0.5, 0))\ncube = box(pos=vec(-0.5*L, 0, 0), size=vec(size, size, size), color=color.red)\nfloor = box(pos=vec(0, -0.5*size, 0), size=vec(L, 0.01, 3), color=color.green)\n\ngd = graph(title=\"x-t curve\", x=0, y=300, width=400, height=200,\n           xtitle=\"t\", ytitle=\"x\", ymax=10, xmax=10, xmin=0, ymin=-10)\nxt = gcurve(graph=gd, color=color.red)\n\ngd2 = graph(title=\"v-t curve\", x=400, y=300, width=400, height=200,\n            xtitle=\"t\", ytitle=\"v\", ymax=10, xmax=10, xmin=0, ymin=-10)\nvt = gcurve(graph=gd2, color=color.red)\n\n# Object movement\nwhile cube.pos.x <= 0.5*L - 0.5*size:\n    rate(1000)\n    cube.pos.x += v*dt\n    xt.plot(pos=(t, cube.pos.x))\n    vt.plot(pos=(t, v))\n    t += dt"
}