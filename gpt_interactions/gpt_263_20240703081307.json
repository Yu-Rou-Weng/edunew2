{
  "timestamp": "2024-07-03T08:13:08.388Z",
  "mode": "initial",
  "input": "Simple Pendulum\n\nIf we define the moment of inertia (I) as:\n\n$$\nI = mr^2\n$$\n\nSince the direction of torque $\\tau$ and angular acceleration $\\alpha$ are opposite, their relationship can be expressed as:\n\n$$\n\\tau = -I\\alpha \\Rightarrow rF\\sin\\theta = -mr^2 \\frac{d^2\\theta}{dt^2} \\Rightarrow \\frac{F}{m}r\\sin\\theta = -\\frac{d^2\\theta}{dt^2}\n$$\n\nIf $r = L$ and $F = mg$, and when $\\theta < 5^\\circ$, $\\sin \\theta \\approx \\theta$, then the equation can be rewritten as:\n\n$$\n\\frac{g}{L}\\theta = -\\frac{d^2\\theta}{dt^2}\n$$\n\nFrom this, we can derive:\n\n$$\n\\theta(t) = \\theta_0 \\cos\\left(\\sqrt{\\frac{g}{L}} t\\right) = \\theta_0 \\cos(\\omega t)\n$$\n\nIn the above formula, $\\omega$ is the angular frequency of the oscillation, hence the period is:\n\n$$\nT = \\frac{2\\pi}{\\omega} = 2\\pi \\sqrt{\\frac{L}{g}}\n$$\n\nBelow are two programs:\n\n1. An ideal simple pendulum, change the initial swing angle to calculate the motion process and the period.\n2. A simple pendulum considering air resistance.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Length_I as a cyber input variable, set Length_I=10\n(2) Length_I is the length of the pendulum. When Length_I changes to a new value, the length of the pendulum also changes to that value.\n(3) Do not import packages that are not supported by VPython, such as np, math, and time.",
  "output": "from vpython import *\n\nscene = canvas(title=\"Simple Pendulum\", width=800, height=600, center=vec(0,0,0), background=vec(0.5,0.5,0))\n\nLength_I = 10 # Cyber input variable\ng = 9.8 # acceleration due to gravity\n\n# Creating the pendulum bob and the rod\nbob = sphere(pos=vec(Length_I,0,0), radius=0.5, color=color.red)\nrod = cylinder(pos=vec(0,0,0), axis=bob.pos, radius=0.1)\n\n# Initial conditions\nbob.theta = pi/4 # initial angle\nbob.omega = 0 # initial angular velocity\nbob.alpha = 0 # initial angular acceleration\n\n# Time variables\nt = 0 # start time\ndt = 0.01 # time step\n\nwhile True:\n    rate(100)\n    bob.alpha = -(g/Length_I)*sin(bob.theta) # Calculate angular acceleration\n    bob.omega += bob.alpha*dt # Update angular velocity\n    bob.theta += bob.omega*dt # Update angle\n\n    bob.pos = vec(Length_I*sin(bob.theta), -Length_I*cos(bob.theta), 0) # Update position\n    rod.axis = bob.pos # Update rod's axis\n\n    t += dt # Increment time"
}