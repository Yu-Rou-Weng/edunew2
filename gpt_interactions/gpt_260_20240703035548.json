{
  "timestamp": "2024-07-03T03:55:49.507Z",
  "mode": "initial",
  "input": "Simple Pendulum\n\nIf we define the moment of inertia (I) as:\n\n$$\nI = mr^2\n$$\n\nSince the torque $\\tau$ and angular acceleration $\\alpha$ have opposite directions, their relationship is:\n\n$$\n\\tau = -I\\alpha \\Rightarrow rF\\sin\\theta = -mr^2 \\frac{d^2\\theta}{dt^2} \\Rightarrow \\frac{F}{m}r\\sin\\theta = -\\frac{d^2\\theta}{dt^2}\n$$\n\nIf $r = L$ and $F = mg$, and when $\\theta < 5^\\circ$, $\\sin \\theta \\approx \\theta$, then the equation can be rewritten as:\n\n$$\n\\frac{g}{L}\\theta = -\\frac{d^2\\theta}{dt^2}\n$$\n\nFrom this, we can solve:\n\n$$\n\\theta(t) = \\theta_0 \\cos\\left(\\sqrt{\\frac{g}{L}} t\\right) = \\theta_0 \\cos(\\omega t)\n$$\n\nIn the formula above, $\\omega$ is the angular frequency of the oscillation, thus the period is:\n\n$$\nT = \\frac{2\\pi}{\\omega} = 2\\pi \\sqrt{\\frac{L}{g}}\n$$\n\nThere are two programs below:\n\n1. An ideal simple pendulum; change the initial angle to calculate the motion process and period.\n2. A simple pendulum considering air resistance.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Length_I as a cyber input variable, set Length_I=10\n(2) Define and initialize a variable named Radius_I as a cyber input selector, set Radius_I=1\n(3) Length_I is the length of the pendulum. When Length_I changes to a new value, the length of the pendulum also changes to that value.\n(4) Radius_I is the radius of the ball. When Radius_I changes to a new value, the radius of the ball also changes to that value.\n(5) Do not import packages that are not supported by VPython, such as np, math, and time.",
  "output": "from vpython import *\n\n# Cyber Input Variable Mapping Information\nLength_I = 10\nRadius_I = 1\n\n# Set up scene\nscene = canvas(width=800, height=800, center=vector(0, -0.05, 0))\n\n# Create the pendulum bob and rod\nrod = cylinder(radius=0.01, length=Length_I, color=color.yellow)\nbob = sphere(radius=Radius_I, color=color.red)\n\n# Set initial conditions\ntheta = 1.0  # initial angle of pendulum\nomega = 0.0  # initial angular velocity of pendulum\ng = 9.81  # gravitational acceleration\n\n# Create animation objects\npointer = arrow(pos=vector(0, 0, 0), axis=bob.pos, color=color.blue)\ntxt = label(pos=vector(0, -0.1, 0), text='')\n\n# Calculate period\nT = 2*pi*sqrt(Length_I/g)\n\n# Time step for animation\ndt = 0.01\n\n# Animation loop\nwhile True:\n    rate(100)  # limit animation speed to 100 frames per second\n    omega -= g*sin(theta)*dt/Length_I  # calculate angular acceleration\n    theta += omega*dt  # update angle\n    bob.pos = vector(Length_I*sin(theta), -Length_I*cos(theta), 0)  # update bob position\n    rod.axis = bob.pos  # update rod position"
}