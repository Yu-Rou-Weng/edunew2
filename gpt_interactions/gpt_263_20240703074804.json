{
  "timestamp": "2024-07-03T07:48:04.719Z",
  "mode": "initial",
  "input": "Simple Pendulum\n\nIf we define the moment of inertia (I) as:\n\n$$\nI = mr^2\n$$\n\nSince the torque $\\tau$ and angular acceleration $\\alpha$ are in opposite directions, their relationship is:\n\n$$\n\\tau = -I\\alpha \\Rightarrow rF\\sin\\theta = -mr^2 \\frac{d^2\\theta}{dt^2} \\Rightarrow \\frac{F}{m}r\\sin\\theta = -\\frac{d^2\\theta}{dt^2}\n$$\n\nIf $r = L$ and $F = mg$, and when $\\theta < 5^\\circ$, $\\sin \\theta \\approx \\theta$, then the equation can be rewritten as:\n\n$$\n\\frac{g}{L}\\theta = -\\frac{d^2\\theta}{dt^2}\n$$\n\nFrom this, we can derive:\n\n$$\n\\theta(t) = \\theta_0 \\cos\\left(\\sqrt{\\frac{g}{L}} t\\right) = \\theta_0 \\cos(\\omega t)\n$$\n\nIn the above formula, $\\omega$ is the angular frequency of the oscillation, hence the period is:\n\n$$\nT = \\frac{2\\pi}{\\omega} = 2\\pi \\sqrt{\\frac{L}{g}}\n$$\n\nThere are two programs below:\n\n1. An ideal simple pendulum, changing the initial swing angle to calculate the motion process and period.\n2. A simple pendulum considering air resistance.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Speed_I as a cyber input variable, set Speed_I=0.1\n(2) Speed_I is the speed of the pendulum. When Speed_I changes to a new value, the speed of the pendulum also changes to that value.\n(3) Do not import packages that are not supported by VPython, such as np, math, and time.",
  "output": "from vpython import *\n\n# Create the pendulum bob and rod\nbob = sphere(pos=vector(1,0,0), radius=0.05, color=color.blue)\nrod = cylinder(pos=vector(0,0,0), axis=bob.pos, radius=0.01)\n\n# Set initial conditions\nbob.pos = vector(1, 0, 0)\ninitial_angle = mag(bob.pos)\nSpeed_I = 0.1\n\n# Set physical constants\ng = 9.81\nL = mag(bob.pos)\n\n# Set time step\ndt = 0.01\n\n# Simulation loop\nwhile True:\n    rate(100)\n    \n    # Calculate acceleration\n    acceleration = -g/L * initial_angle\n    \n    # Update position and velocity\n    bob.pos = bob.pos + Speed_I*dt\n    Speed_I = Speed_I + acceleration*dt\n    \n    # Update rod's position\n    rod.axis = bob.pos"
}