{
  "timestamp": "2024-07-03T02:28:19.151Z",
  "mode": "initial",
  "input": "Uniform Linear Motion\n\nWe are finally starting to create physics simulation animations, beginning with the simplest form of motion: uniform linear motion. The goal is to sketch out a block, a floor, and the block's x-t graph and v-t graph. The results are as follows: GlowScript website animation link.\n\nBlock's x-t Graph\n\nBlock's v-t Graph\n\nIf you open the code in the Python IDLE editor, the default display color should look similar to the above. The editor automatically highlights reserved words with special functions in Python, text within quotes, comments, etc., in different colors to facilitate code reading. Python has two types of comments:\n\nMulti-line comments: Text between two \"\"\" or two '''.\nSingle-line comments: Text from # to the end of the line.\nThe interpreter ignores comments when executing the code. Although comments do not aid the function of the program, they are very important for users. Without comments, even the author might forget what they were writing after a few days, not to mention making it understandable to other users. Therefore, it is essential to develop the habit of writing comments.\n\nI usually start by clearly writing the program's name, function, date, and author before setting the parameters.\n\nfrom vpython import *\nThis syntax is used in Python to import libraries. By default, the vpython library, which is used for physics simulations, is not imported, so we need to include this line to import all functions from the vpython library. Alternatively, you could write:\n\nimport vpython as custom_name\nIf the custom name is vp, then to use a function from vpython, you would write vp.[function_name]. If you write only import vpython, then to use a function from vpython, you would need to write vpython.[function_name]. Since our focus is on animation, it is recommended to use the first method, so you only need to write the function name when using functions from vpython.\n\nThe program can be divided into three parts:\n\nParameter Settings\nDisplay Settings\nObject Motion\n\nParameter Settings\nIn the parameter settings section, I typically assign frequently used values in the program to corresponding variables and give these variables easy-to-understand names. Although Python 3.X supports Unicode and allows using Chinese characters as variable names, it is still recommended to use English letters, numbers, and underscores as variable names. Variable names should not start with a number and should not use reserved system words. Ideally, variables should be named meaningfully, for example, naming the block's size as size.\n\nVariables I have defined here include size, L, v, t, dt, and their purposes are written in the comments. The value of the time interval dt should be adjusted according to actual needs because VPython calculates physical quantities such as force, acceleration, speed, and displacement using numerical methods. If the time interval is too long, the calculated values may have significant errors; however, if the time interval is too short, the entire simulation animation will take longer to execute. The current setting of 0.01 is precise enough for this simulation.\n\nDisplay Settings\nThe functions we will use include canvas, box, graph, gcurve, and I will explain the syntax of these functions respectively.\n\ncanvas\nCanvas in English refers to both the fabric and the painting surface. In VPython, it is used to generate the display for animations, currently shown through a browser like Google Chrome, Firefox, or Windows Edge. [1] In VPython 6 and earlier versions, the function was named display, and it would open a separate window. The right side of the screen is the +x-axis, the top is the +y-axis, and the direction out of the screen is the +z-axis. In this program, I have named the animation window scene. The usual adjustable options include:\n\ntitle: The title of the display, shown at the top-left of the screen.\nwidth: The width of the display (horizontal direction).\nheight: The height of the display (vertical direction).\nx, y: The top-left corner of the display in the browser window, although it seems that VPython automatically adjusts based on the existing object's width and height.\ncenter: Represents the observer's position.\nbackground: The background color, the numbers in the vector brackets are the proportions of the primary colors red, green, and blue, ranging from 0 to 1. Additionally, pre-named common colors can also be used. [2]\n\nVPython 7 Supported Colors\n\nbox\nBox, in English, refers to a container or box. In VPython, it is used to produce a cuboid. In this program, both the block cube and the floor are generated using box. [3] The usual adjustable options include:\n\npos: The position of the center of the cuboid, the value is a vector, vector(x, y, z), vector can also be simplified to vec.\nlength, height, width are respectively the lengths in the x, y, z directions, can also be simplified to size=vec(x, y, z).\ncolor: The color of the cuboid.\n\ngraph\nGraph, in English, refers to a chart. In VPython, it is used to create a plotting window. In VPython 6 and earlier versions, the function name was gdisplay. [4] In this program, I have named two plotting windows gd and gd2, used to plot the block's x-t graph and v-t graph respectively. The adjustable options are similar to those of canvas, and the functions of title, width, height, x, y have already been introduced, while the options used differently here include:\n\nxtitle: The name of the x-axis.\nytitle: The name of the y-axis.\n\ngcurve\nIn VPython, gcurve is used to draw continuous curves in a plotting window. In this program, the two curves are named xt and vt, displayed in gd and gd2 respectively. The usual adjustable options include:\n\ngraph: Which plotting window to display in.\ncolor: The color of the curve.\nAdditionally, there are gdots, which only plot data points, and gvbars, which are used for bar charts, but these have not been used here.\n\nObject Motion\nUsing a while loop, the state of the object is updated every short interval dt. Since I want the program to stop when the block reaches the edge of the floor, the condition set in the while loop is\n\ncube.pos.x <= 0.5*L - 0.5*size \nI will now explain the purpose of each line of code.\n\nrate(1000) specifies that the animation updates 1000 times per second.\ncube.pos.x += v*dt is used to update the position of the block, cube.pos.x reads the x-coordinate of the cube's position, adds the speed v multiplied by a short time dt, and then reassigns it to the cube's x-coordinate.\nxt.plot(pos=(t, cube.pos.x)) is used to draw the block's x-t graph, with the horizontal axis position as time t and the vertical axis position as the block's position cube.pos.x.\nvt.plot(pos=(t, cube.v.x)) is used to draw the block's v-t graph, with the horizontal axis position as time t and the vertical axis position as the block's speed cube.v.x.\nt += dt is used to update the time, adding dt to t, then reassigning it to t, equivalent to t = t + dt.\n\nConclusion\nAlthough the animation effect is very simple, and one might imagine the object's motion without the need for animation, it is precisely because of this simplicity that it is suitable as the first animation. Any discrepancies from physical principles in the animation are easily noticeable. Later, more physical quantities such as acceleration, force, angle, etc., will be added to the animation.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Radius_I as a cyber input variable, set Radius_I=1\n\n(2) Radius_I is the speed of the cube. When Radius_I changes to a new value, the speed of the cube also changes to that value.\n(3) Do not import packages that are not supported by VPython, such as np, math, and time.",
  "output": "from vpython import *\n\n# Parameter Settings\nsize = 0.2 # Size of the block\nL = 2.0 # Length of the floor\nv = 1.0 # Initial speed of the block\nt = 0 # Start time\ndt = 0.01 # Time interval\n\n# Display Settings\nscene = canvas(title=\"Uniform Linear Motion\", width=600, height=600, x=0, y=0, center=vector(0, -0.05, 0), background=vector(0.5, 0.5, 0))\ncube = box(pos=vector(-L/2+size/2, 0, 0), size=vector(size, size, size), color=color.blue)\nfloor = box(pos=vector(0, -size/2, 0), size=vector(L, size/10, size), color=color.yellow)\n\ngd = graph(title=\"x-t Graph\", x=600, y=0, width=600, height=300, xtitle=\"t(s)\", ytitle=\"x(m)\")\nxt = gcurve(graph=gd, color=color.red)\n\ngd2 = graph(title=\"v-t Graph\", x=600, y=300, width=600, height=300, xtitle=\"t(s)\", ytitle=\"v(m/s)\")\nvt = gcurve(graph=gd2, color=color.red)\n\n# Object Motion\nwhile cube.pos.x <= 0.5*L - 0.5*size:\n    rate(1000)\n    cube.pos.x += v*dt\n    xt.plot(pos=(t, cube.pos.x))\n    vt.plot(pos=(t, v))\n    t += dt\n\n# Cyber Input Variable Mapping\nRadius_I = 1\nv = Radius_I\ncube.v = vector(v, 0, 0)"
}