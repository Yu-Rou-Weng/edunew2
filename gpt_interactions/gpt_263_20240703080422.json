{
  "timestamp": "2024-07-03T08:04:23.151Z",
  "mode": "initial",
  "input": "Simple Pendulum\n\nIf we define the moment of inertia (I) as:\n\n$$\nI = mr^2\n$$\n\nSince the direction of torque $\\tau$ and angular acceleration $\\alpha$ are opposite, their relationship can be described as:\n\n$$\n\\tau = -I\\alpha \\Rightarrow rF\\sin\\theta = -mr^2 \\frac{d^2\\theta}{dt^2} \\Rightarrow \\frac{F}{m}r\\sin\\theta = -\\frac{d^2\\theta}{dt^2}\n$$\n\nIf $r = L$ and $F = mg$, and when $\\theta < 5^\\circ$, $\\sin \\theta \\approx \\theta$, then the equation can be rewritten as:\n\n$$\n\\frac{g}{L}\\theta = -\\frac{d^2\\theta}{dt^2}\n$$\n\nFrom this, we can derive:\n\n$$\n\\theta(t) = \\theta_0 \\cos\\left(\\sqrt{\\frac{g}{L}} t\\right) = \\theta_0 \\cos(\\omega t)\n$$\n\nIn the above formula, $\\omega$ is the angular frequency of the oscillation, thus the period is:\n\n$$\nT = \\frac{2\\pi}{\\omega} = 2\\pi \\sqrt{\\frac{L}{g}}\n$$\n\nThere are two programs provided below:\n\n1. Ideal simple pendulum, where changing the initial swing angle calculates the motion process and period.\n2. Simple pendulum considering air resistance.\n\nCyber Input Variable Mapping Information:\n\n(1) Define and initialize a variable named Length_I as a cyber input variable, set Length_I=10\n(2) Length_I is the length of the pendulum. When Length_I changes to a new value, the length of the pendulum also changes to that value.\n(3) Do not import packages that are not supported by VPython, such as np, math, and time.",
  "output": "from vpython import *\n\n# Initial parameters\nLength_I = 10  # Length of pendulum\ng = 9.8  # Acceleration due to gravity\ntheta_0 = 5  # Initial angle in degrees\ntheta_0 = radians(theta_0)  # Convert angle to radians\ndt = 0.01  # Time step\n\n# Create pendulum\nceiling = box(length=0.2, height=0.01, width=0.2, color=color.blue)\nball = sphere(pos=vector(Length_I*sin(theta_0), -Length_I*cos(theta_0), 0), radius=1, color=color.red)\nrod = cylinder(pos=ceiling.pos, axis=ball.pos-ceiling.pos, radius=0.01)\n\n# Initialize motion variables\nomega = 0\ntheta = theta_0\nt = 0\n\n# Animation loop\nwhile True:\n    rate(100)\n    omega -= g/Length_I * theta * dt\n    theta += omega * dt\n    ball.pos = vector(Length_I*sin(theta), -Length_I*cos(theta), 0)\n    rod.axis = ball.pos\n    t += dt"
}