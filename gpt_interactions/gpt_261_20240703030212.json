{
  "timestamp": "2024-07-03T03:02:12.629Z",
  "mode": "initial",
  "input": "Uniform Linear Motion\n\nWe are finally starting to create physics simulation animations, and we'll begin with the simplest form: uniform linear motion. The goal is to depict a block, the floor, and the block's x-t graph and v-t graph. The results are as follows: GlowScript website animation link.\n\nBlock's x-t graph\n\nBlock's v-t graph\n\nIf you open the code in Python IDLE's editor, under the default settings, the colors you see should be similar to the ones shown above. The editor automatically marks reserved words with special functions in Python, text within quotes, comments, etc., with different colors to facilitate code reading. Python has two types of comments:\n\nMulti-line comments: Text between two sets of triple quotes, either \"\"\" or '''\nSingle-line comments: Text from a # to the end of the line\nThe interpreter ignores comments during code execution. Although comments do not assist in the program's operation, they are crucial for the user. Without comments, even the author may forget what they were writing after a few days, not to mention making it understandable to other users. Therefore, it is essential to develop the habit of writing comments.\n\nI usually start by clearly writing the program's name, function, date, and author. Before setting the parameters, I write:\n\nfrom vpython import *\nThis syntax is used in Python to import libraries. By default, the physics simulation library vpython is not included, so we need to add this line of code, meaning importing all functions from the vpython library. Alternatively, you can write:\n\nimport vpython as custom_name\nIf the custom_name is vp, you would need to refer to functions in vpython as vp.[function_name]; if you only write import vpython, you must refer to functions as vpython.[function_name]. Since we are primarily focused on animations, the first method is recommended so that you only need to write the function name when referring to functions in vpython.\n\nThe entire program can be roughly divided into three parts:\n\nParameter settings\nScreen settings\nObject motion\n\nParameter Settings\nIn the parameter settings section, I usually assign values used repeatedly in the program to corresponding variables and name these variables with easily understandable names. Although Python 3.X supports Unicode and allows the use of Chinese characters as variable names, it is still recommended to use English letters, numbers, and underscores as variable names. These should be case-sensitive, not start with a number, and not use reserved words. Though you can name variables according to your preference, it is best to use meaningful names, such as naming the block size as size.\n\nVariables I have defined here include size, L, v, t, dt, with their purposes already written in the comments of each line. The value of the time interval dt should be adjusted according to actual needs, as VPython uses numerical methods to calculate physical quantities such as forces, acceleration, velocity, displacement, etc. If the time length inserted is too long, the numerical values will have a larger error; however, if the time length is too short, the simulation animation will take longer to execute. The current value is set to 0.01, which is precise enough for this simulation animation.\n\nScreen Settings\nWe will use the functions canvas, box, graph, gcurve, explained below respectively.\n\ncanvas\ncanvas means \"canvas\" or \"screen\" in English, used in VPython to generate the animation display screen, currently displayed through the browser, compatible with Google Chrome, FireFox, or Windows Edge. In VPython 6 and earlier versions, the function name was display, which would open a separate window. The options usually adjusted include:\n\ntitle: The title of the screen, displayed in the upper left corner of the screen.\nwidth: The width of the screen (horizontal direction).\nheight: The height of the screen (vertical direction).\nx, y: The position of the top left corner of the screen in the browser window, though it seems VPython automatically adjusts based on the existing object's width and height.\ncenter: Represents the position of the observer.\nbackground: Background color, numbers in the vector brackets represent the proportions of the primary colors red, green, and blue, ranging from 0 to 1. Additionally, commonly named colors can also be used.\n(1) Do not import packages that are not supported by VPython, such as np, math, and time.",
  "output": "from vpython import *\n\n# parameter setting\nsize = 0.5\nL = 10.0\nv = 1.0\nt = 0\ndt = 0.01\n\n# screen setting\nscene = canvas(title='Uniform Linear Motion', width=600, height=600, x=0, y=0, center=vector(0, 0, 0), background=vector(0, 0, 0))\nfloor = box(pos=vector(0, -size, 0), length=L, height=0.01, width=3, color=color.blue)\nblock = box(pos=vector(-L/2, 0, 0), length=size, height=size, width=size, color=color.red, make_trail=True)\n\n# graph setting\nx_t_g = graph(title='x-t graph', xtitle='time(s)', ytitle='x(m)', fast=False)\nx_t = gcurve(graph=x_t_g, color=color.red)\n\nv_t_g = graph(title='v-t graph', xtitle='time(s)', ytitle='v(m/s)', fast=False)\nv_t = gcurve(graph=v_t_g, color=color.red)\n\n# motion\nwhile True:\n    rate(1/dt)\n    block.pos.x = block.pos.x + v*dt\n    t = t + dt\n    x_t.plot(pos=(t, block.pos.x))\n    v_t.plot(pos=(t, v))"
}